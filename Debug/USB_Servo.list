
USB_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005510  08005510  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005510  08005510  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005510  08005510  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800551c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  200001f0  0800570c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000162c  0800570c  0002162c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d84  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cd3  00000000  00000000  00045f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014d91  00000000  00000000  0004ac70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  0005fa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f00  00000000  00000000  00060a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb90  00000000  00000000  00062950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd6c  00000000  00000000  000824e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bd53  00000000  00000000  0009f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013af9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f84  00000000  00000000  0013aff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080053a0 	.word	0x080053a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	080053a0 	.word	0x080053a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <usb_receive>:
#include "usbd_cdc_if.h"


// from c_interface.h
extern "C" {
    void usb_receive(uint8_t* buf, uint32_t len) {
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	b084      	sub	sp, #16

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000160:	1e0c      	subs	r4, r1, #0
 8000162:	db21      	blt.n	80001a8 <usb_receive+0x4c>
 8000164:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000166:	b314      	cbz	r4, 80001ae <usb_receive+0x52>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000168:	4620      	mov	r0, r4
 800016a:	f004 fe1a 	bl	8004da2 <_Znwj>
 800016e:	4606      	mov	r6, r0
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000170:	4622      	mov	r2, r4
 8000172:	4629      	mov	r1, r5
 8000174:	f004 ff40 	bl	8004ff8 <memcpy>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000178:	2300      	movs	r3, #0
 800017a:	9301      	str	r3, [sp, #4]
 800017c:	9302      	str	r3, [sp, #8]
 800017e:	9303      	str	r3, [sp, #12]
 8000180:	4620      	mov	r0, r4
 8000182:	f004 fe0e 	bl	8004da2 <_Znwj>
 8000186:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000188:	9001      	str	r0, [sp, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800018a:	4425      	add	r5, r4
 800018c:	9503      	str	r5, [sp, #12]
 800018e:	4622      	mov	r2, r4
 8000190:	4631      	mov	r1, r6
 8000192:	f004 ff31 	bl	8004ff8 <memcpy>
	this->_M_impl._M_finish =
 8000196:	9502      	str	r5, [sp, #8]
        const auto buf_vec = std::vector<uint8_t>(buf,buf+len);
    	usb_interface::receive(buf_vec);
 8000198:	a801      	add	r0, sp, #4
 800019a:	f000 fb67 	bl	800086c <_ZN13usb_interface7receiveESt6vectorIhSaIhEE>
	_M_deallocate(_M_impl._M_start,
 800019e:	9801      	ldr	r0, [sp, #4]
	if (__p)
 80001a0:	b1a0      	cbz	r0, 80001cc <usb_receive+0x70>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80001a2:	9903      	ldr	r1, [sp, #12]
 80001a4:	1a09      	subs	r1, r1, r0
 80001a6:	e00e      	b.n	80001c6 <usb_receive+0x6a>
	  __throw_length_error(
 80001a8:	480b      	ldr	r0, [pc, #44]	; (80001d8 <usb_receive+0x7c>)
 80001aa:	f004 fe11 	bl	8004dd0 <_ZSt20__throw_length_errorPKc>
	this->_M_impl._M_start = this->_M_allocate(__n);
 80001ae:	2300      	movs	r3, #0
 80001b0:	9301      	str	r3, [sp, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80001b2:	9403      	str	r4, [sp, #12]
	this->_M_impl._M_finish =
 80001b4:	9402      	str	r4, [sp, #8]
 80001b6:	a801      	add	r0, sp, #4
 80001b8:	f000 fb58 	bl	800086c <_ZN13usb_interface7receiveESt6vectorIhSaIhEE>
	_M_deallocate(_M_impl._M_start,
 80001bc:	9801      	ldr	r0, [sp, #4]
	if (__p)
 80001be:	b148      	cbz	r0, 80001d4 <usb_receive+0x78>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80001c0:	9903      	ldr	r1, [sp, #12]
 80001c2:	1a09      	subs	r1, r1, r0
	_M_deallocate(_M_impl._M_start,
 80001c4:	2600      	movs	r6, #0
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80001c6:	f004 fddb 	bl	8004d80 <_ZdlPvj>
	if (__p)
 80001ca:	b11e      	cbz	r6, 80001d4 <usb_receive+0x78>
 80001cc:	4621      	mov	r1, r4
 80001ce:	4630      	mov	r0, r6
 80001d0:	f004 fdd6 	bl	8004d80 <_ZdlPvj>
    }
 80001d4:	b004      	add	sp, #16
 80001d6:	bd70      	pop	{r4, r5, r6, pc}
 80001d8:	080053dc 	.word	0x080053dc

080001dc <_ZN13usb_interface11cobs_encodeEPKhPhi>:
    }


    void cobs_encode(const uint8_t data[], uint8_t return_data[], int data_size)
    {
        int zero_index = data_size + 1; // this is return_data index
 80001dc:	f102 0c01 	add.w	ip, r2, #1
        return_data[zero_index] = 0x00;
 80001e0:	2300      	movs	r3, #0
 80001e2:	f801 300c 	strb.w	r3, [r1, ip]
        for (int i = data_size; i > 0; i--)
 80001e6:	429a      	cmp	r2, r3
 80001e8:	dd15      	ble.n	8000216 <_ZN13usb_interface11cobs_encodeEPKhPhi+0x3a>
    {
 80001ea:	b410      	push	{r4}
 80001ec:	4410      	add	r0, r2
 80001ee:	188b      	adds	r3, r1, r2
 80001f0:	e003      	b.n	80001fa <_ZN13usb_interface11cobs_encodeEPKhPhi+0x1e>
                return_data[i] = (uint8_t)(zero_index - i);
                zero_index = i;
            }
            else
            {
                return_data[i] = data[i - 1];
 80001f2:	701c      	strb	r4, [r3, #0]
        for (int i = data_size; i > 0; i--)
 80001f4:	3b01      	subs	r3, #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	d009      	beq.n	800020e <_ZN13usb_interface11cobs_encodeEPKhPhi+0x32>
            if (data[i - 1] == 0x00)
 80001fa:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
 80001fe:	2c00      	cmp	r4, #0
 8000200:	d1f7      	bne.n	80001f2 <_ZN13usb_interface11cobs_encodeEPKhPhi+0x16>
                return_data[i] = (uint8_t)(zero_index - i);
 8000202:	ebac 0c02 	sub.w	ip, ip, r2
 8000206:	f883 c000 	strb.w	ip, [r3]
                zero_index = i;
 800020a:	4694      	mov	ip, r2
 800020c:	e7f2      	b.n	80001f4 <_ZN13usb_interface11cobs_encodeEPKhPhi+0x18>
            }
        }
        return_data[0] = zero_index;
 800020e:	f881 c000 	strb.w	ip, [r1]
    }
 8000212:	bc10      	pop	{r4}
 8000214:	4770      	bx	lr
        return_data[0] = zero_index;
 8000216:	f881 c000 	strb.w	ip, [r1]
 800021a:	4770      	bx	lr

0800021c <_ZN13usb_interface4sendESt6vectorIhSaIhEE>:
    void send(const std::vector<uint8_t> buf) {
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	4604      	mov	r4, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000220:	6800      	ldr	r0, [r0, #0]
 8000222:	6862      	ldr	r2, [r4, #4]
 8000224:	1a12      	subs	r2, r2, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000226:	1c95      	adds	r5, r2, #2
 8000228:	d417      	bmi.n	800025a <_ZN13usb_interface4sendESt6vectorIhSaIhEE+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800022a:	b1cd      	cbz	r5, 8000260 <_ZN13usb_interface4sendESt6vectorIhSaIhEE+0x44>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800022c:	4628      	mov	r0, r5
 800022e:	f004 fdb8 	bl	8004da2 <_Znwj>
 8000232:	4606      	mov	r6, r0
	    *__first = __tmp;
	  return;
	}
#endif
      if (const size_t __len = __last - __first)
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8000234:	462a      	mov	r2, r5
 8000236:	2100      	movs	r1, #0
 8000238:	f004 ff06 	bl	8005048 <memset>
      { return _M_data_ptr(this->_M_impl._M_start); }
 800023c:	6820      	ldr	r0, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800023e:	6862      	ldr	r2, [r4, #4]
        cobs_encode(buf.data(), encoded_buf.data(), buf.size());
 8000240:	1a12      	subs	r2, r2, r0
 8000242:	4631      	mov	r1, r6
 8000244:	f7ff ffca 	bl	80001dc <_ZN13usb_interface11cobs_encodeEPKhPhi>
    	CDC_Transmit_FS(encoded_buf.data(), encoded_buf.size());
 8000248:	b2a9      	uxth	r1, r5
 800024a:	4630      	mov	r0, r6
 800024c:	f004 fbe0 	bl	8004a10 <CDC_Transmit_FS>
	::operator delete(__p
 8000250:	4629      	mov	r1, r5
 8000252:	4630      	mov	r0, r6
 8000254:	f004 fd94 	bl	8004d80 <_ZdlPvj>
    }
 8000258:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <_ZN13usb_interface4sendESt6vectorIhSaIhEE+0x54>)
 800025c:	f004 fdb8 	bl	8004dd0 <_ZSt20__throw_length_errorPKc>
        cobs_encode(buf.data(), encoded_buf.data(), buf.size());
 8000260:	2100      	movs	r1, #0
 8000262:	f7ff ffbb 	bl	80001dc <_ZN13usb_interface11cobs_encodeEPKhPhi>
    	CDC_Transmit_FS(encoded_buf.data(), encoded_buf.size());
 8000266:	2100      	movs	r1, #0
 8000268:	4608      	mov	r0, r1
 800026a:	f004 fbd1 	bl	8004a10 <CDC_Transmit_FS>
      _M_deallocate(pointer __p, size_t __n)
 800026e:	e7f3      	b.n	8000258 <_ZN13usb_interface4sendESt6vectorIhSaIhEE+0x3c>
 8000270:	080053dc 	.word	0x080053dc

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b530      	push	{r4, r5, lr}
 8000276:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	2400      	movs	r4, #0
 800027a:	9404      	str	r4, [sp, #16]
 800027c:	9405      	str	r4, [sp, #20]
 800027e:	9406      	str	r4, [sp, #24]
 8000280:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_GPIO_Init+0x6c>)
 8000284:	699a      	ldr	r2, [r3, #24]
 8000286:	f042 0220 	orr.w	r2, r2, #32
 800028a:	619a      	str	r2, [r3, #24]
 800028c:	699a      	ldr	r2, [r3, #24]
 800028e:	f002 0220 	and.w	r2, r2, #32
 8000292:	9201      	str	r2, [sp, #4]
 8000294:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	699a      	ldr	r2, [r3, #24]
 8000298:	f042 0204 	orr.w	r2, r2, #4
 800029c:	619a      	str	r2, [r3, #24]
 800029e:	699a      	ldr	r2, [r3, #24]
 80002a0:	f002 0204 	and.w	r2, r2, #4
 80002a4:	9202      	str	r2, [sp, #8]
 80002a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	699a      	ldr	r2, [r3, #24]
 80002aa:	f042 0208 	orr.w	r2, r2, #8
 80002ae:	619a      	str	r2, [r3, #24]
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f003 0308 	and.w	r3, r3, #8
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USB_PULLUP_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80002ba:	4d0a      	ldr	r5, [pc, #40]	; (80002e4 <MX_GPIO_Init+0x70>)
 80002bc:	4622      	mov	r2, r4
 80002be:	21c2      	movs	r1, #194	; 0xc2
 80002c0:	4628      	mov	r0, r5
 80002c2:	f000 fe57 	bl	8000f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin|LED1_Pin|LED2_Pin;
 80002c6:	23c2      	movs	r3, #194	; 0xc2
 80002c8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d0:	2302      	movs	r3, #2
 80002d2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d4:	a904      	add	r1, sp, #16
 80002d6:	4628      	mov	r0, r5
 80002d8:	f000 fd12 	bl	8000d00 <HAL_GPIO_Init>

}
 80002dc:	b009      	add	sp, #36	; 0x24
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b500      	push	{lr}
 80002ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ec:	2300      	movs	r3, #0
 80002ee:	930c      	str	r3, [sp, #48]	; 0x30
 80002f0:	930d      	str	r3, [sp, #52]	; 0x34
 80002f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80002f4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	9305      	str	r3, [sp, #20]
 80002f8:	9306      	str	r3, [sp, #24]
 80002fa:	9307      	str	r3, [sp, #28]
 80002fc:	9308      	str	r3, [sp, #32]
 80002fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	9302      	str	r3, [sp, #8]
 8000304:	9303      	str	r3, [sp, #12]
 8000306:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	2201      	movs	r2, #1
 800030a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2202      	movs	r2, #2
 8000316:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000318:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	a80a      	add	r0, sp, #40	; 0x28
 8000322:	f001 fe69 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000326:	b9c0      	cbnz	r0, 800035a <SystemClock_Config+0x72>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2102      	movs	r1, #2
 800032e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000338:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	9309      	str	r3, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	a805      	add	r0, sp, #20
 800033e:	f002 f89b 	bl	8002478 <HAL_RCC_ClockConfig>
 8000342:	b960      	cbnz	r0, 800035e <SystemClock_Config+0x76>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000344:	2310      	movs	r3, #16
 8000346:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000348:	2300      	movs	r3, #0
 800034a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	a801      	add	r0, sp, #4
 800034e:	f002 f94b 	bl	80025e8 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	b930      	cbnz	r0, 8000362 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
}
 8000354:	b015      	add	sp, #84	; 0x54
 8000356:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035c:	e7fe      	b.n	800035c <SystemClock_Config+0x74>
 800035e:	b672      	cpsid	i
 8000360:	e7fe      	b.n	8000360 <SystemClock_Config+0x78>
 8000362:	b672      	cpsid	i
 8000364:	e7fe      	b.n	8000364 <SystemClock_Config+0x7c>

08000366 <main>:
{
 8000366:	b500      	push	{lr}
 8000368:	b083      	sub	sp, #12
  HAL_Init();
 800036a:	f000 fc3b 	bl	8000be4 <HAL_Init>
  SystemClock_Config();
 800036e:	f7ff ffbb 	bl	80002e8 <SystemClock_Config>
  MX_GPIO_Init();
 8000372:	f7ff ff7f 	bl	8000274 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000376:	f004 fa85 	bl	8004884 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800037a:	f000 f909 	bl	8000590 <MX_TIM1_Init>
  MX_TIM2_Init();
 800037e:	f000 f98f 	bl	80006a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000382:	f000 fa03 	bl	800078c <MX_TIM3_Init>
  volatile int i = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	9301      	str	r3, [sp, #4]
    i++;
 800038a:	9b01      	ldr	r3, [sp, #4]
 800038c:	3301      	adds	r3, #1
 800038e:	9301      	str	r3, [sp, #4]
  while (1)
 8000390:	e7fb      	b.n	800038a <main+0x24>

08000392 <Error_Handler>:
 8000392:	b672      	cpsid	i
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x2>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <HAL_MspInit+0x3c>)
 800039c:	699a      	ldr	r2, [r3, #24]
 800039e:	f042 0201 	orr.w	r2, r2, #1
 80003a2:	619a      	str	r2, [r3, #24]
 80003a4:	699a      	ldr	r2, [r3, #24]
 80003a6:	f002 0201 	and.w	r2, r2, #1
 80003aa:	9200      	str	r2, [sp, #0]
 80003ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	69da      	ldr	r2, [r3, #28]
 80003b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003b4:	61da      	str	r2, [r3, #28]
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <HAL_MspInit+0x40>)
 80003c2:	6853      	ldr	r3, [r2, #4]
 80003c4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	b002      	add	sp, #8
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <NMI_Handler>

080003de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <HardFault_Handler>

080003e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <MemManage_Handler>

080003e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler>

080003e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <UsageFault_Handler>

080003e6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e6:	4770      	bx	lr

080003e8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e8:	4770      	bx	lr

080003ea <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ea:	4770      	bx	lr

080003ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ee:	f000 fc0b 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f2:	bd08      	pop	{r3, pc}

080003f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003f6:	4802      	ldr	r0, [pc, #8]	; (8000400 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80003f8:	f000 fe74 	bl	80010e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003fc:	bd08      	pop	{r3, pc}
 80003fe:	bf00      	nop
 8000400:	20001078 	.word	0x20001078

08000404 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000404:	2001      	movs	r0, #1
 8000406:	4770      	bx	lr

08000408 <_kill>:

int _kill(int pid, int sig)
{
 8000408:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800040a:	f004 fdab 	bl	8004f64 <__errno>
 800040e:	2316      	movs	r3, #22
 8000410:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000412:	f04f 30ff 	mov.w	r0, #4294967295
 8000416:	bd08      	pop	{r3, pc}

08000418 <_exit>:

void _exit (int status)
{
 8000418:	b508      	push	{r3, lr}
  errno = EINVAL;
 800041a:	f004 fda3 	bl	8004f64 <__errno>
 800041e:	2316      	movs	r3, #22
 8000420:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000422:	e7fe      	b.n	8000422 <_exit+0xa>

08000424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000424:	b508      	push	{r3, lr}
 8000426:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000428:	4a0c      	ldr	r2, [pc, #48]	; (800045c <_sbrk+0x38>)
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	b152      	cbz	r2, 8000444 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <_sbrk+0x38>)
 8000430:	6810      	ldr	r0, [r2, #0]
 8000432:	4403      	add	r3, r0
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <_sbrk+0x3c>)
 8000436:	490b      	ldr	r1, [pc, #44]	; (8000464 <_sbrk+0x40>)
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	4293      	cmp	r3, r2
 800043c:	d806      	bhi.n	800044c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800043e:	4a07      	ldr	r2, [pc, #28]	; (800045c <_sbrk+0x38>)
 8000440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000442:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000444:	4a05      	ldr	r2, [pc, #20]	; (800045c <_sbrk+0x38>)
 8000446:	4908      	ldr	r1, [pc, #32]	; (8000468 <_sbrk+0x44>)
 8000448:	6011      	str	r1, [r2, #0]
 800044a:	e7f0      	b.n	800042e <_sbrk+0xa>
    errno = ENOMEM;
 800044c:	f004 fd8a 	bl	8004f64 <__errno>
 8000450:	230c      	movs	r3, #12
 8000452:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000454:	f04f 30ff 	mov.w	r0, #4294967295
 8000458:	e7f3      	b.n	8000442 <_sbrk+0x1e>
 800045a:	bf00      	nop
 800045c:	2000020c 	.word	0x2000020c
 8000460:	20005000 	.word	0x20005000
 8000464:	00000400 	.word	0x00000400
 8000468:	20001630 	.word	0x20001630

0800046c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	4770      	bx	lr
	...

08000470 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000470:	b084      	sub	sp, #16

  if(tim_baseHandle->Instance==TIM1)
 8000472:	6803      	ldr	r3, [r0, #0]
 8000474:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <HAL_TIM_Base_MspInit+0x60>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d007      	beq.n	800048a <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800047a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800047e:	d00f      	beq.n	80004a0 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8000480:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <HAL_TIM_Base_MspInit+0x64>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d018      	beq.n	80004b8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000486:	b004      	add	sp, #16
 8000488:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <HAL_TIM_Base_MspInit+0x68>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000492:	619a      	str	r2, [r3, #24]
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	e7f2      	b.n	8000486 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004a4:	69da      	ldr	r2, [r3, #28]
 80004a6:	f042 0201 	orr.w	r2, r2, #1
 80004aa:	61da      	str	r2, [r3, #28]
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	9b02      	ldr	r3, [sp, #8]
 80004b6:	e7e6      	b.n	8000486 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <HAL_TIM_Base_MspInit+0x68>)
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	f042 0202 	orr.w	r2, r2, #2
 80004c0:	61da      	str	r2, [r3, #28]
 80004c2:	69db      	ldr	r3, [r3, #28]
 80004c4:	f003 0302 	and.w	r3, r3, #2
 80004c8:	9303      	str	r3, [sp, #12]
 80004ca:	9b03      	ldr	r3, [sp, #12]
}
 80004cc:	e7db      	b.n	8000486 <HAL_TIM_Base_MspInit+0x16>
 80004ce:	bf00      	nop
 80004d0:	40012c00 	.word	0x40012c00
 80004d4:	40000400 	.word	0x40000400
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80004dc:	b500      	push	{lr}
 80004de:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	2300      	movs	r3, #0
 80004e2:	9304      	str	r3, [sp, #16]
 80004e4:	9305      	str	r3, [sp, #20]
 80004e6:	9306      	str	r3, [sp, #24]
 80004e8:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 80004ea:	6803      	ldr	r3, [r0, #0]
 80004ec:	4a24      	ldr	r2, [pc, #144]	; (8000580 <HAL_TIM_MspPostInit+0xa4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d008      	beq.n	8000504 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 80004f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f6:	d01a      	beq.n	800052e <HAL_TIM_MspPostInit+0x52>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80004f8:	4a22      	ldr	r2, [pc, #136]	; (8000584 <HAL_TIM_MspPostInit+0xa8>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d02c      	beq.n	8000558 <HAL_TIM_MspPostInit+0x7c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80004fe:	b009      	add	sp, #36	; 0x24
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <HAL_TIM_MspPostInit+0xac>)
 8000506:	699a      	ldr	r2, [r3, #24]
 8000508:	f042 0204 	orr.w	r2, r2, #4
 800050c:	619a      	str	r2, [r3, #24]
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin|Servo3_Pin;
 8000518:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800051c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	2302      	movs	r3, #2
 8000520:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	a904      	add	r1, sp, #16
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <HAL_TIM_MspPostInit+0xb0>)
 8000528:	f000 fbea 	bl	8000d00 <HAL_GPIO_Init>
 800052c:	e7e7      	b.n	80004fe <HAL_TIM_MspPostInit+0x22>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	f042 0204 	orr.w	r2, r2, #4
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Servo4_Pin|Servo5_Pin|Servo6_Pin|Servo7_Pin;
 8000544:	230f      	movs	r3, #15
 8000546:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	a904      	add	r1, sp, #16
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <HAL_TIM_MspPostInit+0xb0>)
 8000552:	f000 fbd5 	bl	8000d00 <HAL_GPIO_Init>
 8000556:	e7d2      	b.n	80004fe <HAL_TIM_MspPostInit+0x22>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_TIM_MspPostInit+0xac>)
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	f042 0204 	orr.w	r2, r2, #4
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	9303      	str	r3, [sp, #12]
 800056a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = Servo8_Pin;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(Servo8_GPIO_Port, &GPIO_InitStruct);
 8000576:	a904      	add	r1, sp, #16
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <HAL_TIM_MspPostInit+0xb0>)
 800057a:	f000 fbc1 	bl	8000d00 <HAL_GPIO_Init>
}
 800057e:	e7be      	b.n	80004fe <HAL_TIM_MspPostInit+0x22>
 8000580:	40012c00 	.word	0x40012c00
 8000584:	40000400 	.word	0x40000400
 8000588:	40021000 	.word	0x40021000
 800058c:	40010800 	.word	0x40010800

08000590 <MX_TIM1_Init>:
{
 8000590:	b510      	push	{r4, lr}
 8000592:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000594:	2400      	movs	r4, #0
 8000596:	9412      	str	r4, [sp, #72]	; 0x48
 8000598:	9413      	str	r4, [sp, #76]	; 0x4c
 800059a:	9414      	str	r4, [sp, #80]	; 0x50
 800059c:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059e:	9410      	str	r4, [sp, #64]	; 0x40
 80005a0:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a2:	9409      	str	r4, [sp, #36]	; 0x24
 80005a4:	940a      	str	r4, [sp, #40]	; 0x28
 80005a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80005a8:	940c      	str	r4, [sp, #48]	; 0x30
 80005aa:	940d      	str	r4, [sp, #52]	; 0x34
 80005ac:	940e      	str	r4, [sp, #56]	; 0x38
 80005ae:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005b0:	2220      	movs	r2, #32
 80005b2:	4621      	mov	r1, r4
 80005b4:	a801      	add	r0, sp, #4
 80005b6:	f004 fd47 	bl	8005048 <memset>
  htim1.Instance = TIM1;
 80005ba:	4837      	ldr	r0, [pc, #220]	; (8000698 <MX_TIM1_Init+0x108>)
 80005bc:	4b37      	ldr	r3, [pc, #220]	; (800069c <MX_TIM1_Init+0x10c>)
 80005be:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 529-1;
 80005c0:	f44f 7304 	mov.w	r3, #528	; 0x210
 80005c4:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 3400-1;
 80005c8:	f640 5347 	movw	r3, #3399	; 0xd47
 80005cc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005d4:	f002 f960 	bl	8002898 <HAL_TIM_Base_Init>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d144      	bne.n	8000666 <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005e2:	a912      	add	r1, sp, #72	; 0x48
 80005e4:	482c      	ldr	r0, [pc, #176]	; (8000698 <MX_TIM1_Init+0x108>)
 80005e6:	f002 fa57 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d13e      	bne.n	800066c <MX_TIM1_Init+0xdc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ee:	482a      	ldr	r0, [pc, #168]	; (8000698 <MX_TIM1_Init+0x108>)
 80005f0:	f002 f97e 	bl	80028f0 <HAL_TIM_PWM_Init>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d13c      	bne.n	8000672 <MX_TIM1_Init+0xe2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005fe:	a910      	add	r1, sp, #64	; 0x40
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <MX_TIM1_Init+0x108>)
 8000602:	f002 fbb3 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	2800      	cmp	r0, #0
 8000608:	d136      	bne.n	8000678 <MX_TIM1_Init+0xe8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060a:	2360      	movs	r3, #96	; 0x60
 800060c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800060e:	2200      	movs	r2, #0
 8000610:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000612:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000614:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000616:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000618:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800061a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800061c:	a909      	add	r1, sp, #36	; 0x24
 800061e:	481e      	ldr	r0, [pc, #120]	; (8000698 <MX_TIM1_Init+0x108>)
 8000620:	f002 f9c0 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000624:	bb58      	cbnz	r0, 800067e <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000626:	2204      	movs	r2, #4
 8000628:	a909      	add	r1, sp, #36	; 0x24
 800062a:	481b      	ldr	r0, [pc, #108]	; (8000698 <MX_TIM1_Init+0x108>)
 800062c:	f002 f9ba 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000630:	bb40      	cbnz	r0, 8000684 <MX_TIM1_Init+0xf4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000632:	2208      	movs	r2, #8
 8000634:	a909      	add	r1, sp, #36	; 0x24
 8000636:	4818      	ldr	r0, [pc, #96]	; (8000698 <MX_TIM1_Init+0x108>)
 8000638:	f002 f9b4 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 800063c:	bb28      	cbnz	r0, 800068a <MX_TIM1_Init+0xfa>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000642:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000644:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000646:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000648:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800064a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800064e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000650:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000652:	a901      	add	r1, sp, #4
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <MX_TIM1_Init+0x108>)
 8000656:	f002 fbbd 	bl	8002dd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800065a:	b9c8      	cbnz	r0, 8000690 <MX_TIM1_Init+0x100>
  HAL_TIM_MspPostInit(&htim1);
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <MX_TIM1_Init+0x108>)
 800065e:	f7ff ff3d 	bl	80004dc <HAL_TIM_MspPostInit>
}
 8000662:	b016      	add	sp, #88	; 0x58
 8000664:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000666:	f7ff fe94 	bl	8000392 <Error_Handler>
 800066a:	e7b7      	b.n	80005dc <MX_TIM1_Init+0x4c>
    Error_Handler();
 800066c:	f7ff fe91 	bl	8000392 <Error_Handler>
 8000670:	e7bd      	b.n	80005ee <MX_TIM1_Init+0x5e>
    Error_Handler();
 8000672:	f7ff fe8e 	bl	8000392 <Error_Handler>
 8000676:	e7bf      	b.n	80005f8 <MX_TIM1_Init+0x68>
    Error_Handler();
 8000678:	f7ff fe8b 	bl	8000392 <Error_Handler>
 800067c:	e7c5      	b.n	800060a <MX_TIM1_Init+0x7a>
    Error_Handler();
 800067e:	f7ff fe88 	bl	8000392 <Error_Handler>
 8000682:	e7d0      	b.n	8000626 <MX_TIM1_Init+0x96>
    Error_Handler();
 8000684:	f7ff fe85 	bl	8000392 <Error_Handler>
 8000688:	e7d3      	b.n	8000632 <MX_TIM1_Init+0xa2>
    Error_Handler();
 800068a:	f7ff fe82 	bl	8000392 <Error_Handler>
 800068e:	e7d6      	b.n	800063e <MX_TIM1_Init+0xae>
    Error_Handler();
 8000690:	f7ff fe7f 	bl	8000392 <Error_Handler>
 8000694:	e7e2      	b.n	800065c <MX_TIM1_Init+0xcc>
 8000696:	bf00      	nop
 8000698:	20000210 	.word	0x20000210
 800069c:	40012c00 	.word	0x40012c00

080006a0 <MX_TIM2_Init>:
{
 80006a0:	b500      	push	{lr}
 80006a2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	930a      	str	r3, [sp, #40]	; 0x28
 80006a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80006aa:	930c      	str	r3, [sp, #48]	; 0x30
 80006ac:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ae:	9308      	str	r3, [sp, #32]
 80006b0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	9302      	str	r3, [sp, #8]
 80006b6:	9303      	str	r3, [sp, #12]
 80006b8:	9304      	str	r3, [sp, #16]
 80006ba:	9305      	str	r3, [sp, #20]
 80006bc:	9306      	str	r3, [sp, #24]
 80006be:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80006c0:	4831      	ldr	r0, [pc, #196]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 529-1;
 80006c8:	f44f 7204 	mov.w	r2, #528	; 0x210
 80006cc:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 3400-1;
 80006d0:	f640 5247 	movw	r2, #3399	; 0xd47
 80006d4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006da:	f002 f8dd 	bl	8002898 <HAL_TIM_Base_Init>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d139      	bne.n	8000756 <MX_TIM2_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e8:	a90a      	add	r1, sp, #40	; 0x28
 80006ea:	4827      	ldr	r0, [pc, #156]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006ec:	f002 f9d4 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d133      	bne.n	800075c <MX_TIM2_Init+0xbc>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006f4:	4824      	ldr	r0, [pc, #144]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006f6:	f002 f8fb 	bl	80028f0 <HAL_TIM_PWM_Init>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d131      	bne.n	8000762 <MX_TIM2_Init+0xc2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000704:	a908      	add	r1, sp, #32
 8000706:	4820      	ldr	r0, [pc, #128]	; (8000788 <MX_TIM2_Init+0xe8>)
 8000708:	f002 fb30 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	bb60      	cbnz	r0, 8000768 <MX_TIM2_Init+0xc8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070e:	2360      	movs	r3, #96	; 0x60
 8000710:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000712:	2200      	movs	r2, #0
 8000714:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000716:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000718:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071a:	a901      	add	r1, sp, #4
 800071c:	481a      	ldr	r0, [pc, #104]	; (8000788 <MX_TIM2_Init+0xe8>)
 800071e:	f002 f941 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000722:	bb20      	cbnz	r0, 800076e <MX_TIM2_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000724:	2204      	movs	r2, #4
 8000726:	eb0d 0102 	add.w	r1, sp, r2
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <MX_TIM2_Init+0xe8>)
 800072c:	f002 f93a 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000730:	bb00      	cbnz	r0, 8000774 <MX_TIM2_Init+0xd4>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000732:	2208      	movs	r2, #8
 8000734:	a901      	add	r1, sp, #4
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <MX_TIM2_Init+0xe8>)
 8000738:	f002 f934 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 800073c:	b9e8      	cbnz	r0, 800077a <MX_TIM2_Init+0xda>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800073e:	220c      	movs	r2, #12
 8000740:	a901      	add	r1, sp, #4
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_TIM2_Init+0xe8>)
 8000744:	f002 f92e 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000748:	b9d0      	cbnz	r0, 8000780 <MX_TIM2_Init+0xe0>
  HAL_TIM_MspPostInit(&htim2);
 800074a:	480f      	ldr	r0, [pc, #60]	; (8000788 <MX_TIM2_Init+0xe8>)
 800074c:	f7ff fec6 	bl	80004dc <HAL_TIM_MspPostInit>
}
 8000750:	b00f      	add	sp, #60	; 0x3c
 8000752:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000756:	f7ff fe1c 	bl	8000392 <Error_Handler>
 800075a:	e7c2      	b.n	80006e2 <MX_TIM2_Init+0x42>
    Error_Handler();
 800075c:	f7ff fe19 	bl	8000392 <Error_Handler>
 8000760:	e7c8      	b.n	80006f4 <MX_TIM2_Init+0x54>
    Error_Handler();
 8000762:	f7ff fe16 	bl	8000392 <Error_Handler>
 8000766:	e7ca      	b.n	80006fe <MX_TIM2_Init+0x5e>
    Error_Handler();
 8000768:	f7ff fe13 	bl	8000392 <Error_Handler>
 800076c:	e7cf      	b.n	800070e <MX_TIM2_Init+0x6e>
    Error_Handler();
 800076e:	f7ff fe10 	bl	8000392 <Error_Handler>
 8000772:	e7d7      	b.n	8000724 <MX_TIM2_Init+0x84>
    Error_Handler();
 8000774:	f7ff fe0d 	bl	8000392 <Error_Handler>
 8000778:	e7db      	b.n	8000732 <MX_TIM2_Init+0x92>
    Error_Handler();
 800077a:	f7ff fe0a 	bl	8000392 <Error_Handler>
 800077e:	e7de      	b.n	800073e <MX_TIM2_Init+0x9e>
    Error_Handler();
 8000780:	f7ff fe07 	bl	8000392 <Error_Handler>
 8000784:	e7e1      	b.n	800074a <MX_TIM2_Init+0xaa>
 8000786:	bf00      	nop
 8000788:	20000258 	.word	0x20000258

0800078c <MX_TIM3_Init>:
{
 800078c:	b500      	push	{lr}
 800078e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000790:	2300      	movs	r3, #0
 8000792:	930a      	str	r3, [sp, #40]	; 0x28
 8000794:	930b      	str	r3, [sp, #44]	; 0x2c
 8000796:	930c      	str	r3, [sp, #48]	; 0x30
 8000798:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	9308      	str	r3, [sp, #32]
 800079c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	9303      	str	r3, [sp, #12]
 80007a4:	9304      	str	r3, [sp, #16]
 80007a6:	9305      	str	r3, [sp, #20]
 80007a8:	9306      	str	r3, [sp, #24]
 80007aa:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80007ac:	4821      	ldr	r0, [pc, #132]	; (8000834 <MX_TIM3_Init+0xa8>)
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_TIM3_Init+0xac>)
 80007b0:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 529-1;
 80007b2:	f44f 7204 	mov.w	r2, #528	; 0x210
 80007b6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3400-1;
 80007ba:	f640 5247 	movw	r2, #3399	; 0xd47
 80007be:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007c4:	f002 f868 	bl	8002898 <HAL_TIM_Base_Init>
 80007c8:	bb20      	cbnz	r0, 8000814 <MX_TIM3_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007d0:	a90a      	add	r1, sp, #40	; 0x28
 80007d2:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_TIM3_Init+0xa8>)
 80007d4:	f002 f960 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 80007d8:	b9f8      	cbnz	r0, 800081a <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007da:	4816      	ldr	r0, [pc, #88]	; (8000834 <MX_TIM3_Init+0xa8>)
 80007dc:	f002 f888 	bl	80028f0 <HAL_TIM_PWM_Init>
 80007e0:	b9f0      	cbnz	r0, 8000820 <MX_TIM3_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e8:	a908      	add	r1, sp, #32
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_TIM3_Init+0xa8>)
 80007ec:	f002 fabe 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	b9c8      	cbnz	r0, 8000826 <MX_TIM3_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f2:	2360      	movs	r3, #96	; 0x60
 80007f4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80007f6:	2200      	movs	r2, #0
 80007f8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fa:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fc:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fe:	a901      	add	r1, sp, #4
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_TIM3_Init+0xa8>)
 8000802:	f002 f8cf 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000806:	b988      	cbnz	r0, 800082c <MX_TIM3_Init+0xa0>
  HAL_TIM_MspPostInit(&htim3);
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <MX_TIM3_Init+0xa8>)
 800080a:	f7ff fe67 	bl	80004dc <HAL_TIM_MspPostInit>
}
 800080e:	b00f      	add	sp, #60	; 0x3c
 8000810:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000814:	f7ff fdbd 	bl	8000392 <Error_Handler>
 8000818:	e7d7      	b.n	80007ca <MX_TIM3_Init+0x3e>
    Error_Handler();
 800081a:	f7ff fdba 	bl	8000392 <Error_Handler>
 800081e:	e7dc      	b.n	80007da <MX_TIM3_Init+0x4e>
    Error_Handler();
 8000820:	f7ff fdb7 	bl	8000392 <Error_Handler>
 8000824:	e7dd      	b.n	80007e2 <MX_TIM3_Init+0x56>
    Error_Handler();
 8000826:	f7ff fdb4 	bl	8000392 <Error_Handler>
 800082a:	e7e2      	b.n	80007f2 <MX_TIM3_Init+0x66>
    Error_Handler();
 800082c:	f7ff fdb1 	bl	8000392 <Error_Handler>
 8000830:	e7ea      	b.n	8000808 <MX_TIM3_Init+0x7c>
 8000832:	bf00      	nop
 8000834:	200002a0 	.word	0x200002a0
 8000838:	40000400 	.word	0x40000400

0800083c <__tcf_0>:
        0x01: communication test
        0x02: start or stop motor
        */

        //connection establish request
        static const std::vector<uint8_t> HelloUSBServo{(uint8_t)0x10,'H','e','l','l','o','U','S','B','S','e','r','v','o'};
 800083c:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__tcf_0+0x14>)
 8000840:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8000842:	b118      	cbz	r0, 800084c <__tcf_0+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000844:	6899      	ldr	r1, [r3, #8]
 8000846:	1a09      	subs	r1, r1, r0
 8000848:	f004 fa9a 	bl	8004d80 <_ZdlPvj>
 800084c:	bd08      	pop	{r3, pc}
 800084e:	bf00      	nop
 8000850:	20000350 	.word	0x20000350

08000854 <__tcf_1>:
        if(buf.size() == HelloUSBServo.size() && std::equal(buf.begin(),buf.end(),HelloUSBServo.begin()))
        {
            static const std::vector<uint8_t> HelloThisIsUSBServo {(uint8_t)0x10,'H','e','l','l','o','T','h','i','s','I','s','U','S','B','S','e','r','v','o'};
 8000854:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__tcf_1+0x14>)
 8000858:	6818      	ldr	r0, [r3, #0]
	if (__p)
 800085a:	b118      	cbz	r0, 8000864 <__tcf_1+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800085c:	6899      	ldr	r1, [r3, #8]
 800085e:	1a09      	subs	r1, r1, r0
 8000860:	f004 fa8e 	bl	8004d80 <_ZdlPvj>
 8000864:	bd08      	pop	{r3, pc}
 8000866:	bf00      	nop
 8000868:	2000035c 	.word	0x2000035c

0800086c <_ZN13usb_interface7receiveESt6vectorIhSaIhEE>:
    {
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	b093      	sub	sp, #76	; 0x4c
 8000870:	4604      	mov	r4, r0
        static const std::vector<uint8_t> HelloUSBServo{(uint8_t)0x10,'H','e','l','l','o','U','S','B','S','e','r','v','o'};
 8000872:	4b8e      	ldr	r3, [pc, #568]	; (8000aac <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x240>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f3bf 8f5b 	dmb	ish
 800087a:	f013 0f01 	tst.w	r3, #1
 800087e:	d029      	beq.n	80008d4 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x68>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000880:	6825      	ldr	r5, [r4, #0]
 8000882:	6864      	ldr	r4, [r4, #4]
 8000884:	1b64      	subs	r4, r4, r5
 8000886:	4b8a      	ldr	r3, [pc, #552]	; (8000ab0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x244>)
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	1a5b      	subs	r3, r3, r1
        if(buf.size() == HelloUSBServo.size() && std::equal(buf.begin(),buf.end(),HelloUSBServo.begin()))
 800088e:	429c      	cmp	r4, r3
 8000890:	d046      	beq.n	8000920 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0xb4>
            usb_interface::send(HelloThisIsUSBServo);
            return;
        }

        if(buf.size() != 2)return;
 8000892:	2c02      	cmp	r4, #2
 8000894:	d11c      	bne.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
        switch (buf[0]>>4)
 8000896:	782b      	ldrb	r3, [r5, #0]
 8000898:	091a      	lsrs	r2, r3, #4
 800089a:	f000 80a5 	beq.w	80009e8 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x17c>
 800089e:	2a02      	cmp	r2, #2
 80008a0:	f000 80e7 	beq.w	8000a72 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x206>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80008a4:	2300      	movs	r3, #0
 80008a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80008a8:	9310      	str	r3, [sp, #64]	; 0x40
 80008aa:	9311      	str	r3, [sp, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80008ac:	2002      	movs	r0, #2
 80008ae:	f004 fa78 	bl	8004da2 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80008b2:	900f      	str	r0, [sp, #60]	; 0x3c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80008b4:	1c83      	adds	r3, r0, #2
 80008b6:	9311      	str	r3, [sp, #68]	; 0x44
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80008b8:	2230      	movs	r2, #48	; 0x30
 80008ba:	8002      	strh	r2, [r0, #0]
	  this->_M_impl._M_finish =
 80008bc:	9310      	str	r3, [sp, #64]	; 0x40
                }
            }
            break;
        default:
            {
                usb_interface::send({0x30,0x00});
 80008be:	a80f      	add	r0, sp, #60	; 0x3c
 80008c0:	f7ff fcac 	bl	800021c <_ZN13usb_interface4sendESt6vectorIhSaIhEE>
	_M_deallocate(_M_impl._M_start,
 80008c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
	if (__p)
 80008c6:	b118      	cbz	r0, 80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
	::operator delete(__p
 80008c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80008ca:	1a09      	subs	r1, r1, r0
 80008cc:	f004 fa58 	bl	8004d80 <_ZdlPvj>
            break;
        }

        
        
    }
 80008d0:	b013      	add	sp, #76	; 0x4c
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        static const std::vector<uint8_t> HelloUSBServo{(uint8_t)0x10,'H','e','l','l','o','U','S','B','S','e','r','v','o'};
 80008d4:	4875      	ldr	r0, [pc, #468]	; (8000aac <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x240>)
 80008d6:	f004 fa55 	bl	8004d84 <__cxa_guard_acquire>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d0d0      	beq.n	8000880 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x14>
 80008de:	4b75      	ldr	r3, [pc, #468]	; (8000ab4 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x248>)
 80008e0:	466d      	mov	r5, sp
 80008e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e4:	c507      	stmia	r5!, {r0, r1, r2}
 80008e6:	802b      	strh	r3, [r5, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80008e8:	4d71      	ldr	r5, [pc, #452]	; (8000ab0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x244>)
 80008ea:	2300      	movs	r3, #0
 80008ec:	602b      	str	r3, [r5, #0]
 80008ee:	606b      	str	r3, [r5, #4]
 80008f0:	60ab      	str	r3, [r5, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80008f2:	200e      	movs	r0, #14
 80008f4:	f004 fa55 	bl	8004da2 <_Znwj>
 80008f8:	4603      	mov	r3, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80008fa:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80008fc:	f100 070e 	add.w	r7, r0, #14
 8000900:	60af      	str	r7, [r5, #8]
 8000902:	466e      	mov	r6, sp
 8000904:	ce07      	ldmia	r6!, {r0, r1, r2}
 8000906:	6018      	str	r0, [r3, #0]
 8000908:	6059      	str	r1, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	8832      	ldrh	r2, [r6, #0]
 800090e:	819a      	strh	r2, [r3, #12]
	  this->_M_impl._M_finish =
 8000910:	606f      	str	r7, [r5, #4]
 8000912:	4869      	ldr	r0, [pc, #420]	; (8000ab8 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x24c>)
 8000914:	f004 fb1f 	bl	8004f56 <atexit>
 8000918:	4864      	ldr	r0, [pc, #400]	; (8000aac <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x240>)
 800091a:	f004 fa3f 	bl	8004d9c <__cxa_guard_release>
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800091e:	e7af      	b.n	8000880 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x14>
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static bool
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
	{
	  if (const size_t __len = (__last1 - __first1))
 8000920:	b12c      	cbz	r4, 800092e <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0xc2>
	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 8000922:	4622      	mov	r2, r4
 8000924:	4628      	mov	r0, r5
 8000926:	f004 fb57 	bl	8004fd8 <memcmp>
        if(buf.size() == HelloUSBServo.size() && std::equal(buf.begin(),buf.end(),HelloUSBServo.begin()))
 800092a:	2800      	cmp	r0, #0
 800092c:	d1b1      	bne.n	8000892 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x26>
            static const std::vector<uint8_t> HelloThisIsUSBServo {(uint8_t)0x10,'H','e','l','l','o','T','h','i','s','I','s','U','S','B','S','e','r','v','o'};
 800092e:	4b63      	ldr	r3, [pc, #396]	; (8000abc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x250>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f3bf 8f5b 	dmb	ish
 8000936:	f013 0f01 	tst.w	r3, #1
 800093a:	d024      	beq.n	8000986 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x11a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800093c:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x254>)
 800093e:	685d      	ldr	r5, [r3, #4]
 8000940:	681a      	ldr	r2, [r3, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000942:	2300      	movs	r3, #0
 8000944:	9309      	str	r3, [sp, #36]	; 0x24
 8000946:	930a      	str	r3, [sp, #40]	; 0x28
 8000948:	930b      	str	r3, [sp, #44]	; 0x2c
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800094a:	1aad      	subs	r5, r5, r2
 800094c:	d045      	beq.n	80009da <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x16e>
	if (__n > this->_M_max_size())
 800094e:	429d      	cmp	r5, r3
 8000950:	db41      	blt.n	80009d6 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x16a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000952:	4628      	mov	r0, r5
 8000954:	f004 fa25 	bl	8004da2 <_Znwj>
 8000958:	4604      	mov	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 800095a:	9409      	str	r4, [sp, #36]	; 0x24
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800095c:	940a      	str	r4, [sp, #40]	; 0x28
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800095e:	4425      	add	r5, r4
 8000960:	950b      	str	r5, [sp, #44]	; 0x2c
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x254>)
 8000964:	6819      	ldr	r1, [r3, #0]
	  const ptrdiff_t _Num = __last - __first;
 8000966:	685d      	ldr	r5, [r3, #4]
	  if (_Num)
 8000968:	1a6d      	subs	r5, r5, r1
 800096a:	d138      	bne.n	80009de <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x172>
	  return __result + _Num;
 800096c:	442c      	add	r4, r5
	this->_M_impl._M_finish =
 800096e:	940a      	str	r4, [sp, #40]	; 0x28
            usb_interface::send(HelloThisIsUSBServo);
 8000970:	a809      	add	r0, sp, #36	; 0x24
 8000972:	f7ff fc53 	bl	800021c <_ZN13usb_interface4sendESt6vectorIhSaIhEE>
	_M_deallocate(_M_impl._M_start,
 8000976:	9809      	ldr	r0, [sp, #36]	; 0x24
	if (__p)
 8000978:	2800      	cmp	r0, #0
 800097a:	d0a9      	beq.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
	::operator delete(__p
 800097c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800097e:	1a09      	subs	r1, r1, r0
 8000980:	f004 f9fe 	bl	8004d80 <_ZdlPvj>
            return;
 8000984:	e7a4      	b.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
            static const std::vector<uint8_t> HelloThisIsUSBServo {(uint8_t)0x10,'H','e','l','l','o','T','h','i','s','I','s','U','S','B','S','e','r','v','o'};
 8000986:	484d      	ldr	r0, [pc, #308]	; (8000abc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x250>)
 8000988:	f004 f9fc 	bl	8004d84 <__cxa_guard_acquire>
 800098c:	2800      	cmp	r0, #0
 800098e:	d0d5      	beq.n	800093c <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0xd0>
 8000990:	ac04      	add	r4, sp, #16
 8000992:	4d4c      	ldr	r5, [pc, #304]	; (8000ac4 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x258>)
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	6023      	str	r3, [r4, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800099c:	4e48      	ldr	r6, [pc, #288]	; (8000ac0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x254>)
 800099e:	2300      	movs	r3, #0
 80009a0:	6033      	str	r3, [r6, #0]
 80009a2:	6073      	str	r3, [r6, #4]
 80009a4:	60b3      	str	r3, [r6, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80009a6:	2014      	movs	r0, #20
 80009a8:	f004 f9fb 	bl	8004da2 <_Znwj>
 80009ac:	4604      	mov	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80009ae:	6030      	str	r0, [r6, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80009b0:	f100 0714 	add.w	r7, r0, #20
 80009b4:	60b7      	str	r7, [r6, #8]
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80009b6:	ad04      	add	r5, sp, #16
 80009b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ba:	6020      	str	r0, [r4, #0]
 80009bc:	6061      	str	r1, [r4, #4]
 80009be:	60a2      	str	r2, [r4, #8]
 80009c0:	60e3      	str	r3, [r4, #12]
 80009c2:	6828      	ldr	r0, [r5, #0]
 80009c4:	6120      	str	r0, [r4, #16]
	  this->_M_impl._M_finish =
 80009c6:	6077      	str	r7, [r6, #4]
 80009c8:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x25c>)
 80009ca:	f004 fac4 	bl	8004f56 <atexit>
 80009ce:	483b      	ldr	r0, [pc, #236]	; (8000abc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x250>)
 80009d0:	f004 f9e4 	bl	8004d9c <__cxa_guard_release>
 80009d4:	e7b2      	b.n	800093c <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0xd0>
	  std::__throw_bad_alloc();
 80009d6:	f004 f9f5 	bl	8004dc4 <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009da:	2400      	movs	r4, #0
 80009dc:	e7bd      	b.n	800095a <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0xee>
 80009de:	462a      	mov	r2, r5
 80009e0:	4620      	mov	r0, r4
 80009e2:	f004 fb17 	bl	8005014 <memmove>
 80009e6:	e7c1      	b.n	800096c <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x100>
                const uint8_t servo_id = 0x0F & buf[0];
 80009e8:	f003 010f 	and.w	r1, r3, #15
                if(device_abstraction::servos.size() > servo_id && servo_id >= 0){
 80009ec:	f013 0f08 	tst.w	r3, #8
 80009f0:	d126      	bne.n	8000a40 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x1d4>
      constexpr const_reference
      at(size_type __n) const
      {
	// Result of conditional expression must be an lvalue so use
	// boolean ? lvalue : (throw-expr, lvalue)
	return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
 80009f2:	2907      	cmp	r1, #7
 80009f4:	d820      	bhi.n	8000a38 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x1cc>
                    device_abstraction::servos.at(servo_id).set_angle(angle);
 80009f6:	786b      	ldrb	r3, [r5, #1]
        __HAL_TIM_SET_COMPARE(&htim, channel, angle+85);
 80009f8:	4a34      	ldr	r2, [pc, #208]	; (8000acc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x260>)
 80009fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80009fe:	6852      	ldr	r2, [r2, #4]
 8000a00:	b932      	cbnz	r2, 8000a10 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x1a4>
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x260>)
 8000a04:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	3355      	adds	r3, #85	; 0x55
 8000a0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000a0e:	e75f      	b.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
 8000a10:	2a04      	cmp	r2, #4
 8000a12:	d00a      	beq.n	8000a2a <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x1be>
 8000a14:	2a08      	cmp	r2, #8
 8000a16:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x260>)
 8000a18:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	f103 0355 	add.w	r3, r3, #85	; 0x55
 8000a22:	bf0c      	ite	eq
 8000a24:	63d3      	streq	r3, [r2, #60]	; 0x3c
 8000a26:	6413      	strne	r3, [r2, #64]	; 0x40
 8000a28:	e752      	b.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
 8000a2a:	4a28      	ldr	r2, [pc, #160]	; (8000acc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x260>)
 8000a2c:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	3355      	adds	r3, #85	; 0x55
 8000a34:	6393      	str	r3, [r2, #56]	; 0x38
 8000a36:	e74b      	b.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
	  : (std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4825      	ldr	r0, [pc, #148]	; (8000ad0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x264>)
 8000a3c:	f004 f9cb 	bl	8004dd6 <_ZSt24__throw_out_of_range_fmtPKcz>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000a40:	2300      	movs	r3, #0
 8000a42:	930c      	str	r3, [sp, #48]	; 0x30
 8000a44:	930d      	str	r3, [sp, #52]	; 0x34
 8000a46:	930e      	str	r3, [sp, #56]	; 0x38
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f004 f9aa 	bl	8004da2 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000a4e:	900c      	str	r0, [sp, #48]	; 0x30
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000a50:	1c83      	adds	r3, r0, #2
 8000a52:	930e      	str	r3, [sp, #56]	; 0x38
 8000a54:	2220      	movs	r2, #32
 8000a56:	8002      	strh	r2, [r0, #0]
	  this->_M_impl._M_finish =
 8000a58:	930d      	str	r3, [sp, #52]	; 0x34
                    usb_interface::send({0x20,0x00});
 8000a5a:	a80c      	add	r0, sp, #48	; 0x30
 8000a5c:	f7ff fbde 	bl	800021c <_ZN13usb_interface4sendESt6vectorIhSaIhEE>
	_M_deallocate(_M_impl._M_start,
 8000a60:	980c      	ldr	r0, [sp, #48]	; 0x30
	if (__p)
 8000a62:	2800      	cmp	r0, #0
 8000a64:	f43f af34 	beq.w	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
	::operator delete(__p
 8000a68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000a6a:	1a09      	subs	r1, r1, r0
 8000a6c:	f004 f988 	bl	8004d80 <_ZdlPvj>
                    return;
 8000a70:	e72e      	b.n	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
                const uint8_t active_motor = buf[1];
 8000a72:	786e      	ldrb	r6, [r5, #1]
                for(int i=0;i<8;i++){
 8000a74:	2400      	movs	r4, #0
        HAL_TIM_PWM_Stop(&htim, channel);
 8000a76:	4d15      	ldr	r5, [pc, #84]	; (8000acc <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x260>)
 8000a78:	e00a      	b.n	8000a90 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x224>
 8000a7a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8000a7e:	6859      	ldr	r1, [r3, #4]
 8000a80:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 8000a84:	f002 f930 	bl	8002ce8 <HAL_TIM_PWM_Stop>
                for(int i=0;i<8;i++){
 8000a88:	3401      	adds	r4, #1
 8000a8a:	2c08      	cmp	r4, #8
 8000a8c:	f43f af20 	beq.w	80008d0 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x64>
                    if(active_motor & (1<<i)){
 8000a90:	fa46 f304 	asr.w	r3, r6, r4
 8000a94:	f013 0f01 	tst.w	r3, #1
 8000a98:	d0ef      	beq.n	8000a7a <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x20e>
        HAL_TIM_PWM_Start(&htim, channel);
 8000a9a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8000a9e:	6859      	ldr	r1, [r3, #4]
 8000aa0:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 8000aa4:	f002 f8bc 	bl	8002c20 <HAL_TIM_PWM_Start>
    }
 8000aa8:	e7ee      	b.n	8000a88 <_ZN13usb_interface7receiveESt6vectorIhSaIhEE+0x21c>
 8000aaa:	bf00      	nop
 8000aac:	200002e8 	.word	0x200002e8
 8000ab0:	20000350 	.word	0x20000350
 8000ab4:	080053b8 	.word	0x080053b8
 8000ab8:	0800083d 	.word	0x0800083d
 8000abc:	200002ec 	.word	0x200002ec
 8000ac0:	2000035c 	.word	0x2000035c
 8000ac4:	080053c8 	.word	0x080053c8
 8000ac8:	08000855 	.word	0x08000855
 8000acc:	20000310 	.word	0x20000310
 8000ad0:	08005420 	.word	0x08005420

08000ad4 <_GLOBAL__sub_I__ZN18device_abstraction4ledsE>:
            {
                led.update();
            }
        }
    }
} // namespace main_interface
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Servo(TIM_HandleTypeDef& htim,uint32_t channel):htim(htim),channel(channel){};
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <_GLOBAL__sub_I__ZN18device_abstraction4ledsE+0x60>)
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <_GLOBAL__sub_I__ZN18device_abstraction4ledsE+0x64>)
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	2500      	movs	r5, #0
 8000ade:	605d      	str	r5, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	2004      	movs	r0, #4
 8000ae4:	60d8      	str	r0, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	2108      	movs	r1, #8
 8000aea:	6159      	str	r1, [r3, #20]
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <_GLOBAL__sub_I__ZN18device_abstraction4ledsE+0x68>)
 8000aee:	619a      	str	r2, [r3, #24]
 8000af0:	61dd      	str	r5, [r3, #28]
 8000af2:	621a      	str	r2, [r3, #32]
 8000af4:	6258      	str	r0, [r3, #36]	; 0x24
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
 8000af8:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
 8000afc:	220c      	movs	r2, #12
 8000afe:	635a      	str	r2, [r3, #52]	; 0x34
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <_GLOBAL__sub_I__ZN18device_abstraction4ledsE+0x6c>)
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38
 8000b04:	63dd      	str	r5, [r3, #60]	; 0x3c
    Led(GPIO_TypeDef* port, uint16_t pin,uint32_t timeout = 100):port(port),pin(pin),timeout(timeout)
 8000b06:	4c0f      	ldr	r4, [pc, #60]	; (8000b44 <_GLOBAL__sub_I__ZN18device_abstraction4ledsE+0x70>)
 8000b08:	4e0f      	ldr	r6, [pc, #60]	; (8000b48 <_GLOBAL__sub_I__ZN18device_abstraction4ledsE+0x74>)
 8000b0a:	6026      	str	r6, [r4, #0]
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	80a1      	strh	r1, [r4, #4]
 8000b10:	60a5      	str	r5, [r4, #8]
 8000b12:	2764      	movs	r7, #100	; 0x64
 8000b14:	60e7      	str	r7, [r4, #12]
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000b16:	462a      	mov	r2, r5
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f000 fa2b 	bl	8000f74 <HAL_GPIO_WritePin>
    Led(GPIO_TypeDef* port, uint16_t pin,uint32_t timeout = 100):port(port),pin(pin),timeout(timeout)
 8000b1e:	6126      	str	r6, [r4, #16]
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	82a1      	strh	r1, [r4, #20]
 8000b24:	61a5      	str	r5, [r4, #24]
 8000b26:	61e7      	str	r7, [r4, #28]
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000b28:	462a      	mov	r2, r5
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	f000 fa22 	bl	8000f74 <HAL_GPIO_WritePin>
} // namespace main_interface
 8000b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000310 	.word	0x20000310
 8000b38:	20000210 	.word	0x20000210
 8000b3c:	20000258 	.word	0x20000258
 8000b40:	200002a0 	.word	0x200002a0
 8000b44:	200002f0 	.word	0x200002f0
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff fc8e 	bl	800046c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b52:	490c      	ldr	r1, [pc, #48]	; (8000b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b68:	4c09      	ldr	r4, [pc, #36]	; (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f004 f9fb 	bl	8004f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fbf4 	bl	8000366 <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8000b88:	0800551c 	.word	0x0800551c
  ldr r2, =_sbss
 8000b8c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8000b90:	2000162c 	.word	0x2000162c

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b510      	push	{r4, lr}
 8000b9a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_InitTick+0x40>)
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_InitTick+0x44>)
 8000baa:	6810      	ldr	r0, [r2, #0]
 8000bac:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb0:	f000 f892 	bl	8000cd8 <HAL_SYSTICK_Config>
 8000bb4:	b968      	cbnz	r0, 8000bd2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	2c0f      	cmp	r4, #15
 8000bb8:	d901      	bls.n	8000bbe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	e00a      	b.n	8000bd4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc6:	f000 f843 	bl	8000c50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_InitTick+0x48>)
 8000bcc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2000      	movs	r0, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bd2:	2001      	movs	r0, #1
}
 8000bd4:	bd10      	pop	{r4, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_Init>:
{
 8000be4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x20>)
 8000be8:	6813      	ldr	r3, [r2, #0]
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f81b 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f7ff ffce 	bl	8000b98 <HAL_InitTick>
  HAL_MspInit();
 8000bfc:	f7ff fbcc 	bl	8000398 <HAL_MspInit>
}
 8000c00:	2000      	movs	r0, #0
 8000c02:	bd08      	pop	{r3, pc}
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x10>)
 8000c0a:	6811      	ldr	r1, [r2, #0]
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_IncTick+0x14>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	440b      	add	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000368 	.word	0x20000368
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c20:	4b01      	ldr	r3, [pc, #4]	; (8000c28 <HAL_GetTick+0x8>)
 8000c22:	6818      	ldr	r0, [r3, #0]
}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000368 	.word	0x20000368

08000c2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c2e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c30:	0203      	lsls	r3, r0, #8
 8000c32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_NVIC_SetPriority+0x64>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5a:	f1c3 0c07 	rsb	ip, r3, #7
 8000c5e:	f1bc 0f04 	cmp.w	ip, #4
 8000c62:	bf28      	it	cs
 8000c64:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c68:	f103 0e04 	add.w	lr, r3, #4
 8000c6c:	f1be 0f06 	cmp.w	lr, #6
 8000c70:	bf8c      	ite	hi
 8000c72:	3b03      	subhi	r3, #3
 8000c74:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c76:	f04f 3eff 	mov.w	lr, #4294967295
 8000c7a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c7e:	ea21 010c 	bic.w	r1, r1, ip
 8000c82:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	fa0e f303 	lsl.w	r3, lr, r3
 8000c88:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	db09      	blt.n	8000ca6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	0109      	lsls	r1, r1, #4
 8000c94:	b2c9      	uxtb	r1, r1
 8000c96:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c9a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c9e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	f000 000f 	and.w	r0, r0, #15
 8000caa:	0109      	lsls	r1, r1, #4
 8000cac:	b2c9      	uxtb	r1, r1
 8000cae:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_NVIC_SetPriority+0x68>)
 8000cb0:	5419      	strb	r1, [r3, r0]
 8000cb2:	e7f6      	b.n	8000ca2 <HAL_NVIC_SetPriority+0x52>
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	e000ed14 	.word	0xe000ed14

08000cbc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	db08      	blt.n	8000cd2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc0:	0942      	lsrs	r2, r0, #5
 8000cc2:	f000 001f 	and.w	r0, r0, #31
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <HAL_NVIC_EnableIRQ+0x18>)
 8000cce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	3801      	subs	r0, #1
 8000cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cde:	d20b      	bcs.n	8000cf8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ce4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <HAL_SYSTICK_Config+0x24>)
 8000ce8:	21f0      	movs	r1, #240	; 0xf0
 8000cea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cee:	2000      	movs	r0, #0
 8000cf0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cf8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d04:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	f8d1 9000 	ldr.w	r9, [r1]
 8000d0a:	f1b9 0f00 	cmp.w	r9, #0
 8000d0e:	f000 811f 	beq.w	8000f50 <HAL_GPIO_Init+0x250>
 8000d12:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000d14:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d16:	4e90      	ldr	r6, [pc, #576]	; (8000f58 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d18:	4c90      	ldr	r4, [pc, #576]	; (8000f5c <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8000d1a:	4d91      	ldr	r5, [pc, #580]	; (8000f60 <HAL_GPIO_Init+0x260>)
 8000d1c:	f8df e244 	ldr.w	lr, [pc, #580]	; 8000f64 <HAL_GPIO_Init+0x264>
 8000d20:	4694      	mov	ip, r2
 8000d22:	e0ba      	b.n	8000e9a <HAL_GPIO_Init+0x19a>
 8000d24:	f04f 0c00 	mov.w	ip, #0
 8000d28:	e025      	b.n	8000d76 <HAL_GPIO_Init+0x76>
 8000d2a:	45a9      	cmp	r9, r5
 8000d2c:	d00f      	beq.n	8000d4e <HAL_GPIO_Init+0x4e>
 8000d2e:	d906      	bls.n	8000d3e <HAL_GPIO_Init+0x3e>
 8000d30:	45f1      	cmp	r9, lr
 8000d32:	d00c      	beq.n	8000d4e <HAL_GPIO_Init+0x4e>
 8000d34:	f8df a230 	ldr.w	sl, [pc, #560]	; 8000f68 <HAL_GPIO_Init+0x268>
 8000d38:	45d1      	cmp	r9, sl
 8000d3a:	d008      	beq.n	8000d4e <HAL_GPIO_Init+0x4e>
 8000d3c:	e01b      	b.n	8000d76 <HAL_GPIO_Init+0x76>
 8000d3e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8000f6c <HAL_GPIO_Init+0x26c>
 8000d42:	45d1      	cmp	r9, sl
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x4e>
 8000d46:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8000d4a:	45d1      	cmp	r9, sl
 8000d4c:	d10f      	bne.n	8000d6e <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8000d52:	f1bc 0f00 	cmp.w	ip, #0
 8000d56:	f000 80ef 	beq.w	8000f38 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d5a:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8000d5e:	bf0c      	ite	eq
 8000d60:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d64:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	f04f 0c08 	mov.w	ip, #8
 8000d6c:	e003      	b.n	8000d76 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8000d6e:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8000d72:	45d1      	cmp	r9, sl
 8000d74:	d0eb      	beq.n	8000d4e <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d76:	2fff      	cmp	r7, #255	; 0xff
 8000d78:	bf99      	ittee	ls
 8000d7a:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d7c:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7e:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d82:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d86:	f8d9 8000 	ldr.w	r8, [r9]
 8000d8a:	f04f 0b0f 	mov.w	fp, #15
 8000d8e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000d92:	ea28 080b 	bic.w	r8, r8, fp
 8000d96:	fa0c fa0a 	lsl.w	sl, ip, sl
 8000d9a:	ea48 080a 	orr.w	r8, r8, sl
 8000d9e:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8000da6:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8000daa:	d06f      	beq.n	8000e8c <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dac:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000db0:	f048 0801 	orr.w	r8, r8, #1
 8000db4:	f8c6 8018 	str.w	r8, [r6, #24]
 8000db8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000dbc:	f008 0801 	and.w	r8, r8, #1
 8000dc0:	f8cd 8004 	str.w	r8, [sp, #4]
 8000dc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc8:	f023 0803 	bic.w	r8, r3, #3
 8000dcc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000dd0:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000dd4:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd8:	f003 0903 	and.w	r9, r3, #3
 8000ddc:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8000de0:	f04f 090f 	mov.w	r9, #15
 8000de4:	fa09 f90b 	lsl.w	r9, r9, fp
 8000de8:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dec:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8000f70 <HAL_GPIO_Init+0x270>
 8000df0:	4548      	cmp	r0, r9
 8000df2:	f000 80a4 	beq.w	8000f3e <HAL_GPIO_Init+0x23e>
 8000df6:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8000dfa:	4548      	cmp	r0, r9
 8000dfc:	f000 80a2 	beq.w	8000f44 <HAL_GPIO_Init+0x244>
 8000e00:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8000e04:	4548      	cmp	r0, r9
 8000e06:	f000 80a0 	beq.w	8000f4a <HAL_GPIO_Init+0x24a>
 8000e0a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8000e0e:	4548      	cmp	r0, r9
 8000e10:	bf0c      	ite	eq
 8000e12:	f04f 0903 	moveq.w	r9, #3
 8000e16:	f04f 0904 	movne.w	r9, #4
 8000e1a:	fa09 f90b 	lsl.w	r9, r9, fp
 8000e1e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8000e22:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e26:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8000e2a:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e2e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8000e32:	bf14      	ite	ne
 8000e34:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e38:	ea28 0807 	biceq.w	r8, r8, r7
 8000e3c:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e40:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8000e44:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e48:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8000e4c:	bf14      	ite	ne
 8000e4e:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e52:	ea28 0807 	biceq.w	r8, r8, r7
 8000e56:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8000e5e:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e62:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000e66:	bf14      	ite	ne
 8000e68:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e6c:	ea28 0807 	biceq.w	r8, r8, r7
 8000e70:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8000e78:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e7c:	f8d4 8000 	ldr.w	r8, [r4]
 8000e80:	bf14      	ite	ne
 8000e82:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e86:	ea28 0707 	biceq.w	r7, r8, r7
 8000e8a:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8000e8c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	f8d1 9000 	ldr.w	r9, [r1]
 8000e92:	3204      	adds	r2, #4
 8000e94:	fa39 f703 	lsrs.w	r7, r9, r3
 8000e98:	d05a      	beq.n	8000f50 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8000e9a:	f04f 0801 	mov.w	r8, #1
 8000e9e:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8000ea6:	ea38 0909 	bics.w	r9, r8, r9
 8000eaa:	d1ef      	bne.n	8000e8c <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8000eac:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000eb0:	f1b9 0f12 	cmp.w	r9, #18
 8000eb4:	f63f af39 	bhi.w	8000d2a <HAL_GPIO_Init+0x2a>
 8000eb8:	f1b9 0f12 	cmp.w	r9, #18
 8000ebc:	f63f af5b 	bhi.w	8000d76 <HAL_GPIO_Init+0x76>
 8000ec0:	f20f 0a04 	addw	sl, pc, #4
 8000ec4:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8000ec8:	08000d4f 	.word	0x08000d4f
 8000ecc:	08000f15 	.word	0x08000f15
 8000ed0:	08000f25 	.word	0x08000f25
 8000ed4:	08000d25 	.word	0x08000d25
 8000ed8:	08000d77 	.word	0x08000d77
 8000edc:	08000d77 	.word	0x08000d77
 8000ee0:	08000d77 	.word	0x08000d77
 8000ee4:	08000d77 	.word	0x08000d77
 8000ee8:	08000d77 	.word	0x08000d77
 8000eec:	08000d77 	.word	0x08000d77
 8000ef0:	08000d77 	.word	0x08000d77
 8000ef4:	08000d77 	.word	0x08000d77
 8000ef8:	08000d77 	.word	0x08000d77
 8000efc:	08000d77 	.word	0x08000d77
 8000f00:	08000d77 	.word	0x08000d77
 8000f04:	08000d77 	.word	0x08000d77
 8000f08:	08000d77 	.word	0x08000d77
 8000f0c:	08000f1b 	.word	0x08000f1b
 8000f10:	08000f2f 	.word	0x08000f2f
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f14:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8000f18:	e72d      	b.n	8000d76 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f1a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8000f1e:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8000f22:	e728      	b.n	8000d76 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f24:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8000f28:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8000f2c:	e723      	b.n	8000d76 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f2e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8000f32:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8000f36:	e71e      	b.n	8000d76 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f38:	f04f 0c04 	mov.w	ip, #4
 8000f3c:	e71b      	b.n	8000d76 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3e:	f04f 0900 	mov.w	r9, #0
 8000f42:	e76a      	b.n	8000e1a <HAL_GPIO_Init+0x11a>
 8000f44:	f04f 0901 	mov.w	r9, #1
 8000f48:	e767      	b.n	8000e1a <HAL_GPIO_Init+0x11a>
 8000f4a:	f04f 0902 	mov.w	r9, #2
 8000f4e:	e764      	b.n	8000e1a <HAL_GPIO_Init+0x11a>
  }
}
 8000f50:	b003      	add	sp, #12
 8000f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010400 	.word	0x40010400
 8000f60:	10220000 	.word	0x10220000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10320000 	.word	0x10320000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	40010800 	.word	0x40010800

08000f74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f74:	b10a      	cbz	r2, 8000f7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	6101      	str	r1, [r0, #16]
 8000f78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	0409      	lsls	r1, r1, #16
 8000f7c:	6101      	str	r1, [r0, #16]
  }
}
 8000f7e:	4770      	bx	lr

08000f80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d07e      	beq.n	8001086 <HAL_PCD_Init+0x106>
 8000f88:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f8a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000f8e:	b1eb      	cbz	r3, 8000fcc <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f96:	6828      	ldr	r0, [r5, #0]
 8000f98:	f001 ff55 	bl	8002e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9c:	462c      	mov	r4, r5
 8000f9e:	f854 6b10 	ldr.w	r6, [r4], #16
 8000fa2:	46ec      	mov	ip, sp
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f8cc 3000 	str.w	r3, [ip]
 8000fb0:	1d2b      	adds	r3, r5, #4
 8000fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f001 ff36 	bl	8002e26 <USB_CoreInit>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	b158      	cbz	r0, 8000fd6 <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8000fc4:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000fcc:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000fd0:	f003 fdb4 	bl	8004b3c <HAL_PCD_MspInit>
 8000fd4:	e7dc      	b.n	8000f90 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	6828      	ldr	r0, [r5, #0]
 8000fda:	f001 ff3e 	bl	8002e5a <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	6868      	ldr	r0, [r5, #4]
 8000fe0:	b388      	cbz	r0, 8001046 <HAL_PCD_Init+0xc6>
 8000fe2:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8000fe4:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fe8:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8000fea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000fee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000ff2:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000ff6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ffa:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ffe:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001000:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001002:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001006:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800100a:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100c:	3301      	adds	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4283      	cmp	r3, r0
 8001012:	d3ea      	bcc.n	8000fea <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 8001014:	2200      	movs	r2, #0
 8001016:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800101a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800101e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001022:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001026:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800102a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800102e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001032:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001036:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800103a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103e:	3401      	adds	r4, #1
 8001040:	b2e4      	uxtb	r4, r4
 8001042:	4284      	cmp	r4, r0
 8001044:	d3e7      	bcc.n	8001016 <HAL_PCD_Init+0x96>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001046:	462c      	mov	r4, r5
 8001048:	f854 6b10 	ldr.w	r6, [r4], #16
 800104c:	46ec      	mov	ip, sp
 800104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001050:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	f8cc 3000 	str.w	r3, [ip]
 800105a:	1d2b      	adds	r3, r5, #4
 800105c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105e:	4630      	mov	r0, r6
 8001060:	f001 fefd 	bl	8002e5e <USB_DevInit>
 8001064:	4604      	mov	r4, r0
 8001066:	b120      	cbz	r0, 8001072 <HAL_PCD_Init+0xf2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001068:	2302      	movs	r3, #2
 800106a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 800106e:	2401      	movs	r4, #1
 8001070:	e7a9      	b.n	8000fc6 <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001078:	2301      	movs	r3, #1
 800107a:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800107e:	6828      	ldr	r0, [r5, #0]
 8001080:	f002 fa2d 	bl	80034de <USB_DevDisconnect>
  return HAL_OK;
 8001084:	e79f      	b.n	8000fc6 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 8001086:	2401      	movs	r4, #1
 8001088:	e79d      	b.n	8000fc6 <HAL_PCD_Init+0x46>

0800108a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800108a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800108c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001090:	2b01      	cmp	r3, #1
 8001092:	d011      	beq.n	80010b8 <HAL_PCD_Start+0x2e>
 8001094:	4604      	mov	r4, r0
 8001096:	2501      	movs	r5, #1
 8001098:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800109c:	6800      	ldr	r0, [r0, #0]
 800109e:	f001 fec9 	bl	8002e34 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010a2:	4629      	mov	r1, r5
 80010a4:	4620      	mov	r0, r4
 80010a6:	f003 fe5f 	bl	8004d68 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	f002 fa15 	bl	80034da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80010b6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80010b8:	2002      	movs	r0, #2
 80010ba:	e7fc      	b.n	80010b6 <HAL_PCD_Start+0x2c>

080010bc <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80010bc:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00d      	beq.n	80010e0 <HAL_PCD_SetAddress+0x24>
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010c8:	2301      	movs	r3, #1
 80010ca:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80010ce:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010d2:	6800      	ldr	r0, [r0, #0]
 80010d4:	f002 f9fb 	bl	80034ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010d8:	2000      	movs	r0, #0
 80010da:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80010de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80010e0:	2002      	movs	r0, #2
}
 80010e2:	4770      	bx	lr

080010e4 <HAL_PCD_IRQHandler>:
{
 80010e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010ec:	6800      	ldr	r0, [r0, #0]
 80010ee:	f002 f9f8 	bl	80034e2 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010f2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80010f6:	d126      	bne.n	8001146 <HAL_PCD_IRQHandler+0x62>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010f8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80010fc:	f040 84cc 	bne.w	8001a98 <HAL_PCD_IRQHandler+0x9b4>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001100:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001104:	f040 84d9 	bne.w	8001aba <HAL_PCD_IRQHandler+0x9d6>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001108:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800110c:	f040 84e1 	bne.w	8001ad2 <HAL_PCD_IRQHandler+0x9ee>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001110:	f410 5380 	ands.w	r3, r0, #4096	; 0x1000
 8001114:	f040 84e7 	bne.w	8001ae6 <HAL_PCD_IRQHandler+0xa02>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001118:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800111c:	f040 8502 	bne.w	8001b24 <HAL_PCD_IRQHandler+0xa40>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001120:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001124:	f040 854d 	bne.w	8001bc2 <HAL_PCD_IRQHandler+0xade>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001128:	f410 7f80 	tst.w	r0, #256	; 0x100
 800112c:	f000 84ce 	beq.w	8001acc <HAL_PCD_IRQHandler+0x9e8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001130:	682a      	ldr	r2, [r5, #0]
 8001132:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800113a:	041b      	lsls	r3, r3, #16
 800113c:	0c1b      	lsrs	r3, r3, #16
 800113e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001142:	f000 bcc3 	b.w	8001acc <HAL_PCD_IRQHandler+0x9e8>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001146:	6828      	ldr	r0, [r5, #0]
 8001148:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800114c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001150:	f000 84bc 	beq.w	8001acc <HAL_PCD_IRQHandler+0x9e8>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001154:	f248 0780 	movw	r7, #32896	; 0x8080
 8001158:	2600      	movs	r6, #0
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800115a:	f24c 0880 	movw	r8, #49280	; 0xc080
 800115e:	e058      	b.n	8001212 <HAL_PCD_IRQHandler+0x12e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001160:	8803      	ldrh	r3, [r0, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800116c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001174:	b29b      	uxth	r3, r3
 8001176:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001178:	682a      	ldr	r2, [r5, #0]
 800117a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800117e:	b29b      	uxth	r3, r3
 8001180:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001184:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001188:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800118c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001194:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001196:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001198:	4413      	add	r3, r2
 800119a:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800119c:	4631      	mov	r1, r6
 800119e:	4628      	mov	r0, r5
 80011a0:	f003 fd00 	bl	8004ba4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80011a4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80011a8:	b363      	cbz	r3, 8001204 <HAL_PCD_IRQHandler+0x120>
 80011aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80011ac:	bb53      	cbnz	r3, 8001204 <HAL_PCD_IRQHandler+0x120>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80011ae:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80011b2:	682a      	ldr	r2, [r5, #0]
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80011bc:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 80011c0:	e020      	b.n	8001204 <HAL_PCD_IRQHandler+0x120>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80011cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80011d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80011d4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80011d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011dc:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011e0:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80011e4:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80011e8:	f002 fcf3 	bl	8003bd2 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011ec:	682a      	ldr	r2, [r5, #0]
 80011ee:	8813      	ldrh	r3, [r2, #0]
 80011f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011f4:	051b      	lsls	r3, r3, #20
 80011f6:	0d1b      	lsrs	r3, r3, #20
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80011fe:	4628      	mov	r0, r5
 8001200:	f003 fcbc 	bl	8004b7c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001204:	6828      	ldr	r0, [r5, #0]
 8001206:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800120a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800120e:	f000 845d 	beq.w	8001acc <HAL_PCD_IRQHandler+0x9e8>
    wIstr = hpcd->Instance->ISTR;
 8001212:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8001216:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8001218:	f014 040f 	ands.w	r4, r4, #15
 800121c:	d17e      	bne.n	800131c <HAL_PCD_IRQHandler+0x238>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800121e:	f013 0f10 	tst.w	r3, #16
 8001222:	d09d      	beq.n	8001160 <HAL_PCD_IRQHandler+0x7c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001224:	8803      	ldrh	r3, [r0, #0]
 8001226:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001228:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800122c:	d1c9      	bne.n	80011c2 <HAL_PCD_IRQHandler+0xde>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800122e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001232:	d0e7      	beq.n	8001204 <HAL_PCD_IRQHandler+0x120>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001234:	8803      	ldrh	r3, [r0, #0]
 8001236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800123a:	051b      	lsls	r3, r3, #20
 800123c:	0d1b      	lsrs	r3, r3, #20
 800123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001242:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001244:	6828      	ldr	r0, [r5, #0]
 8001246:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800124a:	b29b      	uxth	r3, r3
 800124c:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8001250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001254:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001258:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800125c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001260:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001264:	b18b      	cbz	r3, 800128a <HAL_PCD_IRQHandler+0x1a6>
 8001266:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 800126a:	b171      	cbz	r1, 800128a <HAL_PCD_IRQHandler+0x1a6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800126c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8001270:	f002 fcaf 	bl	8003bd2 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001274:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8001278:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 800127c:	4413      	add	r3, r2
 800127e:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001282:	4631      	mov	r1, r6
 8001284:	4628      	mov	r0, r5
 8001286:	f003 fc81 	bl	8004b8c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800128a:	682a      	ldr	r2, [r5, #0]
 800128c:	8813      	ldrh	r3, [r2, #0]
 800128e:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001290:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001294:	d1b6      	bne.n	8001204 <HAL_PCD_IRQHandler+0x120>
 8001296:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 800129a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800129e:	d0b1      	beq.n	8001204 <HAL_PCD_IRQHandler+0x120>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012a0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80012aa:	5ad1      	ldrh	r1, [r2, r3]
 80012ac:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80012b0:	52d1      	strh	r1, [r2, r3]
 80012b2:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 80012b6:	293e      	cmp	r1, #62	; 0x3e
 80012b8:	d91b      	bls.n	80012f2 <HAL_PCD_IRQHandler+0x20e>
 80012ba:	0948      	lsrs	r0, r1, #5
 80012bc:	f011 0f1f 	tst.w	r1, #31
 80012c0:	bf08      	it	eq
 80012c2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80012c6:	5ad1      	ldrh	r1, [r2, r3]
 80012c8:	b289      	uxth	r1, r1
 80012ca:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80012ce:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80012d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80012d6:	b289      	uxth	r1, r1
 80012d8:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012da:	682a      	ldr	r2, [r5, #0]
 80012dc:	8813      	ldrh	r3, [r2, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80012ec:	433b      	orrs	r3, r7
 80012ee:	8013      	strh	r3, [r2, #0]
 80012f0:	e788      	b.n	8001204 <HAL_PCD_IRQHandler+0x120>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012f2:	b939      	cbnz	r1, 8001304 <HAL_PCD_IRQHandler+0x220>
 80012f4:	5ad1      	ldrh	r1, [r2, r3]
 80012f6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80012fa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80012fe:	b289      	uxth	r1, r1
 8001300:	52d1      	strh	r1, [r2, r3]
 8001302:	e7ea      	b.n	80012da <HAL_PCD_IRQHandler+0x1f6>
 8001304:	0848      	lsrs	r0, r1, #1
 8001306:	f011 0f01 	tst.w	r1, #1
 800130a:	bf18      	it	ne
 800130c:	3001      	addne	r0, #1
 800130e:	5ad1      	ldrh	r1, [r2, r3]
 8001310:	b289      	uxth	r1, r1
 8001312:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8001316:	b289      	uxth	r1, r1
 8001318:	52d1      	strh	r1, [r2, r3]
 800131a:	e7de      	b.n	80012da <HAL_PCD_IRQHandler+0x1f6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800131c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001320:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001324:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001328:	d152      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x2ec>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800132a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800132e:	f43f af69 	beq.w	8001204 <HAL_PCD_IRQHandler+0x120>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001332:	682a      	ldr	r2, [r5, #0]
 8001334:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001338:	b29b      	uxth	r3, r3
 800133a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800133e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800134a:	b29b      	uxth	r3, r3
 800134c:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001350:	eb04 0a84 	add.w	sl, r4, r4, lsl #2
 8001354:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8001358:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 800135c:	2b01      	cmp	r3, #1
 800135e:	f000 818e 	beq.w	800167e <HAL_PCD_IRQHandler+0x59a>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001362:	f419 7f80 	tst.w	r9, #256	; 0x100
 8001366:	f040 81e4 	bne.w	8001732 <HAL_PCD_IRQHandler+0x64e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800136a:	6828      	ldr	r0, [r5, #0]
 800136c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001370:	b29b      	uxth	r3, r3
 8001372:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
            if (ep->xfer_len > TxPctSize)
 8001376:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800137a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800137e:	6c12      	ldr	r2, [r2, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001380:	3302      	adds	r3, #2
 8001382:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001386:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800138a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
            if (ep->xfer_len > TxPctSize)
 800138e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001392:	429a      	cmp	r2, r3
 8001394:	f240 8422 	bls.w	8001bdc <HAL_PCD_IRQHandler+0xaf8>
              ep->xfer_len -= TxPctSize;
 8001398:	1ad2      	subs	r2, r2, r3
 800139a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800139e:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80013a2:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
            if (ep->xfer_len == 0U)
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	f000 841d 	beq.w	8001be6 <HAL_PCD_IRQHandler+0xb02>
              ep->xfer_buff += TxPctSize;
 80013ac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80013b0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80013b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013b6:	4419      	add	r1, r3
 80013b8:	63d1      	str	r1, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 80013ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80013bc:	440b      	add	r3, r1
 80013be:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80013c0:	3401      	adds	r4, #1
 80013c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c6:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80013ca:	f002 f8a7 	bl	800351c <USB_EPStartXfer>
 80013ce:	e719      	b.n	8001204 <HAL_PCD_IRQHandler+0x120>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013d0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80013d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d8:	051b      	lsls	r3, r3, #20
 80013da:	0d1b      	lsrs	r3, r3, #20
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 80013e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80013e8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80013ec:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d145      	bne.n	8001480 <HAL_PCD_IRQHandler+0x39c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013f4:	6828      	ldr	r0, [r5, #0]
 80013f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001400:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001404:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001408:	3306      	adds	r3, #6
 800140a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800140e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001412:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001416:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 800141a:	f1ba 0f00 	cmp.w	sl, #0
 800141e:	d123      	bne.n	8001468 <HAL_PCD_IRQHandler+0x384>
        ep->xfer_count += count;
 8001420:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001424:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001428:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800142c:	4452      	add	r2, sl
 800142e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001432:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001436:	4452      	add	r2, sl
 8001438:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800143c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001440:	b143      	cbz	r3, 8001454 <HAL_PCD_IRQHandler+0x370>
 8001442:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001446:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800144a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800144e:	459a      	cmp	sl, r3
 8001450:	f080 810b 	bcs.w	800166a <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001454:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001458:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800145c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001460:	4628      	mov	r0, r5
 8001462:	f003 fb93 	bl	8004b8c <HAL_PCD_DataOutStageCallback>
 8001466:	e760      	b.n	800132a <HAL_PCD_IRQHandler+0x246>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001468:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800146c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001470:	4653      	mov	r3, sl
 8001472:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001476:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800147a:	f002 fbaa 	bl	8003bd2 <USB_ReadPMA>
 800147e:	e7cf      	b.n	8001420 <HAL_PCD_IRQHandler+0x33c>
          if (ep->type == EP_TYPE_BULK)
 8001480:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001484:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001488:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 800148c:	2b02      	cmp	r3, #2
 800148e:	d037      	beq.n	8001500 <HAL_PCD_IRQHandler+0x41c>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001490:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001494:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001498:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 800149c:	6829      	ldr	r1, [r5, #0]
 800149e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014b4:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014b8:	6828      	ldr	r0, [r5, #0]
 80014ba:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80014be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014c2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80014c6:	f000 80b4 	beq.w	8001632 <HAL_PCD_IRQHandler+0x54e>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3302      	adds	r3, #2
 80014d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014da:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80014de:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80014e2:	f1ba 0f00 	cmp.w	sl, #0
 80014e6:	d09b      	beq.n	8001420 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014e8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80014ec:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80014f0:	4653      	mov	r3, sl
 80014f2:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80014f6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80014fa:	f002 fb6a 	bl	8003bd2 <USB_ReadPMA>
 80014fe:	e78f      	b.n	8001420 <HAL_PCD_IRQHandler+0x33c>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001500:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001504:	d04a      	beq.n	800159c <HAL_PCD_IRQHandler+0x4b8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001506:	682a      	ldr	r2, [r5, #0]
 8001508:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800150c:	b29b      	uxth	r3, r3
 800150e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001512:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001516:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 800151a:	3302      	adds	r3, #2
 800151c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001520:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001524:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001528:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 800152c:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001530:	4553      	cmp	r3, sl
 8001532:	f0c0 83f9 	bcc.w	8001d28 <HAL_PCD_IRQHandler+0xc44>
      ep->xfer_len -= count;
 8001536:	eba3 030a 	sub.w	r3, r3, sl
 800153a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800153e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001542:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 83f4 	beq.w	8001d34 <HAL_PCD_IRQHandler+0xc50>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800154c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001550:	d013      	beq.n	800157a <HAL_PCD_IRQHandler+0x496>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001552:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001556:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800155a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800155e:	682a      	ldr	r2, [r5, #0]
 8001560:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001564:	b29b      	uxth	r3, r3
 8001566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800156a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800156e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001576:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 800157a:	f1ba 0f00 	cmp.w	sl, #0
 800157e:	f43f af4f 	beq.w	8001420 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001582:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001586:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800158a:	4653      	mov	r3, sl
 800158c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001590:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001594:	6828      	ldr	r0, [r5, #0]
 8001596:	f002 fb1c 	bl	8003bd2 <USB_ReadPMA>
 800159a:	e741      	b.n	8001420 <HAL_PCD_IRQHandler+0x33c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800159c:	682a      	ldr	r2, [r5, #0]
 800159e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80015a8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80015ac:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 80015b0:	3306      	adds	r3, #6
 80015b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80015b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80015ba:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80015be:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80015c2:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 80015c6:	4553      	cmp	r3, sl
 80015c8:	f0c0 83c2 	bcc.w	8001d50 <HAL_PCD_IRQHandler+0xc6c>
      ep->xfer_len -= count;
 80015cc:	eba3 030a 	sub.w	r3, r3, sl
 80015d0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80015d4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80015d8:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 83bd 	beq.w	8001d5c <HAL_PCD_IRQHandler+0xc78>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80015e2:	f019 0f40 	tst.w	r9, #64	; 0x40
 80015e6:	d113      	bne.n	8001610 <HAL_PCD_IRQHandler+0x52c>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80015e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80015ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80015f0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80015f4:	682a      	ldr	r2, [r5, #0]
 80015f6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800160c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001610:	f1ba 0f00 	cmp.w	sl, #0
 8001614:	f43f af04 	beq.w	8001420 <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001618:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800161c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001620:	4653      	mov	r3, sl
 8001622:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001626:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800162a:	6828      	ldr	r0, [r5, #0]
 800162c:	f002 fad1 	bl	8003bd2 <USB_ReadPMA>
 8001630:	e6f6      	b.n	8001420 <HAL_PCD_IRQHandler+0x33c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001632:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001636:	b29b      	uxth	r3, r3
 8001638:	3306      	adds	r3, #6
 800163a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800163e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001642:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001646:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 800164a:	f1ba 0f00 	cmp.w	sl, #0
 800164e:	f43f aee7 	beq.w	8001420 <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001652:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001656:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800165a:	4653      	mov	r3, sl
 800165c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001660:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001664:	f002 fab5 	bl	8003bd2 <USB_ReadPMA>
 8001668:	e6da      	b.n	8001420 <HAL_PCD_IRQHandler+0x33c>
        ep = &hpcd->OUT_ep[epindex];
 800166a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800166e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001672:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001676:	6828      	ldr	r0, [r5, #0]
 8001678:	f001 ff50 	bl	800351c <USB_EPStartXfer>
 800167c:	e655      	b.n	800132a <HAL_PCD_IRQHandler+0x246>
          ep->xfer_len = 0U;
 800167e:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8001682:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8001686:	b1d3      	cbz	r3, 80016be <HAL_PCD_IRQHandler+0x5da>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001688:	f019 0f40 	tst.w	r9, #64	; 0x40
 800168c:	d02b      	beq.n	80016e6 <HAL_PCD_IRQHandler+0x602>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800168e:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8001692:	b9d3      	cbnz	r3, 80016ca <HAL_PCD_IRQHandler+0x5e6>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800169a:	b292      	uxth	r2, r2
 800169c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80016a0:	0109      	lsls	r1, r1, #4
 80016a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80016a6:	4413      	add	r3, r2
 80016a8:	5aca      	ldrh	r2, [r1, r3]
 80016aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016ae:	52ca      	strh	r2, [r1, r3]
 80016b0:	5aca      	ldrh	r2, [r1, r3]
 80016b2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80016b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80016ba:	b292      	uxth	r2, r2
 80016bc:	52ca      	strh	r2, [r1, r3]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016be:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80016c2:	4628      	mov	r0, r5
 80016c4:	f003 fa6e 	bl	8004ba4 <HAL_PCD_DataInStageCallback>
 80016c8:	e59c      	b.n	8001204 <HAL_PCD_IRQHandler+0x120>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d1f7      	bne.n	80016be <HAL_PCD_IRQHandler+0x5da>
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80016d4:	b289      	uxth	r1, r1
 80016d6:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80016e0:	440b      	add	r3, r1
 80016e2:	52d6      	strh	r6, [r2, r3]
 80016e4:	e7eb      	b.n	80016be <HAL_PCD_IRQHandler+0x5da>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016e6:	682b      	ldr	r3, [r5, #0]
 80016e8:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80016ec:	b9a2      	cbnz	r2, 8001718 <HAL_PCD_IRQHandler+0x634>
 80016ee:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80016f2:	b292      	uxth	r2, r2
 80016f4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80016f8:	0109      	lsls	r1, r1, #4
 80016fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016fe:	441a      	add	r2, r3
 8001700:	5a8b      	ldrh	r3, [r1, r2]
 8001702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001706:	528b      	strh	r3, [r1, r2]
 8001708:	5a8b      	ldrh	r3, [r1, r2]
 800170a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800170e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001712:	b29b      	uxth	r3, r3
 8001714:	528b      	strh	r3, [r1, r2]
 8001716:	e7d2      	b.n	80016be <HAL_PCD_IRQHandler+0x5da>
 8001718:	2a01      	cmp	r2, #1
 800171a:	d1d0      	bne.n	80016be <HAL_PCD_IRQHandler+0x5da>
 800171c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001720:	b289      	uxth	r1, r1
 8001722:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800172c:	440b      	add	r3, r1
 800172e:	52d6      	strh	r6, [r2, r3]
 8001730:	e7c5      	b.n	80016be <HAL_PCD_IRQHandler+0x5da>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001732:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001736:	f000 80df 	beq.w	80018f8 <HAL_PCD_IRQHandler+0x814>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800173a:	682a      	ldr	r2, [r5, #0]
 800173c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001740:	b29b      	uxth	r3, r3
 8001742:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len > TxPctSize)
 8001746:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800174a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800174e:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001750:	3302      	adds	r3, #2
 8001752:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001756:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800175a:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxPctSize)
 800175e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001762:	4560      	cmp	r0, ip
 8001764:	f240 8244 	bls.w	8001bf0 <HAL_PCD_IRQHandler+0xb0c>
      ep->xfer_len -= TxPctSize;
 8001768:	eba0 000c 	sub.w	r0, r0, ip
 800176c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001770:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001774:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001776:	2800      	cmp	r0, #0
 8001778:	f000 823f 	beq.w	8001bfa <HAL_PCD_IRQHandler+0xb16>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800177c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001780:	d00a      	beq.n	8001798 <HAL_PCD_IRQHandler+0x6b4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001782:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001786:	b29b      	uxth	r3, r3
 8001788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800178c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001790:	ea48 0303 	orr.w	r3, r8, r3
 8001794:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001798:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800179c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80017a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d029      	beq.n	80017fc <HAL_PCD_IRQHandler+0x718>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80017a8:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80017ac:	682a      	ldr	r2, [r5, #0]
 80017ae:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017bc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80017c0:	433b      	orrs	r3, r7
 80017c2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80017c6:	e51d      	b.n	8001204 <HAL_PCD_IRQHandler+0x120>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	f040 8247 	bne.w	8001c5c <HAL_PCD_IRQHandler+0xb78>
 80017ce:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80017d2:	b298      	uxth	r0, r3
 80017d4:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80017d8:	4403      	add	r3, r0
 80017da:	0109      	lsls	r1, r1, #4
 80017dc:	525e      	strh	r6, [r3, r1]
 80017de:	e223      	b.n	8001c28 <HAL_PCD_IRQHandler+0xb44>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80017e0:	2a01      	cmp	r2, #1
 80017e2:	f040 823b 	bne.w	8001c5c <HAL_PCD_IRQHandler+0xb78>
 80017e6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80017ea:	b292      	uxth	r2, r2
 80017ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017f0:	4413      	add	r3, r2
 80017f2:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	529e      	strh	r6, [r3, r2]
 80017fa:	e22f      	b.n	8001c5c <HAL_PCD_IRQHandler+0xb78>
        ep->xfer_buff += TxPctSize;
 80017fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001800:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001806:	4462      	add	r2, ip
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800180a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800180c:	4462      	add	r2, ip
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	429a      	cmp	r2, r3
 8001816:	d32b      	bcc.n	8001870 <HAL_PCD_IRQHandler+0x78c>
          ep->xfer_len_db -= len;
 8001818:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800181c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001820:	1ad2      	subs	r2, r2, r3
 8001822:	648a      	str	r2, [r1, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001824:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001828:	2a00      	cmp	r2, #0
 800182a:	d14a      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x7de>
 800182c:	682a      	ldr	r2, [r5, #0]
 800182e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8001832:	b280      	uxth	r0, r0
 8001834:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001838:	0109      	lsls	r1, r1, #4
 800183a:	f202 4204 	addw	r2, r2, #1028	; 0x404
 800183e:	4402      	add	r2, r0
 8001840:	5a88      	ldrh	r0, [r1, r2]
 8001842:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001846:	5288      	strh	r0, [r1, r2]
 8001848:	2b3e      	cmp	r3, #62	; 0x3e
 800184a:	d923      	bls.n	8001894 <HAL_PCD_IRQHandler+0x7b0>
 800184c:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8001850:	f013 0f1f 	tst.w	r3, #31
 8001854:	bf08      	it	eq
 8001856:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800185a:	5a88      	ldrh	r0, [r1, r2]
 800185c:	b280      	uxth	r0, r0
 800185e:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8001862:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8001866:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800186a:	b280      	uxth	r0, r0
 800186c:	5288      	strh	r0, [r1, r2]
 800186e:	e02a      	b.n	80018c6 <HAL_PCD_IRQHandler+0x7e2>
        else if (ep->xfer_len_db == 0U)
 8001870:	b93a      	cbnz	r2, 8001882 <HAL_PCD_IRQHandler+0x79e>
          ep->xfer_fill_db = 0U;
 8001872:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001876:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800187a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxPctSize;
 800187e:	4663      	mov	r3, ip
 8001880:	e7d0      	b.n	8001824 <HAL_PCD_IRQHandler+0x740>
          ep->xfer_fill_db = 0U;
 8001882:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001886:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800188a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800188e:	649e      	str	r6, [r3, #72]	; 0x48
          len = ep->xfer_len_db;
 8001890:	4613      	mov	r3, r2
 8001892:	e7c7      	b.n	8001824 <HAL_PCD_IRQHandler+0x740>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001894:	b93b      	cbnz	r3, 80018a6 <HAL_PCD_IRQHandler+0x7c2>
 8001896:	5a88      	ldrh	r0, [r1, r2]
 8001898:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800189c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80018a0:	b280      	uxth	r0, r0
 80018a2:	5288      	strh	r0, [r1, r2]
 80018a4:	e00f      	b.n	80018c6 <HAL_PCD_IRQHandler+0x7e2>
 80018a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80018aa:	f013 0f01 	tst.w	r3, #1
 80018ae:	bf18      	it	ne
 80018b0:	f10c 0c01 	addne.w	ip, ip, #1
 80018b4:	5a88      	ldrh	r0, [r1, r2]
 80018b6:	b280      	uxth	r0, r0
 80018b8:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80018bc:	b280      	uxth	r0, r0
 80018be:	5288      	strh	r0, [r1, r2]
 80018c0:	e001      	b.n	80018c6 <HAL_PCD_IRQHandler+0x7e2>
 80018c2:	2a01      	cmp	r2, #1
 80018c4:	d00b      	beq.n	80018de <HAL_PCD_IRQHandler+0x7fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80018c6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80018ca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80018ce:	4611      	mov	r1, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80018d4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80018d6:	6828      	ldr	r0, [r5, #0]
 80018d8:	f001 fe09 	bl	80034ee <USB_WritePMA>
 80018dc:	e764      	b.n	80017a8 <HAL_PCD_IRQHandler+0x6c4>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018de:	682a      	ldr	r2, [r5, #0]
 80018e0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80018e4:	b289      	uxth	r1, r1
 80018e6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80018ea:	440a      	add	r2, r1
 80018ec:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80018f0:	0109      	lsls	r1, r1, #4
 80018f2:	b298      	uxth	r0, r3
 80018f4:	5250      	strh	r0, [r2, r1]
 80018f6:	e7e6      	b.n	80018c6 <HAL_PCD_IRQHandler+0x7e2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018f8:	682a      	ldr	r2, [r5, #0]
 80018fa:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxPctSize)
 8001904:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001908:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800190c:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001910:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001914:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001918:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxPctSize)
 800191c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001920:	458c      	cmp	ip, r1
 8001922:	f0c0 81b3 	bcc.w	8001c8c <HAL_PCD_IRQHandler+0xba8>
      ep->xfer_len -= TxPctSize;
 8001926:	ebac 0301 	sub.w	r3, ip, r1
 800192a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800192e:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8001932:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 81ad 	beq.w	8001c96 <HAL_PCD_IRQHandler+0xbb2>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800193c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001940:	d10a      	bne.n	8001958 <HAL_PCD_IRQHandler+0x874>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001942:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800194c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001950:	ea48 0303 	orr.w	r3, r8, r3
 8001954:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001958:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800195c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001960:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001964:	2b01      	cmp	r3, #1
 8001966:	f47f af1f 	bne.w	80017a8 <HAL_PCD_IRQHandler+0x6c4>
        ep->xfer_buff += TxPctSize;
 800196a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800196e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001974:	440a      	add	r2, r1
 8001976:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8001978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197a:	440a      	add	r2, r1
 800197c:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800197e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	429a      	cmp	r2, r3
 8001984:	d345      	bcc.n	8001a12 <HAL_PCD_IRQHandler+0x92e>
          ep->xfer_len_db -= len;
 8001986:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800198a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800198e:	1ad2      	subs	r2, r2, r3
 8001990:	648a      	str	r2, [r1, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001992:	682a      	ldr	r2, [r5, #0]
 8001994:	f89a 1029 	ldrb.w	r1, [sl, #41]	; 0x29
 8001998:	2900      	cmp	r1, #0
 800199a:	d163      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x980>
 800199c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80019a0:	b289      	uxth	r1, r1
 80019a2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80019a6:	440a      	add	r2, r1
 80019a8:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 80019ac:	0100      	lsls	r0, r0, #4
 80019ae:	5a11      	ldrh	r1, [r2, r0]
 80019b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80019b4:	5211      	strh	r1, [r2, r0]
 80019b6:	2b3e      	cmp	r3, #62	; 0x3e
 80019b8:	d93d      	bls.n	8001a36 <HAL_PCD_IRQHandler+0x952>
 80019ba:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 80019be:	f013 0f1f 	tst.w	r3, #31
 80019c2:	bf08      	it	eq
 80019c4:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80019c8:	5a11      	ldrh	r1, [r2, r0]
 80019ca:	b289      	uxth	r1, r1
 80019cc:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 80019d0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80019d4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80019d8:	b289      	uxth	r1, r1
 80019da:	5211      	strh	r1, [r2, r0]
 80019dc:	e044      	b.n	8001a68 <HAL_PCD_IRQHandler+0x984>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 818a 	bne.w	8001cf8 <HAL_PCD_IRQHandler+0xc14>
 80019e4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80019e8:	b299      	uxth	r1, r3
 80019ea:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80019ee:	440b      	add	r3, r1
 80019f0:	0100      	lsls	r0, r0, #4
 80019f2:	521e      	strh	r6, [r3, r0]
 80019f4:	e166      	b.n	8001cc4 <HAL_PCD_IRQHandler+0xbe0>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019f6:	2a01      	cmp	r2, #1
 80019f8:	f040 817e 	bne.w	8001cf8 <HAL_PCD_IRQHandler+0xc14>
 80019fc:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001a00:	b289      	uxth	r1, r1
 8001a02:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a0c:	440b      	add	r3, r1
 8001a0e:	52d6      	strh	r6, [r2, r3]
 8001a10:	e172      	b.n	8001cf8 <HAL_PCD_IRQHandler+0xc14>
        else if (ep->xfer_len_db == 0U)
 8001a12:	b93a      	cbnz	r2, 8001a24 <HAL_PCD_IRQHandler+0x940>
          ep->xfer_fill_db = 0U;
 8001a14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001a18:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001a1c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxPctSize;
 8001a20:	460b      	mov	r3, r1
 8001a22:	e7b6      	b.n	8001992 <HAL_PCD_IRQHandler+0x8ae>
          ep->xfer_len_db = 0U;
 8001a24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001a28:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001a2c:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001a2e:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = ep->xfer_len_db;
 8001a32:	4613      	mov	r3, r2
 8001a34:	e7ad      	b.n	8001992 <HAL_PCD_IRQHandler+0x8ae>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a36:	b93b      	cbnz	r3, 8001a48 <HAL_PCD_IRQHandler+0x964>
 8001a38:	5a11      	ldrh	r1, [r2, r0]
 8001a3a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001a3e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001a42:	b289      	uxth	r1, r1
 8001a44:	5211      	strh	r1, [r2, r0]
 8001a46:	e00f      	b.n	8001a68 <HAL_PCD_IRQHandler+0x984>
 8001a48:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8001a4c:	f013 0f01 	tst.w	r3, #1
 8001a50:	bf18      	it	ne
 8001a52:	f10c 0c01 	addne.w	ip, ip, #1
 8001a56:	5a11      	ldrh	r1, [r2, r0]
 8001a58:	b289      	uxth	r1, r1
 8001a5a:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 8001a5e:	b289      	uxth	r1, r1
 8001a60:	5211      	strh	r1, [r2, r0]
 8001a62:	e001      	b.n	8001a68 <HAL_PCD_IRQHandler+0x984>
 8001a64:	2901      	cmp	r1, #1
 8001a66:	d00b      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001a68:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001a6c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001a70:	4611      	mov	r1, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001a76:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001a78:	6828      	ldr	r0, [r5, #0]
 8001a7a:	f001 fd38 	bl	80034ee <USB_WritePMA>
 8001a7e:	e693      	b.n	80017a8 <HAL_PCD_IRQHandler+0x6c4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a80:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8001a84:	b280      	uxth	r0, r0
 8001a86:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001a8a:	0109      	lsls	r1, r1, #4
 8001a8c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001a90:	4402      	add	r2, r0
 8001a92:	b298      	uxth	r0, r3
 8001a94:	5288      	strh	r0, [r1, r2]
 8001a96:	e7e7      	b.n	8001a68 <HAL_PCD_IRQHandler+0x984>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a98:	682a      	ldr	r2, [r5, #0]
 8001a9a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f003 f88b 	bl	8004bc6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff fb02 	bl	80010bc <HAL_PCD_SetAddress>
    return;
 8001ab8:	e008      	b.n	8001acc <HAL_PCD_IRQHandler+0x9e8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001aba:	682a      	ldr	r2, [r5, #0]
 8001abc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001acc:	b004      	add	sp, #16
 8001ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ad2:	682a      	ldr	r2, [r5, #0]
 8001ad4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001ae4:	e7f2      	b.n	8001acc <HAL_PCD_IRQHandler+0x9e8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ae6:	682a      	ldr	r2, [r5, #0]
 8001ae8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001af8:	682a      	ldr	r2, [r5, #0]
 8001afa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001afe:	f023 0308 	bic.w	r3, r3, #8
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f003 f87e 	bl	8004c0c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b10:	682a      	ldr	r2, [r5, #0]
 8001b12:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001b22:	e7d3      	b.n	8001acc <HAL_PCD_IRQHandler+0x9e8>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b24:	682f      	ldr	r7, [r5, #0]
 8001b26:	4638      	mov	r0, r7
 8001b28:	f1ad 0102 	sub.w	r1, sp, #2
 8001b2c:	f10d 060e 	add.w	r6, sp, #14
 8001b30:	460a      	mov	r2, r1
 8001b32:	f830 4b04 	ldrh.w	r4, [r0], #4
 8001b36:	f822 4f02 	strh.w	r4, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 8001b3a:	42b2      	cmp	r2, r6
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_PCD_IRQHandler+0xa4e>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001b42:	b292      	uxth	r2, r2
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b4c:	6828      	ldr	r0, [r5, #0]
 8001b4e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	0412      	lsls	r2, r2, #16
 8001b58:	0c12      	lsrs	r2, r2, #16
 8001b5a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b5e:	6828      	ldr	r0, [r5, #0]
 8001b60:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8001b64:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001b68:	d0fa      	beq.n	8001b60 <HAL_PCD_IRQHandler+0xa7c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b6a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8001b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b72:	0412      	lsls	r2, r2, #16
 8001b74:	0c12      	lsrs	r2, r2, #16
 8001b76:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001b7a:	682a      	ldr	r2, [r5, #0]
 8001b7c:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8001b80:	52d0      	strh	r0, [r2, r3]
    for (i = 0U; i < 8U; i++)
 8001b82:	3304      	adds	r3, #4
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d1f8      	bne.n	8001b7a <HAL_PCD_IRQHandler+0xa96>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b88:	682a      	ldr	r2, [r5, #0]
 8001b8a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b98:	682a      	ldr	r2, [r5, #0]
 8001b9a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001baa:	682a      	ldr	r2, [r5, #0]
 8001bac:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f003 f816 	bl	8004bec <HAL_PCD_SuspendCallback>
    return;
 8001bc0:	e784      	b.n	8001acc <HAL_PCD_IRQHandler+0x9e8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bc2:	682a      	ldr	r2, [r5, #0]
 8001bc4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	0c1b      	lsrs	r3, r3, #16
 8001bd0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f002 fff0 	bl	8004bba <HAL_PCD_SOFCallback>
    return;
 8001bda:	e777      	b.n	8001acc <HAL_PCD_IRQHandler+0x9e8>
 8001bdc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001be0:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8001be4:	6426      	str	r6, [r4, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001be6:	4628      	mov	r0, r5
 8001be8:	f002 ffdc 	bl	8004ba4 <HAL_PCD_DataInStageCallback>
 8001bec:	f7ff bb0a 	b.w	8001204 <HAL_PCD_IRQHandler+0x120>
 8001bf0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001bf4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8001bf8:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bfa:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f47f ade2 	bne.w	80017c8 <HAL_PCD_IRQHandler+0x6e4>
 8001c04:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001c0e:	441a      	add	r2, r3
 8001c10:	0109      	lsls	r1, r1, #4
 8001c12:	5a53      	ldrh	r3, [r2, r1]
 8001c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c18:	5253      	strh	r3, [r2, r1]
 8001c1a:	5a53      	ldrh	r3, [r2, r1]
 8001c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	f47f add6 	bne.w	80017e0 <HAL_PCD_IRQHandler+0x6fc>
 8001c34:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001c3e:	0109      	lsls	r1, r1, #4
 8001c40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c44:	4413      	add	r3, r2
 8001c46:	5aca      	ldrh	r2, [r1, r3]
 8001c48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001c4c:	52ca      	strh	r2, [r1, r3]
 8001c4e:	5aca      	ldrh	r2, [r1, r3]
 8001c50:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001c54:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	52ca      	strh	r2, [r1, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c5c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001c60:	4628      	mov	r0, r5
 8001c62:	f002 ff9f 	bl	8004ba4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c66:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001c6a:	f43f ad9d 	beq.w	80017a8 <HAL_PCD_IRQHandler+0x6c4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c6e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001c72:	682a      	ldr	r2, [r5, #0]
 8001c74:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c82:	ea48 0303 	orr.w	r3, r8, r3
 8001c86:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001c8a:	e58d      	b.n	80017a8 <HAL_PCD_IRQHandler+0x6c4>
 8001c8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001c90:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8001c94:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c96:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae9f 	bne.w	80019de <HAL_PCD_IRQHandler+0x8fa>
 8001ca0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001caa:	441a      	add	r2, r3
 8001cac:	0100      	lsls	r0, r0, #4
 8001cae:	5a13      	ldrh	r3, [r2, r0]
 8001cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb4:	5213      	strh	r3, [r2, r0]
 8001cb6:	5a13      	ldrh	r3, [r2, r0]
 8001cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	f47f ae93 	bne.w	80019f6 <HAL_PCD_IRQHandler+0x912>
 8001cd0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001cda:	0109      	lsls	r1, r1, #4
 8001cdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ce0:	441a      	add	r2, r3
 8001ce2:	5a8b      	ldrh	r3, [r1, r2]
 8001ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce8:	528b      	strh	r3, [r1, r2]
 8001cea:	5a8b      	ldrh	r3, [r1, r2]
 8001cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cf8:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f002 ff51 	bl	8004ba4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d02:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001d06:	f47f ad4f 	bne.w	80017a8 <HAL_PCD_IRQHandler+0x6c4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d0a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001d0e:	682a      	ldr	r2, [r5, #0]
 8001d10:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	ea48 0303 	orr.w	r3, r8, r3
 8001d22:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001d26:	e53f      	b.n	80017a8 <HAL_PCD_IRQHandler+0x6c4>
 8001d28:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001d2c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001d30:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d34:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d46:	433b      	orrs	r3, r7
 8001d48:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001d4c:	f7ff bbfe 	b.w	800154c <HAL_PCD_IRQHandler+0x468>
 8001d50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001d54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001d58:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d5c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d6e:	433b      	orrs	r3, r7
 8001d70:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001d74:	e435      	b.n	80015e2 <HAL_PCD_IRQHandler+0x4fe>

08001d76 <HAL_PCD_EP_Open>:
{
 8001d76:	b510      	push	{r4, lr}
 8001d78:	4604      	mov	r4, r0
 8001d7a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001d7c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d80:	d126      	bne.n	8001dd0 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	f001 0e07 	and.w	lr, r1, #7
 8001d86:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8001d8a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001d8e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001d92:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8001d96:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f88e 0169 	strb.w	r0, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	f00c 0c07 	and.w	ip, ip, #7
 8001da4:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8001da8:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001daa:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8001dac:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001dae:	bf04      	itt	eq
 8001db0:	2300      	moveq	r3, #0
 8001db2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001db4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d016      	beq.n	8001dea <HAL_PCD_EP_Open+0x74>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	f001 f85c 	bl	8002e80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001dce:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd0:	f001 0e07 	and.w	lr, r1, #7
 8001dd4:	f10e 0001 	add.w	r0, lr, #1
 8001dd8:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 8001ddc:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    ep->is_in = 1U;
 8001de0:	f04f 0e01 	mov.w	lr, #1
 8001de4:	f881 e001 	strb.w	lr, [r1, #1]
 8001de8:	e7da      	b.n	8001da0 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8001dea:	2002      	movs	r0, #2
 8001dec:	e7ef      	b.n	8001dce <HAL_PCD_EP_Open+0x58>

08001dee <HAL_PCD_EP_Close>:
{
 8001dee:	b510      	push	{r4, lr}
 8001df0:	4604      	mov	r4, r0
 8001df2:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001df4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001df8:	d11c      	bne.n	8001e34 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	f001 0007 	and.w	r0, r1, #7
 8001dfe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001e02:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001e06:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	f002 0207 	and.w	r2, r2, #7
 8001e16:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001e18:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d013      	beq.n	8001e48 <HAL_PCD_EP_Close+0x5a>
 8001e20:	2301      	movs	r3, #1
 8001e22:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	f001 f9f2 	bl	8003210 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001e32:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	f001 0307 	and.w	r3, r1, #7
 8001e38:	1c58      	adds	r0, r3, #1
 8001e3a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001e3e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ep->is_in = 1U;
 8001e42:	2301      	movs	r3, #1
 8001e44:	704b      	strb	r3, [r1, #1]
 8001e46:	e7e4      	b.n	8001e12 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8001e48:	2002      	movs	r0, #2
 8001e4a:	e7f2      	b.n	8001e32 <HAL_PCD_EP_Close+0x44>

08001e4c <HAL_PCD_EP_Receive>:
{
 8001e4c:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001e52:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001e56:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8001e5a:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8001e5e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8001e62:	2400      	movs	r4, #0
 8001e64:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8001e68:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6c:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e70:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
 8001e74:	6800      	ldr	r0, [r0, #0]
 8001e76:	f001 fb51 	bl	800351c <USB_EPStartXfer>
}
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	bd10      	pop	{r4, pc}

08001e7e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e7e:	f001 0107 	and.w	r1, r1, #7
 8001e82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e86:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8001e8a:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8001e8e:	4770      	bx	lr

08001e90 <HAL_PCD_EP_Transmit>:
{
 8001e90:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001e96:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001e9a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8001e9e:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 8001ea2:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 8001eac:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8001eb6:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	4411      	add	r1, r2
 8001ec0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ec4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001ec8:	6800      	ldr	r0, [r0, #0]
 8001eca:	f001 fb27 	bl	800351c <USB_EPStartXfer>
}
 8001ece:	4620      	mov	r0, r4
 8001ed0:	bd10      	pop	{r4, pc}

08001ed2 <HAL_PCD_EP_SetStall>:
{
 8001ed2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed4:	f001 0507 	and.w	r5, r1, #7
 8001ed8:	6842      	ldr	r2, [r0, #4]
 8001eda:	4295      	cmp	r5, r2
 8001edc:	d831      	bhi.n	8001f42 <HAL_PCD_EP_SetStall+0x70>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ee6:	d11e      	bne.n	8001f26 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001eec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001ef0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001ef4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ef8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8001f02:	2301      	movs	r3, #1
 8001f04:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f06:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001f08:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d01a      	beq.n	8001f46 <HAL_PCD_EP_SetStall+0x74>
 8001f10:	2301      	movs	r3, #1
 8001f12:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	f001 fa63 	bl	80033e2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f1c:	b15d      	cbz	r5, 8001f36 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	1c69      	adds	r1, r5, #1
 8001f28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001f30:	2201      	movs	r2, #1
 8001f32:	704a      	strb	r2, [r1, #1]
 8001f34:	e7e5      	b.n	8001f02 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f36:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001f3a:	6820      	ldr	r0, [r4, #0]
 8001f3c:	f001 fad5 	bl	80034ea <USB_EP0_OutStart>
 8001f40:	e7ed      	b.n	8001f1e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
 8001f44:	e7ee      	b.n	8001f24 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8001f46:	2002      	movs	r0, #2
 8001f48:	e7ec      	b.n	8001f24 <HAL_PCD_EP_SetStall+0x52>

08001f4a <HAL_PCD_EP_ClrStall>:
{
 8001f4a:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f4c:	f001 010f 	and.w	r1, r1, #15
 8001f50:	6842      	ldr	r2, [r0, #4]
 8001f52:	4291      	cmp	r1, r2
 8001f54:	d830      	bhi.n	8001fb8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8001f56:	b510      	push	{r4, lr}
 8001f58:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001f5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f5e:	d121      	bne.n	8001fa4 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	f003 0207 	and.w	r2, r3, #7
 8001f64:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001f68:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001f6c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001f70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f74:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8001f7e:	2200      	movs	r2, #0
 8001f80:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001f88:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d015      	beq.n	8001fbc <HAL_PCD_EP_ClrStall+0x72>
 8001f90:	2301      	movs	r3, #1
 8001f92:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	f001 fa48 	bl	800342c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001fa2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	f003 0107 	and.w	r1, r3, #7
 8001fa8:	1c4a      	adds	r2, r1, #1
 8001faa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001fae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	7048      	strb	r0, [r1, #1]
 8001fb6:	e7e2      	b.n	8001f7e <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
}
 8001fba:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	e7f0      	b.n	8001fa2 <HAL_PCD_EP_ClrStall+0x58>

08001fc0 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fc0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fc4:	d00b      	beq.n	8001fde <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc6:	f001 0107 	and.w	r1, r1, #7
 8001fca:	3101      	adds	r1, #1
 8001fcc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001fd0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001fd4:	b952      	cbnz	r2, 8001fec <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001fd6:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001fd8:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001fda:	2000      	movs	r0, #0
 8001fdc:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001fde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001fe2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001fe6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001fea:	e7f3      	b.n	8001fd4 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8001fec:	2201      	movs	r2, #1
 8001fee:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001ff0:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	814b      	strh	r3, [r1, #10]
 8001ff6:	e7f0      	b.n	8001fda <HAL_PCDEx_PMAConfig+0x1a>

08001ff8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	f000 8201 	beq.w	8002400 <HAL_RCC_OscConfig+0x408>
{
 8001ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	6803      	ldr	r3, [r0, #0]
 8002008:	f013 0f01 	tst.w	r3, #1
 800200c:	d02c      	beq.n	8002068 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800200e:	4b9f      	ldr	r3, [pc, #636]	; (800228c <HAL_RCC_OscConfig+0x294>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d01d      	beq.n	8002056 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201a:	4b9c      	ldr	r3, [pc, #624]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d012      	beq.n	800204c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d041      	beq.n	80020b2 <HAL_RCC_OscConfig+0xba>
 800202e:	2b00      	cmp	r3, #0
 8002030:	d155      	bne.n	80020de <HAL_RCC_OscConfig+0xe6>
 8002032:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002036:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e037      	b.n	80020bc <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002054:	d0e7      	beq.n	8002026 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <HAL_RCC_OscConfig+0x294>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800205e:	d003      	beq.n	8002068 <HAL_RCC_OscConfig+0x70>
 8002060:	6863      	ldr	r3, [r4, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 81ce 	beq.w	8002404 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f013 0f02 	tst.w	r3, #2
 800206e:	d075      	beq.n	800215c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002070:	4b86      	ldr	r3, [pc, #536]	; (800228c <HAL_RCC_OscConfig+0x294>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f013 0f0c 	tst.w	r3, #12
 8002078:	d05f      	beq.n	800213a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800207a:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d054      	beq.n	8002130 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002086:	6923      	ldr	r3, [r4, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 808a 	beq.w	80021a2 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208e:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fdc4 	bl	8000c20 <HAL_GetTick>
 8002098:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4e7c      	ldr	r6, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800209c:	6833      	ldr	r3, [r6, #0]
 800209e:	f013 0f02 	tst.w	r3, #2
 80020a2:	d175      	bne.n	8002190 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7fe fdbc 	bl	8000c20 <HAL_GetTick>
 80020a8:	1b40      	subs	r0, r0, r5
 80020aa:	2802      	cmp	r0, #2
 80020ac:	d9f6      	bls.n	800209c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80020ae:	2003      	movs	r0, #3
 80020b0:	e1ad      	b.n	800240e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b2:	4a76      	ldr	r2, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x294>)
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	b343      	cbz	r3, 8002112 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80020c0:	f7fe fdae 	bl	8000c20 <HAL_GetTick>
 80020c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4e71      	ldr	r6, [pc, #452]	; (800228c <HAL_RCC_OscConfig+0x294>)
 80020c8:	6833      	ldr	r3, [r6, #0]
 80020ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020ce:	d1cb      	bne.n	8002068 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fda6 	bl	8000c20 <HAL_GetTick>
 80020d4:	1b40      	subs	r0, r0, r5
 80020d6:	2864      	cmp	r0, #100	; 0x64
 80020d8:	d9f6      	bls.n	80020c8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e197      	b.n	800240e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e2:	d009      	beq.n	80020f8 <HAL_RCC_OscConfig+0x100>
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x294>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e7e1      	b.n	80020bc <HAL_RCC_OscConfig+0xc4>
 80020f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020fc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e7d4      	b.n	80020bc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002112:	f7fe fd85 	bl	8000c20 <HAL_GetTick>
 8002116:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002118:	4e5c      	ldr	r6, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800211a:	6833      	ldr	r3, [r6, #0]
 800211c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002120:	d0a2      	beq.n	8002068 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002122:	f7fe fd7d 	bl	8000c20 <HAL_GetTick>
 8002126:	1b40      	subs	r0, r0, r5
 8002128:	2864      	cmp	r0, #100	; 0x64
 800212a:	d9f6      	bls.n	800211a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 800212c:	2003      	movs	r0, #3
 800212e:	e16e      	b.n	800240e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x294>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002138:	d1a5      	bne.n	8002086 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b54      	ldr	r3, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f013 0f02 	tst.w	r3, #2
 8002142:	d003      	beq.n	800214c <HAL_RCC_OscConfig+0x154>
 8002144:	6923      	ldr	r3, [r4, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	f040 815e 	bne.w	8002408 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4a4f      	ldr	r2, [pc, #316]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	6961      	ldr	r1, [r4, #20]
 8002152:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002156:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800215a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	f013 0f08 	tst.w	r3, #8
 8002162:	d03d      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002164:	69a3      	ldr	r3, [r4, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d066      	beq.n	8002238 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800216c:	2201      	movs	r2, #1
 800216e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe fd55 	bl	8000c20 <HAL_GetTick>
 8002176:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002178:	4e44      	ldr	r6, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x294>)
 800217a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800217c:	f013 0f02 	tst.w	r3, #2
 8002180:	d121      	bne.n	80021c6 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002182:	f7fe fd4d 	bl	8000c20 <HAL_GetTick>
 8002186:	1b40      	subs	r0, r0, r5
 8002188:	2802      	cmp	r0, #2
 800218a:	d9f6      	bls.n	800217a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800218c:	2003      	movs	r0, #3
 800218e:	e13e      	b.n	800240e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4a3e      	ldr	r2, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x294>)
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	6961      	ldr	r1, [r4, #20]
 8002196:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800219a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e7dc      	b.n	800215c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021a8:	f7fe fd3a 	bl	8000c20 <HAL_GetTick>
 80021ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4e37      	ldr	r6, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x294>)
 80021b0:	6833      	ldr	r3, [r6, #0]
 80021b2:	f013 0f02 	tst.w	r3, #2
 80021b6:	d0d1      	beq.n	800215c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7fe fd32 	bl	8000c20 <HAL_GetTick>
 80021bc:	1b40      	subs	r0, r0, r5
 80021be:	2802      	cmp	r0, #2
 80021c0:	d9f6      	bls.n	80021b0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80021c2:	2003      	movs	r0, #3
 80021c4:	e123      	b.n	800240e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_RCC_OscConfig+0x29c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a33      	ldr	r2, [pc, #204]	; (8002298 <HAL_RCC_OscConfig+0x2a0>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80021d4:	bf00      	nop
  }
  while (Delay --);
 80021d6:	9b01      	ldr	r3, [sp, #4]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	9201      	str	r2, [sp, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	f013 0f04 	tst.w	r3, #4
 80021e6:	f000 809b 	beq.w	8002320 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x294>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021f2:	d134      	bne.n	800225e <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x294>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002208:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x2a4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002212:	d026      	beq.n	8002262 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	68e3      	ldr	r3, [r4, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d042      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2a8>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d158      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2d8>
 800221e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002222:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	621a      	str	r2, [r3, #32]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	f022 0204 	bic.w	r2, r2, #4
 8002234:	621a      	str	r2, [r3, #32]
 8002236:	e038      	b.n	80022aa <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x298>)
 800223a:	2200      	movs	r2, #0
 800223c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002240:	f7fe fcee 	bl	8000c20 <HAL_GetTick>
 8002244:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002246:	4e11      	ldr	r6, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x294>)
 8002248:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800224a:	f013 0f02 	tst.w	r3, #2
 800224e:	d0c7      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7fe fce6 	bl	8000c20 <HAL_GetTick>
 8002254:	1b40      	subs	r0, r0, r5
 8002256:	2802      	cmp	r0, #2
 8002258:	d9f6      	bls.n	8002248 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800225a:	2003      	movs	r0, #3
 800225c:	e0d7      	b.n	800240e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2500      	movs	r5, #0
 8002260:	e7d3      	b.n	800220a <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_OscConfig+0x2a4>)
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800226c:	f7fe fcd8 	bl	8000c20 <HAL_GetTick>
 8002270:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4f0a      	ldr	r7, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x2a4>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f413 7f80 	tst.w	r3, #256	; 0x100
 800227a:	d1cb      	bne.n	8002214 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fcd0 	bl	8000c20 <HAL_GetTick>
 8002280:	1b80      	subs	r0, r0, r6
 8002282:	2864      	cmp	r0, #100	; 0x64
 8002284:	d9f6      	bls.n	8002274 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8002286:	2003      	movs	r0, #3
 8002288:	e0c1      	b.n	800240e <HAL_RCC_OscConfig+0x416>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	42420000 	.word	0x42420000
 8002294:	20000000 	.word	0x20000000
 8002298:	10624dd3 	.word	0x10624dd3
 800229c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x424>)
 80022a2:	6a13      	ldr	r3, [r2, #32]
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022aa:	68e3      	ldr	r3, [r4, #12]
 80022ac:	b333      	cbz	r3, 80022fc <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80022ae:	f7fe fcb7 	bl	8000c20 <HAL_GetTick>
 80022b2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4f59      	ldr	r7, [pc, #356]	; (800241c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f013 0f02 	tst.w	r3, #2
 80022c0:	d12d      	bne.n	800231e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fcad 	bl	8000c20 <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	4540      	cmp	r0, r8
 80022ca:	d9f6      	bls.n	80022ba <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80022cc:	2003      	movs	r0, #3
 80022ce:	e09e      	b.n	800240e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d009      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2f0>
 80022d4:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCC_OscConfig+0x424>)
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	621a      	str	r2, [r3, #32]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	f022 0204 	bic.w	r2, r2, #4
 80022e4:	621a      	str	r2, [r3, #32]
 80022e6:	e7e0      	b.n	80022aa <HAL_RCC_OscConfig+0x2b2>
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x424>)
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	621a      	str	r2, [r3, #32]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	621a      	str	r2, [r3, #32]
 80022fa:	e7d6      	b.n	80022aa <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 80022fc:	f7fe fc90 	bl	8000c20 <HAL_GetTick>
 8002300:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	4f46      	ldr	r7, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f013 0f02 	tst.w	r3, #2
 800230e:	d006      	beq.n	800231e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe fc86 	bl	8000c20 <HAL_GetTick>
 8002314:	1b80      	subs	r0, r0, r6
 8002316:	4540      	cmp	r0, r8
 8002318:	d9f6      	bls.n	8002308 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800231a:	2003      	movs	r0, #3
 800231c:	e077      	b.n	800240e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800231e:	b9e5      	cbnz	r5, 800235a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	69e3      	ldr	r3, [r4, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d072      	beq.n	800240c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002326:	4a3d      	ldr	r2, [pc, #244]	; (800241c <HAL_RCC_OscConfig+0x424>)
 8002328:	6852      	ldr	r2, [r2, #4]
 800232a:	f002 020c 	and.w	r2, r2, #12
 800232e:	2a08      	cmp	r2, #8
 8002330:	d056      	beq.n	80023e0 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	2b02      	cmp	r3, #2
 8002334:	d017      	beq.n	8002366 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_OscConfig+0x428>)
 8002338:	2200      	movs	r2, #0
 800233a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800233c:	f7fe fc70 	bl	8000c20 <HAL_GetTick>
 8002340:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	4d36      	ldr	r5, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x424>)
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800234a:	d047      	beq.n	80023dc <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fc68 	bl	8000c20 <HAL_GetTick>
 8002350:	1b00      	subs	r0, r0, r4
 8002352:	2802      	cmp	r0, #2
 8002354:	d9f6      	bls.n	8002344 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
 8002358:	e059      	b.n	800240e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4a30      	ldr	r2, [pc, #192]	; (800241c <HAL_RCC_OscConfig+0x424>)
 800235c:	69d3      	ldr	r3, [r2, #28]
 800235e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002362:	61d3      	str	r3, [r2, #28]
 8002364:	e7dc      	b.n	8002320 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_RCC_OscConfig+0x428>)
 8002368:	2200      	movs	r2, #0
 800236a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800236c:	f7fe fc58 	bl	8000c20 <HAL_GetTick>
 8002370:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	4e2a      	ldr	r6, [pc, #168]	; (800241c <HAL_RCC_OscConfig+0x424>)
 8002374:	6833      	ldr	r3, [r6, #0]
 8002376:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800237a:	d006      	beq.n	800238a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fc50 	bl	8000c20 <HAL_GetTick>
 8002380:	1b40      	subs	r0, r0, r5
 8002382:	2802      	cmp	r0, #2
 8002384:	d9f6      	bls.n	8002374 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e041      	b.n	800240e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800238a:	6a23      	ldr	r3, [r4, #32]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d01a      	beq.n	80023c8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002392:	4922      	ldr	r1, [pc, #136]	; (800241c <HAL_RCC_OscConfig+0x424>)
 8002394:	684a      	ldr	r2, [r1, #4]
 8002396:	6a23      	ldr	r3, [r4, #32]
 8002398:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800239a:	4303      	orrs	r3, r0
 800239c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_RCC_OscConfig+0x428>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023aa:	f7fe fc39 	bl	8000c20 <HAL_GetTick>
 80023ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	4d1a      	ldr	r5, [pc, #104]	; (800241c <HAL_RCC_OscConfig+0x424>)
 80023b2:	682b      	ldr	r3, [r5, #0]
 80023b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023b8:	d10e      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fc31 	bl	8000c20 <HAL_GetTick>
 80023be:	1b00      	subs	r0, r0, r4
 80023c0:	2802      	cmp	r0, #2
 80023c2:	d9f6      	bls.n	80023b2 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
 80023c6:	e022      	b.n	800240e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_RCC_OscConfig+0x424>)
 80023ca:	6853      	ldr	r3, [r2, #4]
 80023cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023d0:	68a1      	ldr	r1, [r4, #8]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]
 80023d6:	e7dc      	b.n	8002392 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80023d8:	2000      	movs	r0, #0
 80023da:	e018      	b.n	800240e <HAL_RCC_OscConfig+0x416>
 80023dc:	2000      	movs	r0, #0
 80023de:	e016      	b.n	800240e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d017      	beq.n	8002414 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_OscConfig+0x424>)
 80023e6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80023ec:	6a22      	ldr	r2, [r4, #32]
 80023ee:	4291      	cmp	r1, r2
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80023f8:	1a18      	subs	r0, r3, r0
 80023fa:	bf18      	it	ne
 80023fc:	2001      	movne	r0, #1
 80023fe:	e006      	b.n	800240e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002400:	2001      	movs	r0, #1
}
 8002402:	4770      	bx	lr
        return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
 8002406:	e002      	b.n	800240e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002408:	2001      	movs	r0, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800240c:	2000      	movs	r0, #0
}
 800240e:	b002      	add	sp, #8
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e7fa      	b.n	800240e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e7f8      	b.n	800240e <HAL_RCC_OscConfig+0x416>
 800241c:	40021000 	.word	0x40021000
 8002420:	42420000 	.word	0x42420000

08002424 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCC_GetSysClockFreq+0x40>)
 8002426:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002428:	f003 020c 	and.w	r2, r3, #12
 800242c:	2a08      	cmp	r2, #8
 800242e:	d001      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002430:	480d      	ldr	r0, [pc, #52]	; (8002468 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002432:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002434:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <HAL_RCC_GetSysClockFreq+0x48>)
 800243a:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002440:	d00b      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_RCC_GetSysClockFreq+0x40>)
 8002444:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_RCC_GetSysClockFreq+0x44>)
 8002448:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800244c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002454:	fbb0 f0f3 	udiv	r0, r0, r3
 8002458:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_GetSysClockFreq+0x50>)
 800245c:	fb03 f000 	mul.w	r0, r3, r0
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	007a1200 	.word	0x007a1200
 800246c:	08005454 	.word	0x08005454
 8002470:	08005464 	.word	0x08005464
 8002474:	003d0900 	.word	0x003d0900

08002478 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002478:	2800      	cmp	r0, #0
 800247a:	f000 80a2 	beq.w	80025c2 <HAL_RCC_ClockConfig+0x14a>
{
 800247e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002482:	460d      	mov	r5, r1
 8002484:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002486:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_ClockConfig+0x15c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	428b      	cmp	r3, r1
 8002490:	d20b      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x15c>)
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	430b      	orrs	r3, r1
 800249c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	428b      	cmp	r3, r1
 80024a6:	f040 808e 	bne.w	80025c6 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	f013 0f02 	tst.w	r3, #2
 80024b0:	d017      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b2:	f013 0f04 	tst.w	r3, #4
 80024b6:	d004      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 80024ba:	6853      	ldr	r3, [r2, #4]
 80024bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024c0:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f013 0f08 	tst.w	r3, #8
 80024c8:	d004      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ca:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 80024cc:	6853      	ldr	r3, [r2, #4]
 80024ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024d2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 80024d6:	6853      	ldr	r3, [r2, #4]
 80024d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024dc:	68a1      	ldr	r1, [r4, #8]
 80024de:	430b      	orrs	r3, r1
 80024e0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f013 0f01 	tst.w	r3, #1
 80024e8:	d031      	beq.n	800254e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	6862      	ldr	r2, [r4, #4]
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f0:	2a02      	cmp	r2, #2
 80024f2:	d025      	beq.n	8002540 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f013 0f02 	tst.w	r3, #2
 80024fc:	d065      	beq.n	80025ca <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4936      	ldr	r1, [pc, #216]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 8002500:	684b      	ldr	r3, [r1, #4]
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800250a:	f7fe fb89 	bl	8000c20 <HAL_GetTick>
 800250e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002510:	4f31      	ldr	r7, [pc, #196]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002512:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	6862      	ldr	r2, [r4, #4]
 800251e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002522:	d014      	beq.n	800254e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fb7c 	bl	8000c20 <HAL_GetTick>
 8002528:	1b80      	subs	r0, r0, r6
 800252a:	4540      	cmp	r0, r8
 800252c:	d9f3      	bls.n	8002516 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800252e:	2003      	movs	r0, #3
 8002530:	e045      	b.n	80025be <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800253a:	d1e0      	bne.n	80024fe <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e03e      	b.n	80025be <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002548:	d1d9      	bne.n	80024fe <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e037      	b.n	80025be <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_RCC_ClockConfig+0x15c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	42ab      	cmp	r3, r5
 8002558:	d90a      	bls.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_RCC_ClockConfig+0x15c>)
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	f023 0307 	bic.w	r3, r3, #7
 8002562:	432b      	orrs	r3, r5
 8002564:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	42ab      	cmp	r3, r5
 800256e:	d12e      	bne.n	80025ce <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f013 0f04 	tst.w	r3, #4
 8002576:	d006      	beq.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 800257a:	6853      	ldr	r3, [r2, #4]
 800257c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002580:	68e1      	ldr	r1, [r4, #12]
 8002582:	430b      	orrs	r3, r1
 8002584:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	f013 0f08 	tst.w	r3, #8
 800258c:	d007      	beq.n	800259e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 8002590:	6853      	ldr	r3, [r2, #4]
 8002592:	6921      	ldr	r1, [r4, #16]
 8002594:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002598:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800259c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f7ff ff41 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80025a2:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_RCC_ClockConfig+0x160>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025aa:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <HAL_RCC_ClockConfig+0x164>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	40d8      	lsrs	r0, r3
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x168>)
 80025b2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x16c>)
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	f7fe faee 	bl	8000b98 <HAL_InitTick>
  return HAL_OK;
 80025bc:	2000      	movs	r0, #0
}
 80025be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
}
 80025c4:	4770      	bx	lr
    return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e7f9      	b.n	80025be <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
 80025cc:	e7f7      	b.n	80025be <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
 80025d0:	e7f5      	b.n	80025be <HAL_RCC_ClockConfig+0x146>
 80025d2:	bf00      	nop
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	08005410 	.word	0x08005410
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000008 	.word	0x20000008

080025e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025f0:	6803      	ldr	r3, [r0, #0]
 80025f2:	f013 0f01 	tst.w	r3, #1
 80025f6:	d036      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f8:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002600:	d149      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800260a:	61da      	str	r2, [r3, #28]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002616:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002620:	d03b      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002626:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800262a:	d013      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800262c:	6862      	ldr	r2, [r4, #4]
 800262e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002632:	429a      	cmp	r2, r3
 8002634:	d00e      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002636:	4a30      	ldr	r2, [pc, #192]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002638:	6a13      	ldr	r3, [r2, #32]
 800263a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800263e:	4930      	ldr	r1, [pc, #192]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002640:	2601      	movs	r6, #1
 8002642:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002646:	2600      	movs	r6, #0
 8002648:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800264c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800264e:	f013 0f01 	tst.w	r3, #1
 8002652:	d136      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002656:	6a13      	ldr	r3, [r2, #32]
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	6861      	ldr	r1, [r4, #4]
 800265e:	430b      	orrs	r3, r1
 8002660:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002662:	2d00      	cmp	r5, #0
 8002664:	d13e      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	f013 0f02 	tst.w	r3, #2
 800266c:	d006      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002670:	6853      	ldr	r3, [r2, #4]
 8002672:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002676:	68a1      	ldr	r1, [r4, #8]
 8002678:	430b      	orrs	r3, r1
 800267a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	f013 0f10 	tst.w	r3, #16
 8002682:	d034      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002686:	6853      	ldr	r3, [r2, #4]
 8002688:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800268c:	68e1      	ldr	r1, [r4, #12]
 800268e:	430b      	orrs	r3, r1
 8002690:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002692:	2000      	movs	r0, #0
 8002694:	e02c      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8002696:	2500      	movs	r5, #0
 8002698:	e7be      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800269c:	6813      	ldr	r3, [r2, #0]
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026a4:	f7fe fabc 	bl	8000c20 <HAL_GetTick>
 80026a8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4f14      	ldr	r7, [pc, #80]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026b2:	d1b6      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7fe fab4 	bl	8000c20 <HAL_GetTick>
 80026b8:	1b80      	subs	r0, r0, r6
 80026ba:	2864      	cmp	r0, #100	; 0x64
 80026bc:	d9f6      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 80026be:	2003      	movs	r0, #3
 80026c0:	e016      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 80026c2:	f7fe faad 	bl	8000c20 <HAL_GetTick>
 80026c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	4f0b      	ldr	r7, [pc, #44]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f013 0f02 	tst.w	r3, #2
 80026d4:	d1be      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe faa3 	bl	8000c20 <HAL_GetTick>
 80026da:	1b80      	subs	r0, r0, r6
 80026dc:	4540      	cmp	r0, r8
 80026de:	d9f6      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 80026e0:	2003      	movs	r0, #3
 80026e2:	e005      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	69d3      	ldr	r3, [r2, #28]
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	61d3      	str	r3, [r2, #28]
 80026ec:	e7bb      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 80026ee:	2000      	movs	r0, #0
}
 80026f0:	b002      	add	sp, #8
 80026f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	42420000 	.word	0x42420000

08002704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002706:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002708:	6a02      	ldr	r2, [r0, #32]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002712:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002714:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	680d      	ldr	r5, [r1, #0]
 800271a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800271c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002720:	688d      	ldr	r5, [r1, #8]
 8002722:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002724:	4d0b      	ldr	r5, [pc, #44]	; (8002754 <TIM_OC1_SetConfig+0x50>)
 8002726:	42a8      	cmp	r0, r5
 8002728:	d006      	beq.n	8002738 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800272e:	684a      	ldr	r2, [r1, #4]
 8002730:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002732:	6203      	str	r3, [r0, #32]
}
 8002734:	bc70      	pop	{r4, r5, r6}
 8002736:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002738:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800273c:	68cd      	ldr	r5, [r1, #12]
 800273e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002740:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002744:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002748:	694d      	ldr	r5, [r1, #20]
 800274a:	698e      	ldr	r6, [r1, #24]
 800274c:	4335      	orrs	r5, r6
 800274e:	432c      	orrs	r4, r5
 8002750:	e7eb      	b.n	800272a <TIM_OC1_SetConfig+0x26>
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00

08002758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800275c:	6a02      	ldr	r2, [r0, #32]
 800275e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002762:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002766:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002768:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800276c:	680d      	ldr	r5, [r1, #0]
 800276e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002774:	688d      	ldr	r5, [r1, #8]
 8002776:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800277a:	4d0c      	ldr	r5, [pc, #48]	; (80027ac <TIM_OC3_SetConfig+0x54>)
 800277c:	42a8      	cmp	r0, r5
 800277e:	d006      	beq.n	800278e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002780:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002782:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002784:	684a      	ldr	r2, [r1, #4]
 8002786:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002788:	6203      	str	r3, [r0, #32]
}
 800278a:	bc70      	pop	{r4, r5, r6}
 800278c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800278e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002792:	68cd      	ldr	r5, [r1, #12]
 8002794:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800279c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027a0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027a2:	698e      	ldr	r6, [r1, #24]
 80027a4:	4335      	orrs	r5, r6
 80027a6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80027aa:	e7e9      	b.n	8002780 <TIM_OC3_SetConfig+0x28>
 80027ac:	40012c00 	.word	0x40012c00

080027b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027b4:	6a02      	ldr	r2, [r0, #32]
 80027b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ba:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c4:	680d      	ldr	r5, [r1, #0]
 80027c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027ce:	688d      	ldr	r5, [r1, #8]
 80027d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d4:	4d07      	ldr	r5, [pc, #28]	; (80027f4 <TIM_OC4_SetConfig+0x44>)
 80027d6:	42a8      	cmp	r0, r5
 80027d8:	d006      	beq.n	80027e8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027dc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027de:	684a      	ldr	r2, [r1, #4]
 80027e0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e2:	6203      	str	r3, [r0, #32]
}
 80027e4:	bc30      	pop	{r4, r5}
 80027e6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027e8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027ec:	694d      	ldr	r5, [r1, #20]
 80027ee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80027f2:	e7f2      	b.n	80027da <TIM_OC4_SetConfig+0x2a>
 80027f4:	40012c00 	.word	0x40012c00

080027f8 <HAL_TIM_PWM_MspInit>:
}
 80027f8:	4770      	bx	lr
	...

080027fc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80027fc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027fe:	4a25      	ldr	r2, [pc, #148]	; (8002894 <TIM_Base_SetConfig+0x98>)
 8002800:	4290      	cmp	r0, r2
 8002802:	d014      	beq.n	800282e <TIM_Base_SetConfig+0x32>
 8002804:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002808:	d02b      	beq.n	8002862 <TIM_Base_SetConfig+0x66>
 800280a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800280e:	4290      	cmp	r0, r2
 8002810:	d022      	beq.n	8002858 <TIM_Base_SetConfig+0x5c>
 8002812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002816:	4290      	cmp	r0, r2
 8002818:	d037      	beq.n	800288a <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	694a      	ldr	r2, [r1, #20]
 8002820:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002822:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	688b      	ldr	r3, [r1, #8]
 8002826:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800282c:	e02a      	b.n	8002884 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002832:	684a      	ldr	r2, [r1, #4]
 8002834:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	68ca      	ldr	r2, [r1, #12]
 800283c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800283e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002842:	694a      	ldr	r2, [r1, #20]
 8002844:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002846:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002848:	688b      	ldr	r3, [r1, #8]
 800284a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800284c:	680b      	ldr	r3, [r1, #0]
 800284e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002850:	690a      	ldr	r2, [r1, #16]
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <TIM_Base_SetConfig+0x98>)
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
 8002856:	e015      	b.n	8002884 <TIM_Base_SetConfig+0x88>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800285c:	684a      	ldr	r2, [r1, #4]
 800285e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002860:	e003      	b.n	800286a <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002866:	684a      	ldr	r2, [r1, #4]
 8002868:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286e:	68ca      	ldr	r2, [r1, #12]
 8002870:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002876:	694a      	ldr	r2, [r1, #20]
 8002878:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800287a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287c:	688b      	ldr	r3, [r1, #8]
 800287e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002884:	2301      	movs	r3, #1
 8002886:	6143      	str	r3, [r0, #20]
}
 8002888:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800288e:	684a      	ldr	r2, [r1, #4]
 8002890:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002892:	e7ea      	b.n	800286a <TIM_Base_SetConfig+0x6e>
 8002894:	40012c00 	.word	0x40012c00

08002898 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002898:	b340      	cbz	r0, 80028ec <HAL_TIM_Base_Init+0x54>
{
 800289a:	b510      	push	{r4, lr}
 800289c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028a2:	b1f3      	cbz	r3, 80028e2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028aa:	4621      	mov	r1, r4
 80028ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80028b0:	f7ff ffa4 	bl	80027fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80028be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80028c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80028d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80028da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028de:	2000      	movs	r0, #0
}
 80028e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80028e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028e6:	f7fd fdc3 	bl	8000470 <HAL_TIM_Base_MspInit>
 80028ea:	e7db      	b.n	80028a4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80028f0:	b340      	cbz	r0, 8002944 <HAL_TIM_PWM_Init+0x54>
{
 80028f2:	b510      	push	{r4, lr}
 80028f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028fa:	b1f3      	cbz	r3, 800293a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	2302      	movs	r3, #2
 80028fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002902:	4621      	mov	r1, r4
 8002904:	f851 0b04 	ldr.w	r0, [r1], #4
 8002908:	f7ff ff78 	bl	80027fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	2301      	movs	r3, #1
 800290e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002916:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800291a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800291e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800292a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800292e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002932:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002936:	2000      	movs	r0, #0
}
 8002938:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800293a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800293e:	f7ff ff5b 	bl	80027f8 <HAL_TIM_PWM_MspInit>
 8002942:	e7db      	b.n	80028fc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002944:	2001      	movs	r0, #1
}
 8002946:	4770      	bx	lr

08002948 <TIM_OC2_SetConfig>:
{
 8002948:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800294a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294c:	6a02      	ldr	r2, [r0, #32]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002954:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002956:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002958:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800295c:	680d      	ldr	r5, [r1, #0]
 800295e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002962:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002966:	688d      	ldr	r5, [r1, #8]
 8002968:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800296c:	4d0c      	ldr	r5, [pc, #48]	; (80029a0 <TIM_OC2_SetConfig+0x58>)
 800296e:	42a8      	cmp	r0, r5
 8002970:	d006      	beq.n	8002980 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8002972:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002974:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002976:	684a      	ldr	r2, [r1, #4]
 8002978:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800297a:	6203      	str	r3, [r0, #32]
}
 800297c:	bc70      	pop	{r4, r5, r6}
 800297e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002984:	68cd      	ldr	r5, [r1, #12]
 8002986:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800298a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800298e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002992:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002994:	698e      	ldr	r6, [r1, #24]
 8002996:	4335      	orrs	r5, r6
 8002998:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800299c:	e7e9      	b.n	8002972 <TIM_OC2_SetConfig+0x2a>
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00

080029a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80029a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80029a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d066      	beq.n	8002a7c <HAL_TIM_PWM_ConfigChannel+0xd8>
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
 80029b2:	2301      	movs	r3, #1
 80029b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80029b8:	2a0c      	cmp	r2, #12
 80029ba:	d85a      	bhi.n	8002a72 <HAL_TIM_PWM_ConfigChannel+0xce>
 80029bc:	e8df f002 	tbb	[pc, r2]
 80029c0:	59595907 	.word	0x59595907
 80029c4:	5959591b 	.word	0x5959591b
 80029c8:	59595930 	.word	0x59595930
 80029cc:	44          	.byte	0x44
 80029cd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	f7ff fe98 	bl	8002704 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	6993      	ldr	r3, [r2, #24]
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	6993      	ldr	r3, [r2, #24]
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	6993      	ldr	r3, [r2, #24]
 80029ec:	6929      	ldr	r1, [r5, #16]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2000      	movs	r0, #0
      break;
 80029f4:	e03e      	b.n	8002a74 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029f6:	6800      	ldr	r0, [r0, #0]
 80029f8:	f7ff ffa6 	bl	8002948 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	6993      	ldr	r3, [r2, #24]
 8002a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a04:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	6993      	ldr	r3, [r2, #24]
 8002a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6993      	ldr	r3, [r2, #24]
 8002a14:	6929      	ldr	r1, [r5, #16]
 8002a16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a1a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2000      	movs	r0, #0
      break;
 8002a1e:	e029      	b.n	8002a74 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a20:	6800      	ldr	r0, [r0, #0]
 8002a22:	f7ff fe99 	bl	8002758 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	69d3      	ldr	r3, [r2, #28]
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	69d3      	ldr	r3, [r2, #28]
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a3a:	6822      	ldr	r2, [r4, #0]
 8002a3c:	69d3      	ldr	r3, [r2, #28]
 8002a3e:	6929      	ldr	r1, [r5, #16]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2000      	movs	r0, #0
      break;
 8002a46:	e015      	b.n	8002a74 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a48:	6800      	ldr	r0, [r0, #0]
 8002a4a:	f7ff feb1 	bl	80027b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	69d3      	ldr	r3, [r2, #28]
 8002a52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a56:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	69d3      	ldr	r3, [r2, #28]
 8002a5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a60:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	69d3      	ldr	r3, [r2, #28]
 8002a66:	6929      	ldr	r1, [r5, #16]
 8002a68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a6c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2000      	movs	r0, #0
      break;
 8002a70:	e000      	b.n	8002a74 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002a72:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002a74:	2300      	movs	r3, #0
 8002a76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	e7fc      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0xd6>

08002a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a80:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a82:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002a8e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a92:	6082      	str	r2, [r0, #8]
}
 8002a94:	bc10      	pop	{r4}
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f000 80ae 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x166>
{
 8002aa2:	b570      	push	{r4, r5, r6, lr}
 8002aa4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	2302      	movs	r3, #2
 8002aae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002ab2:	6802      	ldr	r2, [r0, #0]
 8002ab4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002abe:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ac0:	680b      	ldr	r3, [r1, #0]
 8002ac2:	2b60      	cmp	r3, #96	; 0x60
 8002ac4:	d060      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0xf0>
 8002ac6:	d83d      	bhi.n	8002b44 <HAL_TIM_ConfigClockSource+0xac>
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d079      	beq.n	8002bc0 <HAL_TIM_ConfigClockSource+0x128>
 8002acc:	d91c      	bls.n	8002b08 <HAL_TIM_ConfigClockSource+0x70>
 8002ace:	2b50      	cmp	r3, #80	; 0x50
 8002ad0:	d136      	bne.n	8002b40 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	6803      	ldr	r3, [r0, #0]
 8002ad4:	6848      	ldr	r0, [r1, #4]
 8002ad6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ad8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aec:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002af0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002af8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afe:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002b02:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2000      	movs	r0, #0
}
 8002b06:	e012      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d002      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x7a>
 8002b0c:	d90b      	bls.n	8002b26 <HAL_TIM_ConfigClockSource+0x8e>
 8002b0e:	2b30      	cmp	r3, #48	; 0x30
 8002b10:	d114      	bne.n	8002b3c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b12:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002b14:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002b20:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2000      	movs	r0, #0
}
 8002b24:	e003      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002b26:	f033 0210 	bics.w	r2, r3, #16
 8002b2a:	d0f2      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x7a>
 8002b2c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b34:	2300      	movs	r3, #0
 8002b36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	e7f6      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
 8002b40:	2001      	movs	r0, #1
 8002b42:	e7f4      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b48:	d055      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	d10c      	bne.n	8002b6a <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8002b50:	68cb      	ldr	r3, [r1, #12]
 8002b52:	684a      	ldr	r2, [r1, #4]
 8002b54:	6889      	ldr	r1, [r1, #8]
 8002b56:	6800      	ldr	r0, [r0, #0]
 8002b58:	f7ff ff92 	bl	8002a80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b5c:	6822      	ldr	r2, [r4, #0]
 8002b5e:	6893      	ldr	r3, [r2, #8]
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b64:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2000      	movs	r0, #0
      break;
 8002b68:	e7e1      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002b6a:	2b70      	cmp	r3, #112	; 0x70
 8002b6c:	d145      	bne.n	8002bfa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8002b6e:	68cb      	ldr	r3, [r1, #12]
 8002b70:	684a      	ldr	r2, [r1, #4]
 8002b72:	6889      	ldr	r1, [r1, #8]
 8002b74:	6800      	ldr	r0, [r0, #0]
 8002b76:	f7ff ff83 	bl	8002a80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002b82:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2000      	movs	r0, #0
      break;
 8002b86:	e7d2      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b88:	6803      	ldr	r3, [r0, #0]
 8002b8a:	684d      	ldr	r5, [r1, #4]
 8002b8c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b90:	6a18      	ldr	r0, [r3, #32]
 8002b92:	f020 0010 	bic.w	r0, r0, #16
 8002b96:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b98:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b9a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002baa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bae:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002bb0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002bba:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2000      	movs	r0, #0
}
 8002bbe:	e7b6      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc0:	6803      	ldr	r3, [r0, #0]
 8002bc2:	6848      	ldr	r0, [r1, #4]
 8002bc4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002bc6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002bde:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be2:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002be6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bec:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002bf0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2000      	movs	r0, #0
}
 8002bf4:	e79b      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	e799      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	e797      	b.n	8002b2e <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	4770      	bx	lr

08002c02 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c02:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c06:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c08:	f04f 0c01 	mov.w	ip, #1
 8002c0c:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8002c10:	ea23 030c 	bic.w	r3, r3, ip
 8002c14:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c16:	6a03      	ldr	r3, [r0, #32]
 8002c18:	408a      	lsls	r2, r1
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	6202      	str	r2, [r0, #32]
}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_PWM_Start>:
{
 8002c20:	b510      	push	{r4, lr}
 8002c22:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c24:	4608      	mov	r0, r1
 8002c26:	bb01      	cbnz	r1, 8002c6a <HAL_TIM_PWM_Start+0x4a>
 8002c28:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d152      	bne.n	8002cd8 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c32:	2302      	movs	r3, #2
 8002c34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	f7ff ffe0 	bl	8002c02 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <HAL_TIM_PWM_Start+0xc0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d034      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d038      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0xa2>
 8002c50:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_TIM_PWM_Start+0xc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d035      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0xa2>
 8002c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d031      	beq.n	8002cc2 <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c66:	2000      	movs	r0, #0
 8002c68:	e035      	b.n	8002cd6 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c6a:	2904      	cmp	r1, #4
 8002c6c:	d00c      	beq.n	8002c88 <HAL_TIM_PWM_Start+0x68>
 8002c6e:	2908      	cmp	r1, #8
 8002c70:	bf0c      	ite	eq
 8002c72:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8002c76:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	bf18      	it	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	b143      	cbz	r3, 8002c96 <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
 8002c86:	e026      	b.n	8002cd6 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c88:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	bf18      	it	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	e7f5      	b.n	8002c82 <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c96:	2804      	cmp	r0, #4
 8002c98:	d008      	beq.n	8002cac <HAL_TIM_PWM_Start+0x8c>
 8002c9a:	2808      	cmp	r0, #8
 8002c9c:	f04f 0302 	mov.w	r3, #2
 8002ca0:	bf0c      	ite	eq
 8002ca2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8002ca6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8002caa:	e7c5      	b.n	8002c38 <HAL_TIM_PWM_Start+0x18>
 8002cac:	2302      	movs	r3, #2
 8002cae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002cb2:	e7c1      	b.n	8002c38 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cba:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d1c3      	bne.n	8002c4a <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	2a06      	cmp	r2, #6
 8002cca:	d007      	beq.n	8002cdc <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002cd4:	2000      	movs	r0, #0
}
 8002cd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
 8002cda:	e7fc      	b.n	8002cd6 <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e7fa      	b.n	8002cd6 <HAL_TIM_PWM_Start+0xb6>
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400

08002ce8 <HAL_TIM_PWM_Stop>:
{
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4604      	mov	r4, r0
 8002cec:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	6800      	ldr	r0, [r0, #0]
 8002cf2:	f7ff ff86 	bl	8002c02 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cf6:	6822      	ldr	r2, [r4, #0]
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_TIM_PWM_Stop+0x80>)
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d014      	beq.n	8002d28 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	6a19      	ldr	r1, [r3, #32]
 8002d02:	f241 1211 	movw	r2, #4369	; 0x1111
 8002d06:	4211      	tst	r1, r2
 8002d08:	d108      	bne.n	8002d1c <HAL_TIM_PWM_Stop+0x34>
 8002d0a:	6a19      	ldr	r1, [r3, #32]
 8002d0c:	f240 4244 	movw	r2, #1092	; 0x444
 8002d10:	4211      	tst	r1, r2
 8002d12:	d103      	bne.n	8002d1c <HAL_TIM_PWM_Stop+0x34>
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	b9ad      	cbnz	r5, 8002d4a <HAL_TIM_PWM_Stop+0x62>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002d24:	2000      	movs	r0, #0
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8002d28:	6a1a      	ldr	r2, [r3, #32]
 8002d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d2e:	421a      	tst	r2, r3
 8002d30:	d1e5      	bne.n	8002cfe <HAL_TIM_PWM_Stop+0x16>
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_TIM_PWM_Stop+0x80>)
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	f240 4344 	movw	r3, #1092	; 0x444
 8002d3a:	421a      	tst	r2, r3
 8002d3c:	d1df      	bne.n	8002cfe <HAL_TIM_PWM_Stop+0x16>
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_TIM_PWM_Stop+0x80>)
 8002d40:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002d42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d46:	6453      	str	r3, [r2, #68]	; 0x44
 8002d48:	e7d9      	b.n	8002cfe <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	2d04      	cmp	r5, #4
 8002d4c:	d008      	beq.n	8002d60 <HAL_TIM_PWM_Stop+0x78>
 8002d4e:	2d08      	cmp	r5, #8
 8002d50:	f04f 0301 	mov.w	r3, #1
 8002d54:	bf0c      	ite	eq
 8002d56:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8002d5a:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8002d5e:	e7e1      	b.n	8002d24 <HAL_TIM_PWM_Stop+0x3c>
 8002d60:	2301      	movs	r3, #1
 8002d62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d66:	e7dd      	b.n	8002d24 <HAL_TIM_PWM_Stop+0x3c>
 8002d68:	40012c00 	.word	0x40012c00

08002d6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d02b      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8002d74:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002d76:	2301      	movs	r3, #1
 8002d78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d82:	6804      	ldr	r4, [r0, #0]
 8002d84:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d86:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	680d      	ldr	r5, [r1, #0]
 8002d8e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d90:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	4c0e      	ldr	r4, [pc, #56]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002d96:	42a3      	cmp	r3, r4
 8002d98:	d00a      	beq.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d007      	beq.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002da0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d003      	beq.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002da8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	d104      	bne.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db4:	6849      	ldr	r1, [r1, #4]
 8002db6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	4618      	mov	r0, r3
}
 8002dc8:	bc30      	pop	{r4, r5}
 8002dca:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002dcc:	2002      	movs	r0, #2
}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00

08002dd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d022      	beq.n	8002e22 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002de2:	68cb      	ldr	r3, [r1, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	688a      	ldr	r2, [r1, #8]
 8002dea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df0:	684a      	ldr	r2, [r1, #4]
 8002df2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df8:	680a      	ldr	r2, [r1, #0]
 8002dfa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e00:	690a      	ldr	r2, [r1, #16]
 8002e02:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e08:	694a      	ldr	r2, [r1, #20]
 8002e0a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e10:	69ca      	ldr	r2, [r1, #28]
 8002e12:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e22:	2002      	movs	r0, #2
}
 8002e24:	4770      	bx	lr

08002e26 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e26:	b084      	sub	sp, #16
 8002e28:	a801      	add	r0, sp, #4
 8002e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002e2e:	2000      	movs	r0, #0
 8002e30:	b004      	add	sp, #16
 8002e32:	4770      	bx	lr

08002e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002e34:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e36:	2000      	movs	r0, #0
 8002e38:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002e3c:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8002e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8002e44:	4770      	bx	lr

08002e46 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e46:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e4e:	045b      	lsls	r3, r3, #17
 8002e50:	0c5b      	lsrs	r3, r3, #17
 8002e52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002e56:	2000      	movs	r0, #0
 8002e58:	4770      	bx	lr

08002e5a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	4770      	bx	lr

08002e5e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e5e:	b084      	sub	sp, #16
 8002e60:	4684      	mov	ip, r0
 8002e62:	a801      	add	r0, sp, #4
 8002e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e74:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e78:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8002e7c:	b004      	add	sp, #16
 8002e7e:	4770      	bx	lr

08002e80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e80:	b530      	push	{r4, r5, lr}
 8002e82:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e84:	f891 e000 	ldrb.w	lr, [r1]
 8002e88:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002e92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e96:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002e98:	78c8      	ldrb	r0, [r1, #3]
 8002e9a:	2803      	cmp	r0, #3
 8002e9c:	d863      	bhi.n	8002f66 <USB_ActivateEndpoint+0xe6>
 8002e9e:	e8df f000 	tbb	[pc, r0]
 8002ea2:	5e57      	.short	0x5e57
 8002ea4:	5a02      	.short	0x5a02
 8002ea6:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ea8:	f248 0c80 	movw	ip, #32896	; 0x8080
 8002eac:	ea42 020c 	orr.w	r2, r2, ip
 8002eb0:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002eb4:	f891 e000 	ldrb.w	lr, [r1]
 8002eb8:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ec6:	ea42 020e 	orr.w	r2, r2, lr
 8002eca:	ea4c 0202 	orr.w	r2, ip, r2
 8002ece:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 8002ed2:	7b0a      	ldrb	r2, [r1, #12]
 8002ed4:	2a00      	cmp	r2, #0
 8002ed6:	f040 80cb 	bne.w	8003070 <USB_ActivateEndpoint+0x1f0>
  {
    if (ep->is_in != 0U)
 8002eda:	784a      	ldrb	r2, [r1, #1]
 8002edc:	2a00      	cmp	r2, #0
 8002ede:	d044      	beq.n	8002f6a <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ee0:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002ee4:	fa1f fe8e 	uxth.w	lr, lr
 8002ee8:	780a      	ldrb	r2, [r1, #0]
 8002eea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ef2:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002ef6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002efa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002efe:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f02:	780c      	ldrb	r4, [r1, #0]
 8002f04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f0c:	d00c      	beq.n	8002f28 <USB_ActivateEndpoint+0xa8>
 8002f0e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f20:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f24:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002f28:	78ca      	ldrb	r2, [r1, #3]
 8002f2a:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f2c:	7809      	ldrb	r1, [r1, #0]
 8002f2e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f32:	b292      	uxth	r2, r2
 8002f34:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3c:	bf18      	it	ne
 8002f3e:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f4a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8002f4e:	bd30      	pop	{r4, r5, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8002f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8002f54:	e7a8      	b.n	8002ea8 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002f56:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002f5a:	2000      	movs	r0, #0
      break;
 8002f5c:	e7a4      	b.n	8002ea8 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002f5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8002f62:	2000      	movs	r0, #0
      break;
 8002f64:	e7a0      	b.n	8002ea8 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8002f66:	2001      	movs	r0, #1
 8002f68:	e79e      	b.n	8002ea8 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f6a:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002f6e:	fa1f fe8e 	uxth.w	lr, lr
 8002f72:	780a      	ldrb	r2, [r1, #0]
 8002f74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002f78:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002f7c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002f80:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002f84:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002f88:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f8c:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002f90:	fa1f fe8e 	uxth.w	lr, lr
 8002f94:	780a      	ldrb	r2, [r1, #0]
 8002f96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002f9a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002f9e:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8002fa2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002fa6:	f822 c00e 	strh.w	ip, [r2, lr]
 8002faa:	690c      	ldr	r4, [r1, #16]
 8002fac:	2c3e      	cmp	r4, #62	; 0x3e
 8002fae:	d936      	bls.n	800301e <USB_ActivateEndpoint+0x19e>
 8002fb0:	0965      	lsrs	r5, r4, #5
 8002fb2:	f014 0f1f 	tst.w	r4, #31
 8002fb6:	bf08      	it	eq
 8002fb8:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8002fbc:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8002fc0:	fa1f fc8c 	uxth.w	ip, ip
 8002fc4:	ea4c 2c85 	orr.w	ip, ip, r5, lsl #10
 8002fc8:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8002fcc:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8002fd0:	fa1f fc8c 	uxth.w	ip, ip
 8002fd4:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fd8:	780c      	ldrb	r4, [r1, #0]
 8002fda:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fde:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002fe2:	d00c      	beq.n	8002ffe <USB_ActivateEndpoint+0x17e>
 8002fe4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002fee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ff2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ffa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->num == 0U)
 8002ffe:	7809      	ldrb	r1, [r1, #0]
 8003000:	bb31      	cbnz	r1, 8003050 <USB_ActivateEndpoint+0x1d0>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	b292      	uxth	r2, r2
 8003006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800300a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800300e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	e797      	b.n	8002f4e <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800301e:	b94c      	cbnz	r4, 8003034 <USB_ActivateEndpoint+0x1b4>
 8003020:	f832 400e 	ldrh.w	r4, [r2, lr]
 8003024:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003028:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800302c:	b2a4      	uxth	r4, r4
 800302e:	f822 400e 	strh.w	r4, [r2, lr]
 8003032:	e7d1      	b.n	8002fd8 <USB_ActivateEndpoint+0x158>
 8003034:	0865      	lsrs	r5, r4, #1
 8003036:	f014 0f01 	tst.w	r4, #1
 800303a:	bf18      	it	ne
 800303c:	3501      	addne	r5, #1
 800303e:	f832 400e 	ldrh.w	r4, [r2, lr]
 8003042:	b2a4      	uxth	r4, r4
 8003044:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8003048:	b2a4      	uxth	r4, r4
 800304a:	f822 400e 	strh.w	r4, [r2, lr]
 800304e:	e7c3      	b.n	8002fd8 <USB_ActivateEndpoint+0x158>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003050:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003054:	b292      	uxth	r2, r2
 8003056:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800305a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800305e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003066:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800306a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800306e:	e76e      	b.n	8002f4e <USB_ActivateEndpoint+0xce>
    if (ep->type == EP_TYPE_BULK)
 8003070:	78ca      	ldrb	r2, [r1, #3]
 8003072:	2a02      	cmp	r2, #2
 8003074:	d075      	beq.n	8003162 <USB_ActivateEndpoint+0x2e2>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003076:	780c      	ldrb	r4, [r1, #0]
 8003078:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800307c:	b292      	uxth	r2, r2
 800307e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003082:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003092:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8003096:	fa1f fe8e 	uxth.w	lr, lr
 800309a:	780a      	ldrb	r2, [r1, #0]
 800309c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80030a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030a4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80030a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80030ac:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80030b0:	f822 c00e 	strh.w	ip, [r2, lr]
 80030b4:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 80030b8:	fa1f fe8e 	uxth.w	lr, lr
 80030bc:	780a      	ldrb	r2, [r1, #0]
 80030be:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80030c2:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80030c6:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 80030ca:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80030ce:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80030d2:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 80030d6:	784a      	ldrb	r2, [r1, #1]
 80030d8:	2a00      	cmp	r2, #0
 80030da:	d151      	bne.n	8003180 <USB_ActivateEndpoint+0x300>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030dc:	780c      	ldrb	r4, [r1, #0]
 80030de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030e2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80030e6:	d00c      	beq.n	8003102 <USB_ActivateEndpoint+0x282>
 80030e8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030ec:	b292      	uxth	r2, r2
 80030ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030fe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003102:	780c      	ldrb	r4, [r1, #0]
 8003104:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003108:	f012 0f40 	tst.w	r2, #64	; 0x40
 800310c:	d00c      	beq.n	8003128 <USB_ActivateEndpoint+0x2a8>
 800310e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003112:	b292      	uxth	r2, r2
 8003114:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003118:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800311c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003120:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003124:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003128:	780c      	ldrb	r4, [r1, #0]
 800312a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800312e:	b292      	uxth	r2, r2
 8003130:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003134:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003138:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800313c:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003140:	ea4c 0202 	orr.w	r2, ip, r2
 8003144:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003148:	7809      	ldrb	r1, [r1, #0]
 800314a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800314e:	b292      	uxth	r2, r2
 8003150:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003158:	ea4c 0202 	orr.w	r2, ip, r2
 800315c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003160:	e6f5      	b.n	8002f4e <USB_ActivateEndpoint+0xce>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003162:	780c      	ldrb	r4, [r1, #0]
 8003164:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003168:	b292      	uxth	r2, r2
 800316a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800316e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003172:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800317a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800317e:	e788      	b.n	8003092 <USB_ActivateEndpoint+0x212>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003180:	780c      	ldrb	r4, [r1, #0]
 8003182:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003186:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800318a:	d00c      	beq.n	80031a6 <USB_ActivateEndpoint+0x326>
 800318c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003190:	b292      	uxth	r2, r2
 8003192:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003196:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800319a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800319e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031a2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031a6:	780c      	ldrb	r4, [r1, #0]
 80031a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031b0:	d00c      	beq.n	80031cc <USB_ActivateEndpoint+0x34c>
 80031b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031b6:	b292      	uxth	r2, r2
 80031b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80031c8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80031cc:	78ca      	ldrb	r2, [r1, #3]
 80031ce:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031d0:	780c      	ldrb	r4, [r1, #0]
 80031d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031d6:	b292      	uxth	r2, r2
 80031d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e0:	bf18      	it	ne
 80031e2:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031f2:	7809      	ldrb	r1, [r1, #0]
 80031f4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80031f8:	b292      	uxth	r2, r2
 80031fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800320a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800320e:	e69e      	b.n	8002f4e <USB_ActivateEndpoint+0xce>

08003210 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003210:	7b0b      	ldrb	r3, [r1, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d146      	bne.n	80032a4 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8003216:	784b      	ldrb	r3, [r1, #1]
 8003218:	b313      	cbz	r3, 8003260 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800321a:	780a      	ldrb	r2, [r1, #0]
 800321c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003220:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003224:	d00c      	beq.n	8003240 <USB_DeactivateEndpoint+0x30>
 8003226:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800323c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003240:	780a      	ldrb	r2, [r1, #0]
 8003242:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003258:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800325c:	2000      	movs	r0, #0
 800325e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003260:	780a      	ldrb	r2, [r1, #0]
 8003262:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003266:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800326a:	d00c      	beq.n	8003286 <USB_DeactivateEndpoint+0x76>
 800326c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003286:	780a      	ldrb	r2, [r1, #0]
 8003288:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80032a2:	e7db      	b.n	800325c <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 80032a4:	784b      	ldrb	r3, [r1, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d14d      	bne.n	8003346 <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032aa:	780a      	ldrb	r2, [r1, #0]
 80032ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80032b4:	d00c      	beq.n	80032d0 <USB_DeactivateEndpoint+0xc0>
 80032b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032d0:	780a      	ldrb	r2, [r1, #0]
 80032d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032da:	d00c      	beq.n	80032f6 <USB_DeactivateEndpoint+0xe6>
 80032dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80032f6:	780a      	ldrb	r2, [r1, #0]
 80032f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800330e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003312:	f891 c000 	ldrb.w	ip, [r1]
 8003316:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	f248 0280 	movw	r2, #32896	; 0x8080
 8003328:	4313      	orrs	r3, r2
 800332a:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800332e:	7809      	ldrb	r1, [r1, #0]
 8003330:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333e:	4313      	orrs	r3, r2
 8003340:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003344:	e78a      	b.n	800325c <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003346:	780a      	ldrb	r2, [r1, #0]
 8003348:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800334c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003350:	d00c      	beq.n	800336c <USB_DeactivateEndpoint+0x15c>
 8003352:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003368:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800336c:	780a      	ldrb	r2, [r1, #0]
 800336e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003372:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003376:	d00c      	beq.n	8003392 <USB_DeactivateEndpoint+0x182>
 8003378:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800338e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003392:	780a      	ldrb	r2, [r1, #0]
 8003394:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ae:	f891 c000 	ldrb.w	ip, [r1]
 80033b2:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c0:	f248 0280 	movw	r2, #32896	; 0x8080
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033ca:	7809      	ldrb	r1, [r1, #0]
 80033cc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	4313      	orrs	r3, r2
 80033dc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80033e0:	e73c      	b.n	800325c <USB_DeactivateEndpoint+0x4c>

080033e2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80033e2:	784b      	ldrb	r3, [r1, #1]
 80033e4:	b18b      	cbz	r3, 800340a <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80033e6:	780a      	ldrb	r2, [r1, #0]
 80033e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f6:	f083 0310 	eor.w	r3, r3, #16
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003402:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8003406:	2000      	movs	r0, #0
 8003408:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800340a:	780a      	ldrb	r2, [r1, #0]
 800340c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800342a:	e7ec      	b.n	8003406 <USB_EPSetStall+0x24>

0800342c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800342c:	7b0b      	ldrb	r3, [r1, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d14b      	bne.n	80034ca <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8003432:	784b      	ldrb	r3, [r1, #1]
 8003434:	b333      	cbz	r3, 8003484 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003436:	780a      	ldrb	r2, [r1, #0]
 8003438:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800343c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003440:	d00c      	beq.n	800345c <USB_EPClearStall+0x30>
 8003442:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003458:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800345c:	78cb      	ldrb	r3, [r1, #3]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d033      	beq.n	80034ca <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003462:	780a      	ldrb	r2, [r1, #0]
 8003464:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003472:	f083 0320 	eor.w	r3, r3, #32
 8003476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003482:	e022      	b.n	80034ca <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003484:	780a      	ldrb	r2, [r1, #0]
 8003486:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800348a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800348e:	d00c      	beq.n	80034aa <USB_EPClearStall+0x7e>
 8003490:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003494:	b29b      	uxth	r3, r3
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034aa:	780a      	ldrb	r2, [r1, #0]
 80034ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	4770      	bx	lr

080034ce <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80034ce:	b911      	cbnz	r1, 80034d6 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	4770      	bx	lr

080034da <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80034da:	2000      	movs	r0, #0
 80034dc:	4770      	bx	lr

080034de <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80034de:	2000      	movs	r0, #0
 80034e0:	4770      	bx	lr

080034e2 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80034e2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80034e6:	b280      	uxth	r0, r0
 80034e8:	4770      	bx	lr

080034ea <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80034ea:	2000      	movs	r0, #0
 80034ec:	4770      	bx	lr

080034ee <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80034ee:	3301      	adds	r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034f0:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 80034f4:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 80034f8:	4662      	mov	r2, ip

  for (count = n; count != 0U; count--)
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	d00d      	beq.n	800351a <USB_WritePMA+0x2c>
 80034fe:	3102      	adds	r1, #2
 8003500:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003504:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8003508:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 800350c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8003510:	f822 3b04 	strh.w	r3, [r2], #4
  for (count = n; count != 0U; count--)
 8003514:	3102      	adds	r1, #2
 8003516:	4594      	cmp	ip, r2
 8003518:	d1f4      	bne.n	8003504 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800351a:	4770      	bx	lr

0800351c <USB_EPStartXfer>:
{
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	4605      	mov	r5, r0
 8003520:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003522:	784b      	ldrb	r3, [r1, #1]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d03c      	beq.n	80035a2 <USB_EPStartXfer+0x86>
    if (ep->doublebuffer == 0U)
 8003528:	7b0a      	ldrb	r2, [r1, #12]
 800352a:	2a00      	cmp	r2, #0
 800352c:	f040 8215 	bne.w	800395a <USB_EPStartXfer+0x43e>
      if (ep->xfer_len > ep->maxpacket)
 8003530:	698a      	ldr	r2, [r1, #24]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8003536:	bf86      	itte	hi
 8003538:	1ad1      	subhi	r1, r2, r3
        len = ep->maxpacket;
 800353a:	461a      	movhi	r2, r3
        ep->xfer_len = 0U;
 800353c:	2100      	movls	r1, #0
 800353e:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003540:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	7820      	ldrb	r0, [r4, #0]
 8003548:	0100      	lsls	r0, r0, #4
 800354a:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800354e:	4419      	add	r1, r3
 8003550:	5a43      	ldrh	r3, [r0, r1]
 8003552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003556:	5243      	strh	r3, [r0, r1]
 8003558:	2a3e      	cmp	r2, #62	; 0x3e
 800355a:	f240 81e9 	bls.w	8003930 <USB_EPStartXfer+0x414>
 800355e:	0956      	lsrs	r6, r2, #5
 8003560:	f012 0f1f 	tst.w	r2, #31
 8003564:	bf08      	it	eq
 8003566:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800356a:	5a43      	ldrh	r3, [r0, r1]
 800356c:	b29b      	uxth	r3, r3
 800356e:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357a:	b29b      	uxth	r3, r3
 800357c:	5243      	strh	r3, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800357e:	7822      	ldrb	r2, [r4, #0]
 8003580:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003584:	b29b      	uxth	r3, r3
 8003586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800359e:	2000      	movs	r0, #0
}
 80035a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80035a2:	690a      	ldr	r2, [r1, #16]
 80035a4:	698e      	ldr	r6, [r1, #24]
 80035a6:	4296      	cmp	r6, r2
 80035a8:	bf28      	it	cs
 80035aa:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80035ac:	7b0b      	ldrb	r3, [r1, #12]
 80035ae:	b1d3      	cbz	r3, 80035e6 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 80035b0:	78cb      	ldrb	r3, [r1, #3]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d038      	beq.n	8003628 <USB_EPStartXfer+0x10c>
        ep->xfer_len_db -= len;
 80035b6:	6a0b      	ldr	r3, [r1, #32]
 80035b8:	1b9b      	subs	r3, r3, r6
 80035ba:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80035bc:	780b      	ldrb	r3, [r1, #0]
 80035be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80035c6:	f000 81a5 	beq.w	8003914 <USB_EPStartXfer+0x3f8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80035ca:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80035ce:	b28a      	uxth	r2, r1
 80035d0:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 80035d4:	4411      	add	r1, r2
 80035d6:	011a      	lsls	r2, r3, #4
 80035d8:	b2b3      	uxth	r3, r6
 80035da:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80035dc:	8962      	ldrh	r2, [r4, #10]
 80035de:	6961      	ldr	r1, [r4, #20]
 80035e0:	f7ff ff85 	bl	80034ee <USB_WritePMA>
 80035e4:	e00e      	b.n	8003604 <USB_EPStartXfer+0xe8>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035e6:	b2b6      	uxth	r6, r6
 80035e8:	4633      	mov	r3, r6
 80035ea:	88ca      	ldrh	r2, [r1, #6]
 80035ec:	6949      	ldr	r1, [r1, #20]
 80035ee:	f7ff ff7e 	bl	80034ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80035f6:	b299      	uxth	r1, r3
 80035f8:	7822      	ldrb	r2, [r4, #0]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8003600:	440b      	add	r3, r1
 8003602:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003604:	7822      	ldrb	r2, [r4, #0]
 8003606:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003614:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003624:	2000      	movs	r0, #0
 8003626:	e7bb      	b.n	80035a0 <USB_EPStartXfer+0x84>
        if (ep->xfer_len_db > ep->maxpacket)
 8003628:	6a0b      	ldr	r3, [r1, #32]
 800362a:	429a      	cmp	r2, r3
 800362c:	f080 8154 	bcs.w	80038d8 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003630:	780a      	ldrb	r2, [r1, #0]
 8003632:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003648:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800364c:	6a0b      	ldr	r3, [r1, #32]
 800364e:	1b9b      	subs	r3, r3, r6
 8003650:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003652:	780b      	ldrb	r3, [r1, #0]
 8003654:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003658:	f012 0f40 	tst.w	r2, #64	; 0x40
 800365c:	f000 809e 	beq.w	800379c <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003660:	784a      	ldrb	r2, [r1, #1]
 8003662:	2a00      	cmp	r2, #0
 8003664:	d132      	bne.n	80036cc <USB_EPStartXfer+0x1b0>
 8003666:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800366a:	b292      	uxth	r2, r2
 800366c:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8003670:	440a      	add	r2, r1
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	5ad1      	ldrh	r1, [r2, r3]
 8003676:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800367a:	52d1      	strh	r1, [r2, r3]
 800367c:	2e3e      	cmp	r6, #62	; 0x3e
 800367e:	d910      	bls.n	80036a2 <USB_EPStartXfer+0x186>
 8003680:	0970      	lsrs	r0, r6, #5
 8003682:	f016 0f1f 	tst.w	r6, #31
 8003686:	bf08      	it	eq
 8003688:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800368c:	5ad1      	ldrh	r1, [r2, r3]
 800368e:	b289      	uxth	r1, r1
 8003690:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003694:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003698:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800369c:	b289      	uxth	r1, r1
 800369e:	52d1      	strh	r1, [r2, r3]
 80036a0:	e016      	b.n	80036d0 <USB_EPStartXfer+0x1b4>
 80036a2:	b93e      	cbnz	r6, 80036b4 <USB_EPStartXfer+0x198>
 80036a4:	5ad1      	ldrh	r1, [r2, r3]
 80036a6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80036aa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80036ae:	b289      	uxth	r1, r1
 80036b0:	52d1      	strh	r1, [r2, r3]
 80036b2:	e00d      	b.n	80036d0 <USB_EPStartXfer+0x1b4>
 80036b4:	0870      	lsrs	r0, r6, #1
 80036b6:	f016 0f01 	tst.w	r6, #1
 80036ba:	bf18      	it	ne
 80036bc:	3001      	addne	r0, #1
 80036be:	5ad1      	ldrh	r1, [r2, r3]
 80036c0:	b289      	uxth	r1, r1
 80036c2:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80036c6:	b289      	uxth	r1, r1
 80036c8:	52d1      	strh	r1, [r2, r3]
 80036ca:	e001      	b.n	80036d0 <USB_EPStartXfer+0x1b4>
 80036cc:	2a01      	cmp	r2, #1
 80036ce:	d032      	beq.n	8003736 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036d0:	b2b3      	uxth	r3, r6
 80036d2:	8962      	ldrh	r2, [r4, #10]
 80036d4:	6961      	ldr	r1, [r4, #20]
 80036d6:	4628      	mov	r0, r5
 80036d8:	f7ff ff09 	bl	80034ee <USB_WritePMA>
            ep->xfer_buff += len;
 80036dc:	6963      	ldr	r3, [r4, #20]
 80036de:	4433      	add	r3, r6
 80036e0:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80036e2:	6a23      	ldr	r3, [r4, #32]
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80036e8:	bf86      	itte	hi
 80036ea:	1b9a      	subhi	r2, r3, r6
 80036ec:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 80036ee:	2200      	movls	r2, #0
 80036f0:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80036f2:	7862      	ldrb	r2, [r4, #1]
 80036f4:	2a00      	cmp	r2, #0
 80036f6:	d13d      	bne.n	8003774 <USB_EPStartXfer+0x258>
 80036f8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80036fc:	b292      	uxth	r2, r2
 80036fe:	7820      	ldrb	r0, [r4, #0]
 8003700:	0100      	lsls	r0, r0, #4
 8003702:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8003706:	440a      	add	r2, r1
 8003708:	5a81      	ldrh	r1, [r0, r2]
 800370a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800370e:	5281      	strh	r1, [r0, r2]
 8003710:	2b3e      	cmp	r3, #62	; 0x3e
 8003712:	d91a      	bls.n	800374a <USB_EPStartXfer+0x22e>
 8003714:	095e      	lsrs	r6, r3, #5
 8003716:	f013 0f1f 	tst.w	r3, #31
 800371a:	bf08      	it	eq
 800371c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003720:	5a81      	ldrh	r1, [r0, r2]
 8003722:	b289      	uxth	r1, r1
 8003724:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003728:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800372c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003730:	b289      	uxth	r1, r1
 8003732:	5281      	strh	r1, [r0, r2]
 8003734:	e020      	b.n	8003778 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003736:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800373a:	b291      	uxth	r1, r2
 800373c:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003740:	440a      	add	r2, r1
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	b2b1      	uxth	r1, r6
 8003746:	52d1      	strh	r1, [r2, r3]
 8003748:	e7c2      	b.n	80036d0 <USB_EPStartXfer+0x1b4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800374a:	b93b      	cbnz	r3, 800375c <USB_EPStartXfer+0x240>
 800374c:	5a81      	ldrh	r1, [r0, r2]
 800374e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003752:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003756:	b289      	uxth	r1, r1
 8003758:	5281      	strh	r1, [r0, r2]
 800375a:	e00d      	b.n	8003778 <USB_EPStartXfer+0x25c>
 800375c:	085e      	lsrs	r6, r3, #1
 800375e:	f013 0f01 	tst.w	r3, #1
 8003762:	bf18      	it	ne
 8003764:	3601      	addne	r6, #1
 8003766:	5a81      	ldrh	r1, [r0, r2]
 8003768:	b289      	uxth	r1, r1
 800376a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800376e:	b289      	uxth	r1, r1
 8003770:	5281      	strh	r1, [r0, r2]
 8003772:	e001      	b.n	8003778 <USB_EPStartXfer+0x25c>
 8003774:	2a01      	cmp	r2, #1
 8003776:	d006      	beq.n	8003786 <USB_EPStartXfer+0x26a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003778:	b29b      	uxth	r3, r3
 800377a:	8922      	ldrh	r2, [r4, #8]
 800377c:	6961      	ldr	r1, [r4, #20]
 800377e:	4628      	mov	r0, r5
 8003780:	f7ff feb5 	bl	80034ee <USB_WritePMA>
 8003784:	e73e      	b.n	8003604 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003786:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800378a:	b290      	uxth	r0, r2
 800378c:	7821      	ldrb	r1, [r4, #0]
 800378e:	0109      	lsls	r1, r1, #4
 8003790:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003794:	4402      	add	r2, r0
 8003796:	b298      	uxth	r0, r3
 8003798:	5288      	strh	r0, [r1, r2]
 800379a:	e7ed      	b.n	8003778 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800379c:	784a      	ldrb	r2, [r1, #1]
 800379e:	2a00      	cmp	r2, #0
 80037a0:	d132      	bne.n	8003808 <USB_EPStartXfer+0x2ec>
 80037a2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80037a6:	b292      	uxth	r2, r2
 80037a8:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80037ac:	440a      	add	r2, r1
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	5ad1      	ldrh	r1, [r2, r3]
 80037b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80037b6:	52d1      	strh	r1, [r2, r3]
 80037b8:	2e3e      	cmp	r6, #62	; 0x3e
 80037ba:	d910      	bls.n	80037de <USB_EPStartXfer+0x2c2>
 80037bc:	0970      	lsrs	r0, r6, #5
 80037be:	f016 0f1f 	tst.w	r6, #31
 80037c2:	bf08      	it	eq
 80037c4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80037c8:	5ad1      	ldrh	r1, [r2, r3]
 80037ca:	b289      	uxth	r1, r1
 80037cc:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80037d0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80037d4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80037d8:	b289      	uxth	r1, r1
 80037da:	52d1      	strh	r1, [r2, r3]
 80037dc:	e016      	b.n	800380c <USB_EPStartXfer+0x2f0>
 80037de:	b93e      	cbnz	r6, 80037f0 <USB_EPStartXfer+0x2d4>
 80037e0:	5ad1      	ldrh	r1, [r2, r3]
 80037e2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80037e6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80037ea:	b289      	uxth	r1, r1
 80037ec:	52d1      	strh	r1, [r2, r3]
 80037ee:	e00d      	b.n	800380c <USB_EPStartXfer+0x2f0>
 80037f0:	0870      	lsrs	r0, r6, #1
 80037f2:	f016 0f01 	tst.w	r6, #1
 80037f6:	bf18      	it	ne
 80037f8:	3001      	addne	r0, #1
 80037fa:	5ad1      	ldrh	r1, [r2, r3]
 80037fc:	b289      	uxth	r1, r1
 80037fe:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003802:	b289      	uxth	r1, r1
 8003804:	52d1      	strh	r1, [r2, r3]
 8003806:	e001      	b.n	800380c <USB_EPStartXfer+0x2f0>
 8003808:	2a01      	cmp	r2, #1
 800380a:	d032      	beq.n	8003872 <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800380c:	b2b3      	uxth	r3, r6
 800380e:	8922      	ldrh	r2, [r4, #8]
 8003810:	6961      	ldr	r1, [r4, #20]
 8003812:	4628      	mov	r0, r5
 8003814:	f7ff fe6b 	bl	80034ee <USB_WritePMA>
            ep->xfer_buff += len;
 8003818:	6963      	ldr	r3, [r4, #20]
 800381a:	4433      	add	r3, r6
 800381c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800381e:	6a23      	ldr	r3, [r4, #32]
 8003820:	6922      	ldr	r2, [r4, #16]
 8003822:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8003824:	bf86      	itte	hi
 8003826:	1b9a      	subhi	r2, r3, r6
 8003828:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800382a:	2200      	movls	r2, #0
 800382c:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800382e:	7862      	ldrb	r2, [r4, #1]
 8003830:	2a00      	cmp	r2, #0
 8003832:	d13d      	bne.n	80038b0 <USB_EPStartXfer+0x394>
 8003834:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003838:	b292      	uxth	r2, r2
 800383a:	7820      	ldrb	r0, [r4, #0]
 800383c:	0100      	lsls	r0, r0, #4
 800383e:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003842:	440a      	add	r2, r1
 8003844:	5a81      	ldrh	r1, [r0, r2]
 8003846:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800384a:	5281      	strh	r1, [r0, r2]
 800384c:	2b3e      	cmp	r3, #62	; 0x3e
 800384e:	d91a      	bls.n	8003886 <USB_EPStartXfer+0x36a>
 8003850:	095e      	lsrs	r6, r3, #5
 8003852:	f013 0f1f 	tst.w	r3, #31
 8003856:	bf08      	it	eq
 8003858:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800385c:	5a81      	ldrh	r1, [r0, r2]
 800385e:	b289      	uxth	r1, r1
 8003860:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003864:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003868:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800386c:	b289      	uxth	r1, r1
 800386e:	5281      	strh	r1, [r0, r2]
 8003870:	e020      	b.n	80038b4 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003872:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003876:	b291      	uxth	r1, r2
 8003878:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800387c:	440a      	add	r2, r1
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	b2b1      	uxth	r1, r6
 8003882:	52d1      	strh	r1, [r2, r3]
 8003884:	e7c2      	b.n	800380c <USB_EPStartXfer+0x2f0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003886:	b93b      	cbnz	r3, 8003898 <USB_EPStartXfer+0x37c>
 8003888:	5a81      	ldrh	r1, [r0, r2]
 800388a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800388e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003892:	b289      	uxth	r1, r1
 8003894:	5281      	strh	r1, [r0, r2]
 8003896:	e00d      	b.n	80038b4 <USB_EPStartXfer+0x398>
 8003898:	085e      	lsrs	r6, r3, #1
 800389a:	f013 0f01 	tst.w	r3, #1
 800389e:	bf18      	it	ne
 80038a0:	3601      	addne	r6, #1
 80038a2:	5a81      	ldrh	r1, [r0, r2]
 80038a4:	b289      	uxth	r1, r1
 80038a6:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80038aa:	b289      	uxth	r1, r1
 80038ac:	5281      	strh	r1, [r0, r2]
 80038ae:	e001      	b.n	80038b4 <USB_EPStartXfer+0x398>
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	d006      	beq.n	80038c2 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	8962      	ldrh	r2, [r4, #10]
 80038b8:	6961      	ldr	r1, [r4, #20]
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7ff fe17 	bl	80034ee <USB_WritePMA>
 80038c0:	e6a0      	b.n	8003604 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80038c6:	b290      	uxth	r0, r2
 80038c8:	7821      	ldrb	r1, [r4, #0]
 80038ca:	0109      	lsls	r1, r1, #4
 80038cc:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80038d0:	4402      	add	r2, r0
 80038d2:	b298      	uxth	r0, r3
 80038d4:	5288      	strh	r0, [r1, r2]
 80038d6:	e7ed      	b.n	80038b4 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80038d8:	7809      	ldrb	r1, [r1, #0]
 80038da:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80038de:	b292      	uxth	r2, r2
 80038e0:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80038e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f0:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80038f4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80038f8:	b290      	uxth	r0, r2
 80038fa:	7821      	ldrb	r1, [r4, #0]
 80038fc:	0109      	lsls	r1, r1, #4
 80038fe:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003902:	4402      	add	r2, r0
 8003904:	b29b      	uxth	r3, r3
 8003906:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003908:	8922      	ldrh	r2, [r4, #8]
 800390a:	6961      	ldr	r1, [r4, #20]
 800390c:	4628      	mov	r0, r5
 800390e:	f7ff fdee 	bl	80034ee <USB_WritePMA>
 8003912:	e677      	b.n	8003604 <USB_EPStartXfer+0xe8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003914:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003918:	b28a      	uxth	r2, r1
 800391a:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800391e:	4411      	add	r1, r2
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	b2b3      	uxth	r3, r6
 8003924:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003926:	8922      	ldrh	r2, [r4, #8]
 8003928:	6961      	ldr	r1, [r4, #20]
 800392a:	f7ff fde0 	bl	80034ee <USB_WritePMA>
 800392e:	e669      	b.n	8003604 <USB_EPStartXfer+0xe8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003930:	b93a      	cbnz	r2, 8003942 <USB_EPStartXfer+0x426>
 8003932:	5a43      	ldrh	r3, [r0, r1]
 8003934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393c:	b29b      	uxth	r3, r3
 800393e:	5243      	strh	r3, [r0, r1]
 8003940:	e61d      	b.n	800357e <USB_EPStartXfer+0x62>
 8003942:	0856      	lsrs	r6, r2, #1
 8003944:	f012 0f01 	tst.w	r2, #1
 8003948:	bf18      	it	ne
 800394a:	3601      	addne	r6, #1
 800394c:	5a43      	ldrh	r3, [r0, r1]
 800394e:	b29b      	uxth	r3, r3
 8003950:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003954:	b29b      	uxth	r3, r3
 8003956:	5243      	strh	r3, [r0, r1]
 8003958:	e611      	b.n	800357e <USB_EPStartXfer+0x62>
      if (ep->type == EP_TYPE_BULK)
 800395a:	78ca      	ldrb	r2, [r1, #3]
 800395c:	2a02      	cmp	r2, #2
 800395e:	d04b      	beq.n	80039f8 <USB_EPStartXfer+0x4dc>
      else if (ep->type == EP_TYPE_ISOC)
 8003960:	2a01      	cmp	r2, #1
 8003962:	f040 8134 	bne.w	8003bce <USB_EPStartXfer+0x6b2>
        if (ep->xfer_len > ep->maxpacket)
 8003966:	698a      	ldr	r2, [r1, #24]
 8003968:	6909      	ldr	r1, [r1, #16]
 800396a:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 800396c:	bf86      	itte	hi
 800396e:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8003970:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 8003972:	2000      	movls	r0, #0
 8003974:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f ae01 	bne.w	800357e <USB_EPStartXfer+0x62>
 800397c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003980:	b29b      	uxth	r3, r3
 8003982:	7821      	ldrb	r1, [r4, #0]
 8003984:	0109      	lsls	r1, r1, #4
 8003986:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800398a:	4403      	add	r3, r0
 800398c:	5ac8      	ldrh	r0, [r1, r3]
 800398e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003992:	52c8      	strh	r0, [r1, r3]
 8003994:	2a3e      	cmp	r2, #62	; 0x3e
 8003996:	f240 80c7 	bls.w	8003b28 <USB_EPStartXfer+0x60c>
 800399a:	0956      	lsrs	r6, r2, #5
 800399c:	f012 071f 	ands.w	r7, r2, #31
 80039a0:	bf0c      	ite	eq
 80039a2:	f106 3cff 	addeq.w	ip, r6, #4294967295
 80039a6:	46b4      	movne	ip, r6
 80039a8:	5ac8      	ldrh	r0, [r1, r3]
 80039aa:	b280      	uxth	r0, r0
 80039ac:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80039b0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80039b4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80039b8:	b280      	uxth	r0, r0
 80039ba:	52c8      	strh	r0, [r1, r3]
 80039bc:	7863      	ldrb	r3, [r4, #1]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f040 80f7 	bne.w	8003bb2 <USB_EPStartXfer+0x696>
 80039c4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80039c8:	b293      	uxth	r3, r2
 80039ca:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80039ce:	441a      	add	r2, r3
 80039d0:	7821      	ldrb	r1, [r4, #0]
 80039d2:	0109      	lsls	r1, r1, #4
 80039d4:	5a53      	ldrh	r3, [r2, r1]
 80039d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039da:	5253      	strh	r3, [r2, r1]
 80039dc:	2f00      	cmp	r7, #0
 80039de:	f000 80e6 	beq.w	8003bae <USB_EPStartXfer+0x692>
 80039e2:	5a53      	ldrh	r3, [r2, r1]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80039ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	5253      	strh	r3, [r2, r1]
 80039f6:	e5c2      	b.n	800357e <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d140      	bne.n	8003a7e <USB_EPStartXfer+0x562>
 80039fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	780a      	ldrb	r2, [r1, #0]
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003a0a:	440b      	add	r3, r1
 8003a0c:	5ad1      	ldrh	r1, [r2, r3]
 8003a0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003a12:	52d1      	strh	r1, [r2, r3]
 8003a14:	6920      	ldr	r0, [r4, #16]
 8003a16:	283e      	cmp	r0, #62	; 0x3e
 8003a18:	d94f      	bls.n	8003aba <USB_EPStartXfer+0x59e>
 8003a1a:	0946      	lsrs	r6, r0, #5
 8003a1c:	f010 0f1f 	tst.w	r0, #31
 8003a20:	bf08      	it	eq
 8003a22:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003a26:	5ad1      	ldrh	r1, [r2, r3]
 8003a28:	b289      	uxth	r1, r1
 8003a2a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003a2e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003a32:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003a36:	b289      	uxth	r1, r1
 8003a38:	52d1      	strh	r1, [r2, r3]
 8003a3a:	7863      	ldrb	r3, [r4, #1]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d166      	bne.n	8003b0e <USB_EPStartXfer+0x5f2>
 8003a40:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	7822      	ldrb	r2, [r4, #0]
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003a4e:	440b      	add	r3, r1
 8003a50:	5ad1      	ldrh	r1, [r2, r3]
 8003a52:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003a56:	52d1      	strh	r1, [r2, r3]
 8003a58:	6920      	ldr	r0, [r4, #16]
 8003a5a:	283e      	cmp	r0, #62	; 0x3e
 8003a5c:	d942      	bls.n	8003ae4 <USB_EPStartXfer+0x5c8>
 8003a5e:	0946      	lsrs	r6, r0, #5
 8003a60:	f010 0f1f 	tst.w	r0, #31
 8003a64:	bf08      	it	eq
 8003a66:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003a6a:	5ad1      	ldrh	r1, [r2, r3]
 8003a6c:	b289      	uxth	r1, r1
 8003a6e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003a72:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003a76:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003a7a:	b289      	uxth	r1, r1
 8003a7c:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8003a7e:	69e3      	ldr	r3, [r4, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f43f ad7c 	beq.w	800357e <USB_EPStartXfer+0x62>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003a86:	7822      	ldrb	r2, [r4, #0]
 8003a88:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003a8c:	f244 0340 	movw	r3, #16448	; 0x4040
 8003a90:	ea03 0001 	and.w	r0, r3, r1
 8003a94:	438b      	bics	r3, r1
 8003a96:	d002      	beq.n	8003a9e <USB_EPStartXfer+0x582>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	f47f ad70 	bne.w	800357e <USB_EPStartXfer+0x62>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8003a9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ab4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003ab8:	e561      	b.n	800357e <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003aba:	b938      	cbnz	r0, 8003acc <USB_EPStartXfer+0x5b0>
 8003abc:	5ad1      	ldrh	r1, [r2, r3]
 8003abe:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003ac2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003ac6:	b289      	uxth	r1, r1
 8003ac8:	52d1      	strh	r1, [r2, r3]
 8003aca:	e7b6      	b.n	8003a3a <USB_EPStartXfer+0x51e>
 8003acc:	0846      	lsrs	r6, r0, #1
 8003ace:	f010 0f01 	tst.w	r0, #1
 8003ad2:	bf18      	it	ne
 8003ad4:	3601      	addne	r6, #1
 8003ad6:	5ad1      	ldrh	r1, [r2, r3]
 8003ad8:	b289      	uxth	r1, r1
 8003ada:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003ade:	b289      	uxth	r1, r1
 8003ae0:	52d1      	strh	r1, [r2, r3]
 8003ae2:	e7aa      	b.n	8003a3a <USB_EPStartXfer+0x51e>
 8003ae4:	b938      	cbnz	r0, 8003af6 <USB_EPStartXfer+0x5da>
 8003ae6:	5ad1      	ldrh	r1, [r2, r3]
 8003ae8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003aec:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003af0:	b289      	uxth	r1, r1
 8003af2:	52d1      	strh	r1, [r2, r3]
 8003af4:	e7c3      	b.n	8003a7e <USB_EPStartXfer+0x562>
 8003af6:	0846      	lsrs	r6, r0, #1
 8003af8:	f010 0f01 	tst.w	r0, #1
 8003afc:	bf18      	it	ne
 8003afe:	3601      	addne	r6, #1
 8003b00:	5ad1      	ldrh	r1, [r2, r3]
 8003b02:	b289      	uxth	r1, r1
 8003b04:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003b08:	b289      	uxth	r1, r1
 8003b0a:	52d1      	strh	r1, [r2, r3]
 8003b0c:	e7b7      	b.n	8003a7e <USB_EPStartXfer+0x562>
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d1b5      	bne.n	8003a7e <USB_EPStartXfer+0x562>
 8003b12:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003b16:	b299      	uxth	r1, r3
 8003b18:	7822      	ldrb	r2, [r4, #0]
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003b20:	440b      	add	r3, r1
 8003b22:	8a21      	ldrh	r1, [r4, #16]
 8003b24:	52d1      	strh	r1, [r2, r3]
 8003b26:	e7aa      	b.n	8003a7e <USB_EPStartXfer+0x562>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003b28:	b9ea      	cbnz	r2, 8003b66 <USB_EPStartXfer+0x64a>
 8003b2a:	5ac8      	ldrh	r0, [r1, r3]
 8003b2c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8003b30:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8003b34:	b280      	uxth	r0, r0
 8003b36:	52c8      	strh	r0, [r1, r3]
 8003b38:	7863      	ldrb	r3, [r4, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d139      	bne.n	8003bb2 <USB_EPStartXfer+0x696>
 8003b3e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	7821      	ldrb	r1, [r4, #0]
 8003b46:	0109      	lsls	r1, r1, #4
 8003b48:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003b4c:	441a      	add	r2, r3
 8003b4e:	5a8b      	ldrh	r3, [r1, r2]
 8003b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b54:	528b      	strh	r3, [r1, r2]
 8003b56:	5a8b      	ldrh	r3, [r1, r2]
 8003b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	528b      	strh	r3, [r1, r2]
 8003b64:	e50b      	b.n	800357e <USB_EPStartXfer+0x62>
 8003b66:	0856      	lsrs	r6, r2, #1
 8003b68:	f012 0701 	ands.w	r7, r2, #1
 8003b6c:	bf14      	ite	ne
 8003b6e:	f106 0c01 	addne.w	ip, r6, #1
 8003b72:	46b4      	moveq	ip, r6
 8003b74:	5ac8      	ldrh	r0, [r1, r3]
 8003b76:	b280      	uxth	r0, r0
 8003b78:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8003b7c:	b280      	uxth	r0, r0
 8003b7e:	52c8      	strh	r0, [r1, r3]
 8003b80:	7863      	ldrb	r3, [r4, #1]
 8003b82:	b9b3      	cbnz	r3, 8003bb2 <USB_EPStartXfer+0x696>
 8003b84:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003b8e:	441a      	add	r2, r3
 8003b90:	7821      	ldrb	r1, [r4, #0]
 8003b92:	0109      	lsls	r1, r1, #4
 8003b94:	5a53      	ldrh	r3, [r2, r1]
 8003b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9a:	5253      	strh	r3, [r2, r1]
 8003b9c:	b107      	cbz	r7, 8003ba0 <USB_EPStartXfer+0x684>
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	5a53      	ldrh	r3, [r2, r1]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	5253      	strh	r3, [r2, r1]
 8003bac:	e4e7      	b.n	800357e <USB_EPStartXfer+0x62>
 8003bae:	3e01      	subs	r6, #1
 8003bb0:	e717      	b.n	80039e2 <USB_EPStartXfer+0x4c6>
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	f47f ace3 	bne.w	800357e <USB_EPStartXfer+0x62>
 8003bb8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	7821      	ldrb	r1, [r4, #0]
 8003bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bc4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	52ea      	strh	r2, [r5, r3]
 8003bcc:	e4d7      	b.n	800357e <USB_EPStartXfer+0x62>
        return HAL_ERROR;
 8003bce:	2001      	movs	r0, #1
 8003bd0:	e4e6      	b.n	80035a0 <USB_EPStartXfer+0x84>

08003bd2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003bd2:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003bd4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003bd8:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8003bdc:	085d      	lsrs	r5, r3, #1
 8003bde:	d012      	beq.n	8003c06 <USB_ReadPMA+0x34>
 8003be0:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003be2:	46a6      	mov	lr, r4
  for (count = n; count != 0U; count--)
 8003be4:	46ac      	mov	ip, r5
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8003be6:	f83e 2b04 	ldrh.w	r2, [lr], #4
 8003bea:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003bec:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003bf0:	0a12      	lsrs	r2, r2, #8
 8003bf2:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (count = n; count != 0U; count--)
 8003bf6:	3002      	adds	r0, #2
 8003bf8:	f1bc 0c01 	subs.w	ip, ip, #1
 8003bfc:	d1f3      	bne.n	8003be6 <USB_ReadPMA+0x14>
    pBuf++;
 8003bfe:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8003c02:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8003c06:	f013 0f01 	tst.w	r3, #1
  {
    RdVal = *pdwVal;
 8003c0a:	bf1c      	itt	ne
 8003c0c:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003c0e:	700b      	strbne	r3, [r1, #0]
  }
}
 8003c10:	bd30      	pop	{r4, r5, pc}

08003c12 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003c12:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003c16:	b183      	cbz	r3, 8003c3a <USBD_CDC_EP0_RxReady+0x28>
{
 8003c18:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c1a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003c1e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003c22:	28ff      	cmp	r0, #255	; 0xff
 8003c24:	d007      	beq.n	8003c36 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003c30:	23ff      	movs	r3, #255	; 0xff
 8003c32:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003c36:	2000      	movs	r0, #0
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	4770      	bx	lr
	...

08003c40 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003c40:	2343      	movs	r3, #67	; 0x43
 8003c42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003c44:	4800      	ldr	r0, [pc, #0]	; (8003c48 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003c46:	4770      	bx	lr
 8003c48:	20000044 	.word	0x20000044

08003c4c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003c4c:	2343      	movs	r3, #67	; 0x43
 8003c4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003c50:	4800      	ldr	r0, [pc, #0]	; (8003c54 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003c52:	4770      	bx	lr
 8003c54:	20000088 	.word	0x20000088

08003c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003c58:	2343      	movs	r3, #67	; 0x43
 8003c5a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003c5c:	4800      	ldr	r0, [pc, #0]	; (8003c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003c5e:	4770      	bx	lr
 8003c60:	200000d8 	.word	0x200000d8

08003c64 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003c64:	230a      	movs	r3, #10
 8003c66:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003c68:	4800      	ldr	r0, [pc, #0]	; (8003c6c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003c6a:	4770      	bx	lr
 8003c6c:	200000cc 	.word	0x200000cc

08003c70 <USBD_CDC_DataOut>:
{
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c74:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003c78:	f001 f86a 	bl	8004d50 <USBD_LL_GetRxDataSize>
 8003c7c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003c80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003c84:	b14b      	cbz	r3, 8003c9a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003c86:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003c90:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003c94:	4798      	blx	r3
    return USBD_OK;
 8003c96:	2000      	movs	r0, #0
}
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	e7fc      	b.n	8003c98 <USBD_CDC_DataOut+0x28>

08003c9e <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003c9e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003ca2:	b312      	cbz	r2, 8003cea <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ca4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003ca8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	b1f3      	cbz	r3, 8003cee <USBD_CDC_DataIn+0x50>
{
 8003cb0:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003cb2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003cb6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003cba:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8003cbe:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003cc0:	fbb3 fcf4 	udiv	ip, r3, r4
 8003cc4:	fb04 331c 	mls	r3, r4, ip, r3
 8003cc8:	b11b      	cbz	r3, 8003cd2 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003cd0:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003cd2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003cd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003cda:	2400      	movs	r4, #0
 8003cdc:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003cde:	4623      	mov	r3, r4
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	f001 f825 	bl	8004d30 <USBD_LL_Transmit>
    return USBD_OK;
 8003ce6:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ce8:	e7f2      	b.n	8003cd0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003cea:	2002      	movs	r0, #2
 8003cec:	4770      	bx	lr
      hcdc->TxState = 0U;
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003cf4:	4770      	bx	lr

08003cf6 <USBD_CDC_Setup>:
{
 8003cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cfe:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003d08:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d0c:	780b      	ldrb	r3, [r1, #0]
 8003d0e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8003d12:	d027      	beq.n	8003d64 <USBD_CDC_Setup+0x6e>
 8003d14:	2d20      	cmp	r5, #32
 8003d16:	d153      	bne.n	8003dc0 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8003d18:	88ca      	ldrh	r2, [r1, #6]
 8003d1a:	b1da      	cbz	r2, 8003d54 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8003d1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d20:	d00c      	beq.n	8003d3c <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d22:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4639      	mov	r1, r7
 8003d2a:	7860      	ldrb	r0, [r4, #1]
 8003d2c:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d2e:	88e2      	ldrh	r2, [r4, #6]
 8003d30:	4639      	mov	r1, r7
 8003d32:	4630      	mov	r0, r6
 8003d34:	f000 fd64 	bl	8004800 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003d38:	2500      	movs	r5, #0
 8003d3a:	e044      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8003d3c:	784b      	ldrb	r3, [r1, #1]
 8003d3e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003d42:	88cb      	ldrh	r3, [r1, #6]
 8003d44:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d48:	88ca      	ldrh	r2, [r1, #6]
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	f000 fd6d 	bl	800482a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003d50:	2500      	movs	r5, #0
 8003d52:	e038      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d54:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	7848      	ldrb	r0, [r1, #1]
 8003d5e:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8003d60:	2500      	movs	r5, #0
 8003d62:	e030      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8003d64:	784f      	ldrb	r7, [r1, #1]
 8003d66:	2f0a      	cmp	r7, #10
 8003d68:	d014      	beq.n	8003d94 <USBD_CDC_Setup+0x9e>
 8003d6a:	2f0b      	cmp	r7, #11
 8003d6c:	d020      	beq.n	8003db0 <USBD_CDC_Setup+0xba>
 8003d6e:	b11f      	cbz	r7, 8003d78 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8003d70:	f000 fa58 	bl	8004224 <USBD_CtlError>
          ret = USBD_FAIL;
 8003d74:	2502      	movs	r5, #2
          break;
 8003d76:	e026      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d003      	beq.n	8003d88 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8003d80:	f000 fa50 	bl	8004224 <USBD_CtlError>
            ret = USBD_FAIL;
 8003d84:	2502      	movs	r5, #2
 8003d86:	e01e      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003d88:	2202      	movs	r2, #2
 8003d8a:	a901      	add	r1, sp, #4
 8003d8c:	f000 fd38 	bl	8004800 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003d90:	463d      	mov	r5, r7
 8003d92:	e018      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d003      	beq.n	8003da4 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003d9c:	f000 fa42 	bl	8004224 <USBD_CtlError>
            ret = USBD_FAIL;
 8003da0:	2502      	movs	r5, #2
 8003da2:	e010      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003da4:	2201      	movs	r2, #1
 8003da6:	f10d 0107 	add.w	r1, sp, #7
 8003daa:	f000 fd29 	bl	8004800 <USBD_CtlSendData>
 8003dae:	e00a      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003db0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d006      	beq.n	8003dc6 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8003db8:	f000 fa34 	bl	8004224 <USBD_CtlError>
            ret = USBD_FAIL;
 8003dbc:	2502      	movs	r5, #2
 8003dbe:	e002      	b.n	8003dc6 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8003dc0:	f000 fa30 	bl	8004224 <USBD_CtlError>
      ret = USBD_FAIL;
 8003dc4:	2502      	movs	r5, #2
}
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	b003      	add	sp, #12
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dcc <USBD_CDC_DeInit>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003dd0:	2181      	movs	r1, #129	; 0x81
 8003dd2:	f000 ff76 	bl	8004cc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003dd6:	2500      	movs	r5, #0
 8003dd8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f000 ff70 	bl	8004cc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003de2:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003de6:	2182      	movs	r1, #130	; 0x82
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 ff6a 	bl	8004cc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003dee:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003df0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003df4:	b14b      	cbz	r3, 8003e0a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003df6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003dfe:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003e02:	f000 ffaf 	bl	8004d64 <USBD_static_free>
    pdev->pClassData = NULL;
 8003e06:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	bd38      	pop	{r3, r4, r5, pc}

08003e0e <USBD_CDC_Init>:
{
 8003e0e:	b570      	push	{r4, r5, r6, lr}
 8003e10:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e12:	7c03      	ldrb	r3, [r0, #16]
 8003e14:	bbab      	cbnz	r3, 8003e82 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	2181      	movs	r1, #129	; 0x81
 8003e1e:	f000 ff45 	bl	8004cac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003e22:	2501      	movs	r5, #1
 8003e24:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 ff3c 	bl	8004cac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003e34:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003e38:	2308      	movs	r3, #8
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	2182      	movs	r1, #130	; 0x82
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 ff34 	bl	8004cac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003e44:	2301      	movs	r3, #1
 8003e46:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003e48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003e4c:	f000 ff86 	bl	8004d5c <USBD_static_malloc>
 8003e50:	4605      	mov	r5, r0
 8003e52:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003e56:	b368      	cbz	r0, 8003eb4 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003e58:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003e66:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e6a:	7c26      	ldrb	r6, [r4, #16]
 8003e6c:	b9ce      	cbnz	r6, 8003ea2 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e72:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003e76:	2101      	movs	r1, #1
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f000 ff61 	bl	8004d40 <USBD_LL_PrepareReceive>
}
 8003e7e:	4630      	mov	r0, r6
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	2202      	movs	r2, #2
 8003e86:	2181      	movs	r1, #129	; 0x81
 8003e88:	f000 ff10 	bl	8004cac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003e8c:	2501      	movs	r5, #1
 8003e8e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	2202      	movs	r2, #2
 8003e94:	4629      	mov	r1, r5
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 ff08 	bl	8004cac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003e9c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8003ea0:	e7ca      	b.n	8003e38 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 ff48 	bl	8004d40 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	e7e4      	b.n	8003e7e <USBD_CDC_Init+0x70>
    ret = 1U;
 8003eb4:	2601      	movs	r6, #1
 8003eb6:	e7e2      	b.n	8003e7e <USBD_CDC_Init+0x70>

08003eb8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003eb8:	b119      	cbz	r1, 8003ec2 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003eba:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003ec2:	2002      	movs	r0, #2
  }

  return ret;
}
 8003ec4:	4770      	bx	lr

08003ec6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ec6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8003eca:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003ece:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	4770      	bx	lr

08003ed6 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ed6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8003eda:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003ede:	2000      	movs	r0, #0
 8003ee0:	4770      	bx	lr

08003ee2 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ee2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8003ee6:	b1a2      	cbz	r2, 8003f12 <USBD_CDC_TransmitPacket+0x30>
{
 8003ee8:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8003eea:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003eee:	b10b      	cbz	r3, 8003ef4 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003ef0:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003ef2:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003efa:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003efe:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003f00:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003f04:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003f08:	2181      	movs	r1, #129	; 0x81
 8003f0a:	f000 ff11 	bl	8004d30 <USBD_LL_Transmit>
      return USBD_OK;
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7ef      	b.n	8003ef2 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8003f12:	2002      	movs	r0, #2
}
 8003f14:	4770      	bx	lr

08003f16 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003f16:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f18:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003f1c:	b192      	cbz	r2, 8003f44 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f1e:	7c04      	ldrb	r4, [r0, #16]
 8003f20:	b944      	cbnz	r4, 8003f34 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f26:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f000 ff08 	bl	8004d40 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	f000 ff00 	bl	8004d40 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003f40:	2400      	movs	r4, #0
 8003f42:	e7f5      	b.n	8003f30 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003f44:	2402      	movs	r4, #2
 8003f46:	e7f3      	b.n	8003f30 <USBD_CDC_ReceivePacket+0x1a>

08003f48 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003f48:	b198      	cbz	r0, 8003f72 <USBD_Init+0x2a>
{
 8003f4a:	b508      	push	{r3, lr}
 8003f4c:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003f4e:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8003f52:	b110      	cbz	r0, 8003f5a <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003f54:	2000      	movs	r0, #0
 8003f56:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003f5a:	b109      	cbz	r1, 8003f60 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003f5c:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f60:	2101      	movs	r1, #1
 8003f62:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8003f66:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fe55 	bl	8004c18 <USBD_LL_Init>

  return USBD_OK;
 8003f6e:	2000      	movs	r0, #0
}
 8003f70:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003f72:	2002      	movs	r0, #2
}
 8003f74:	4770      	bx	lr

08003f76 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003f76:	b119      	cbz	r1, 8003f80 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003f78:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003f80:	2002      	movs	r0, #2
  }

  return status;
}
 8003f82:	4770      	bx	lr

08003f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003f84:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003f86:	f000 fe89 	bl	8004c9c <USBD_LL_Start>

  return USBD_OK;
}
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	bd08      	pop	{r3, pc}

08003f8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f8e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003f90:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f94:	b12b      	cbz	r3, 8003fa2 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	bf18      	it	ne
 8003f9e:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003fa0:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003fa2:	2002      	movs	r0, #2
 8003fa4:	e7fc      	b.n	8003fa0 <USBD_SetClassConfig+0x12>

08003fa6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003fa6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003fa8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4798      	blx	r3

  return USBD_OK;
}
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	bd08      	pop	{r3, pc}

08003fb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003fb8:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f91d 	bl	80041fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003fc8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003fcc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003fd0:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003fd4:	f001 031f 	and.w	r3, r1, #31
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d00e      	beq.n	8003ffa <USBD_LL_SetupStage+0x46>
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d011      	beq.n	8004004 <USBD_LL_SetupStage+0x50>
 8003fe0:	b12b      	cbz	r3, 8003fee <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003fe2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 fe73 	bl	8004cd2 <USBD_LL_StallEP>
      break;
 8003fec:	e003      	b.n	8003ff6 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 f921 	bl	8004238 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f000 fad5 	bl	80045ac <USBD_StdItfReq>
      break;
 8004002:	e7f8      	b.n	8003ff6 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004004:	4629      	mov	r1, r5
 8004006:	4620      	mov	r0, r4
 8004008:	f000 fb00 	bl	800460c <USBD_StdEPReq>
      break;
 800400c:	e7f3      	b.n	8003ff6 <USBD_LL_SetupStage+0x42>

0800400e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800400e:	b538      	push	{r3, r4, r5, lr}
 8004010:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004012:	460d      	mov	r5, r1
 8004014:	bb81      	cbnz	r1, 8004078 <USBD_LL_DataOutStage+0x6a>
 8004016:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004018:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800401c:	2a03      	cmp	r2, #3
 800401e:	d003      	beq.n	8004028 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004020:	2a05      	cmp	r2, #5
 8004022:	d022      	beq.n	800406a <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004024:	4608      	mov	r0, r1
 8004026:	e031      	b.n	800408c <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8004028:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 800402c:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004030:	4291      	cmp	r1, r2
 8004032:	d90b      	bls.n	800404c <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8004034:	1a89      	subs	r1, r1, r2
 8004036:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800403a:	428a      	cmp	r2, r1
 800403c:	bf8c      	ite	hi
 800403e:	b28a      	uxthhi	r2, r1
 8004040:	b292      	uxthls	r2, r2
 8004042:	4619      	mov	r1, r3
 8004044:	f000 fc00 	bl	8004848 <USBD_CtlContinueRx>
  return USBD_OK;
 8004048:	4628      	mov	r0, r5
 800404a:	e01f      	b.n	800408c <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800404c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	b11b      	cbz	r3, 800405c <USBD_LL_DataOutStage+0x4e>
 8004054:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004058:	2a03      	cmp	r2, #3
 800405a:	d004      	beq.n	8004066 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 800405c:	4620      	mov	r0, r4
 800405e:	f000 fbfb 	bl	8004858 <USBD_CtlSendStatus>
  return USBD_OK;
 8004062:	4628      	mov	r0, r5
 8004064:	e012      	b.n	800408c <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8004066:	4798      	blx	r3
 8004068:	e7f8      	b.n	800405c <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800406a:	2100      	movs	r1, #0
 800406c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004070:	f000 fe2f 	bl	8004cd2 <USBD_LL_StallEP>
  return USBD_OK;
 8004074:	4628      	mov	r0, r5
 8004076:	e009      	b.n	800408c <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004078:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	b133      	cbz	r3, 800408e <USBD_LL_DataOutStage+0x80>
 8004080:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004084:	2a03      	cmp	r2, #3
 8004086:	d104      	bne.n	8004092 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8004088:	4798      	blx	r3
  return USBD_OK;
 800408a:	2000      	movs	r0, #0
}
 800408c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800408e:	2002      	movs	r0, #2
 8004090:	e7fc      	b.n	800408c <USBD_LL_DataOutStage+0x7e>
 8004092:	2002      	movs	r0, #2
 8004094:	e7fa      	b.n	800408c <USBD_LL_DataOutStage+0x7e>

08004096 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004096:	b538      	push	{r3, r4, r5, lr}
 8004098:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800409a:	460d      	mov	r5, r1
 800409c:	2900      	cmp	r1, #0
 800409e:	d152      	bne.n	8004146 <USBD_LL_DataInStage+0xb0>
 80040a0:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80040a2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80040a6:	2a02      	cmp	r2, #2
 80040a8:	d00b      	beq.n	80040c2 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80040aa:	f032 0304 	bics.w	r3, r2, #4
 80040ae:	d102      	bne.n	80040b6 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	f000 fe0e 	bl	8004cd2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80040b6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d03e      	beq.n	800413c <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80040be:	4628      	mov	r0, r5
}
 80040c0:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80040c2:	6a01      	ldr	r1, [r0, #32]
 80040c4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80040c6:	4291      	cmp	r1, r2
 80040c8:	d81b      	bhi.n	8004102 <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80040ca:	69c1      	ldr	r1, [r0, #28]
 80040cc:	fbb1 f3f2 	udiv	r3, r1, r2
 80040d0:	fb02 1313 	mls	r3, r2, r3, r1
 80040d4:	b92b      	cbnz	r3, 80040e2 <USBD_LL_DataInStage+0x4c>
 80040d6:	428a      	cmp	r2, r1
 80040d8:	d803      	bhi.n	80040e2 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 80040da:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80040de:	4299      	cmp	r1, r3
 80040e0:	d31c      	bcc.n	800411c <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80040e2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	b11b      	cbz	r3, 80040f2 <USBD_LL_DataInStage+0x5c>
 80040ea:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80040ee:	2a03      	cmp	r2, #3
 80040f0:	d021      	beq.n	8004136 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 fdec 	bl	8004cd2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 fbb7 	bl	800486e <USBD_CtlReceiveStatus>
 8004100:	e7d9      	b.n	80040b6 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8004102:	1a8a      	subs	r2, r1, r2
 8004104:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004106:	b292      	uxth	r2, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f000 fb86 	bl	800481a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800410e:	2300      	movs	r3, #0
 8004110:	461a      	mov	r2, r3
 8004112:	4619      	mov	r1, r3
 8004114:	4620      	mov	r0, r4
 8004116:	f000 fe13 	bl	8004d40 <USBD_LL_PrepareReceive>
 800411a:	e7cc      	b.n	80040b6 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800411c:	2200      	movs	r2, #0
 800411e:	4611      	mov	r1, r2
 8004120:	f000 fb7b 	bl	800481a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004124:	2100      	movs	r1, #0
 8004126:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800412a:	460b      	mov	r3, r1
 800412c:	460a      	mov	r2, r1
 800412e:	4620      	mov	r0, r4
 8004130:	f000 fe06 	bl	8004d40 <USBD_LL_PrepareReceive>
 8004134:	e7bf      	b.n	80040b6 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8004136:	4620      	mov	r0, r4
 8004138:	4798      	blx	r3
 800413a:	e7da      	b.n	80040f2 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8004142:	4628      	mov	r0, r5
 8004144:	e7bc      	b.n	80040c0 <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004146:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	b133      	cbz	r3, 800415c <USBD_LL_DataInStage+0xc6>
 800414e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004152:	2a03      	cmp	r2, #3
 8004154:	d104      	bne.n	8004160 <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8004156:	4798      	blx	r3
  return USBD_OK;
 8004158:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800415a:	e7b1      	b.n	80040c0 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 800415c:	2002      	movs	r0, #2
 800415e:	e7af      	b.n	80040c0 <USBD_LL_DataInStage+0x2a>
 8004160:	2002      	movs	r0, #2
 8004162:	e7ad      	b.n	80040c0 <USBD_LL_DataInStage+0x2a>

08004164 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004168:	2340      	movs	r3, #64	; 0x40
 800416a:	2200      	movs	r2, #0
 800416c:	4611      	mov	r1, r2
 800416e:	f000 fd9d 	bl	8004cac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004172:	2501      	movs	r5, #1
 8004174:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004178:	2640      	movs	r6, #64	; 0x40
 800417a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800417e:	4633      	mov	r3, r6
 8004180:	2200      	movs	r2, #0
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	4620      	mov	r0, r4
 8004186:	f000 fd91 	bl	8004cac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800418a:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800418c:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800418e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004192:	2300      	movs	r3, #0
 8004194:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004198:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800419a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 800419e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80041a2:	b12b      	cbz	r3, 80041b0 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80041a4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2100      	movs	r1, #0
 80041ac:	4620      	mov	r0, r4
 80041ae:	4798      	blx	r3
  }

  return USBD_OK;
}
 80041b0:	2000      	movs	r0, #0
 80041b2:	bd70      	pop	{r4, r5, r6, pc}

080041b4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80041b4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80041b6:	2000      	movs	r0, #0
 80041b8:	4770      	bx	lr

080041ba <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80041ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041be:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80041c2:	2304      	movs	r3, #4
 80041c4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80041c8:	2000      	movs	r0, #0
 80041ca:	4770      	bx	lr

080041cc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80041cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041d0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80041d2:	bf04      	itt	eq
 80041d4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80041d8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80041dc:	2000      	movs	r0, #0
 80041de:	4770      	bx	lr

080041e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80041e0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d001      	beq.n	80041ee <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80041ea:	2000      	movs	r0, #0
 80041ec:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80041ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f8      	beq.n	80041ea <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80041f8:	4798      	blx	r3
 80041fa:	e7f6      	b.n	80041ea <USBD_LL_SOF+0xa>

080041fc <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 80041fc:	780b      	ldrb	r3, [r1, #0]
 80041fe:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004200:	784b      	ldrb	r3, [r1, #1]
 8004202:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004204:	78ca      	ldrb	r2, [r1, #3]
 8004206:	788b      	ldrb	r3, [r1, #2]
 8004208:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800420c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800420e:	794a      	ldrb	r2, [r1, #5]
 8004210:	790b      	ldrb	r3, [r1, #4]
 8004212:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004216:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004218:	79ca      	ldrb	r2, [r1, #7]
 800421a:	798b      	ldrb	r3, [r1, #6]
 800421c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004220:	80c3      	strh	r3, [r0, #6]

}
 8004222:	4770      	bx	lr

08004224 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004224:	b510      	push	{r4, lr}
 8004226:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	f000 fd52 	bl	8004cd2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800422e:	2100      	movs	r1, #0
 8004230:	4620      	mov	r0, r4
 8004232:	f000 fd4e 	bl	8004cd2 <USBD_LL_StallEP>
}
 8004236:	bd10      	pop	{r4, pc}

08004238 <USBD_StdDevReq>:
{
 8004238:	b530      	push	{r4, r5, lr}
 800423a:	b083      	sub	sp, #12
 800423c:	4605      	mov	r5, r0
 800423e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004240:	780b      	ldrb	r3, [r1, #0]
 8004242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004246:	2b20      	cmp	r3, #32
 8004248:	d005      	beq.n	8004256 <USBD_StdDevReq+0x1e>
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d003      	beq.n	8004256 <USBD_StdDevReq+0x1e>
 800424e:	b15b      	cbz	r3, 8004268 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8004250:	f7ff ffe8 	bl	8004224 <USBD_CtlError>
      break;
 8004254:	e005      	b.n	8004262 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8004256:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	4798      	blx	r3
}
 8004262:	2000      	movs	r0, #0
 8004264:	b003      	add	sp, #12
 8004266:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8004268:	784b      	ldrb	r3, [r1, #1]
 800426a:	2b09      	cmp	r3, #9
 800426c:	f200 8198 	bhi.w	80045a0 <USBD_StdDevReq+0x368>
 8004270:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004274:	0184015f 	.word	0x0184015f
 8004278:	017b0196 	.word	0x017b0196
 800427c:	00c90196 	.word	0x00c90196
 8004280:	0196000a 	.word	0x0196000a
 8004284:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800428e:	884a      	ldrh	r2, [r1, #2]
 8004290:	0a13      	lsrs	r3, r2, #8
 8004292:	3b01      	subs	r3, #1
 8004294:	2b06      	cmp	r3, #6
 8004296:	f200 80a4 	bhi.w	80043e2 <USBD_StdDevReq+0x1aa>
 800429a:	e8df f003 	tbb	[pc, r3]
 800429e:	1804      	.short	0x1804
 80042a0:	86a2a22c 	.word	0x86a2a22c
 80042a4:	93          	.byte	0x93
 80042a5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80042a6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f10d 0106 	add.w	r1, sp, #6
 80042b0:	7c00      	ldrb	r0, [r0, #16]
 80042b2:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80042b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	f000 809f 	beq.w	80043fc <USBD_StdDevReq+0x1c4>
 80042be:	88e3      	ldrh	r3, [r4, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 8092 	bne.w	80043ea <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 fac6 	bl	8004858 <USBD_CtlSendStatus>
 80042cc:	e7c9      	b.n	8004262 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042ce:	7c03      	ldrb	r3, [r0, #16]
 80042d0:	b943      	cbnz	r3, 80042e4 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80042d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	f10d 0006 	add.w	r0, sp, #6
 80042dc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042de:	2302      	movs	r3, #2
 80042e0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80042e2:	e7e7      	b.n	80042b4 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80042e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	f10d 0006 	add.w	r0, sp, #6
 80042ee:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042f0:	2302      	movs	r3, #2
 80042f2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80042f4:	e7de      	b.n	80042b4 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	2a05      	cmp	r2, #5
 80042fa:	d852      	bhi.n	80043a2 <USBD_StdDevReq+0x16a>
 80042fc:	e8df f002 	tbb	[pc, r2]
 8004300:	2a1d1003 	.word	0x2a1d1003
 8004304:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004306:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	b123      	cbz	r3, 8004318 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800430e:	f10d 0106 	add.w	r1, sp, #6
 8004312:	7c00      	ldrb	r0, [r0, #16]
 8004314:	4798      	blx	r3
  if (err != 0U)
 8004316:	e7cd      	b.n	80042b4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004318:	4621      	mov	r1, r4
 800431a:	f7ff ff83 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 800431e:	e7a0      	b.n	8004262 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004320:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	b123      	cbz	r3, 8004332 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004328:	f10d 0106 	add.w	r1, sp, #6
 800432c:	7c00      	ldrb	r0, [r0, #16]
 800432e:	4798      	blx	r3
  if (err != 0U)
 8004330:	e7c0      	b.n	80042b4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004332:	4621      	mov	r1, r4
 8004334:	f7ff ff76 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 8004338:	e793      	b.n	8004262 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800433a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	b123      	cbz	r3, 800434c <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004342:	f10d 0106 	add.w	r1, sp, #6
 8004346:	7c00      	ldrb	r0, [r0, #16]
 8004348:	4798      	blx	r3
  if (err != 0U)
 800434a:	e7b3      	b.n	80042b4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800434c:	4621      	mov	r1, r4
 800434e:	f7ff ff69 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 8004352:	e786      	b.n	8004262 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004354:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	b123      	cbz	r3, 8004366 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800435c:	f10d 0106 	add.w	r1, sp, #6
 8004360:	7c00      	ldrb	r0, [r0, #16]
 8004362:	4798      	blx	r3
  if (err != 0U)
 8004364:	e7a6      	b.n	80042b4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004366:	4621      	mov	r1, r4
 8004368:	f7ff ff5c 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 800436c:	e779      	b.n	8004262 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800436e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	b123      	cbz	r3, 8004380 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004376:	f10d 0106 	add.w	r1, sp, #6
 800437a:	7c00      	ldrb	r0, [r0, #16]
 800437c:	4798      	blx	r3
  if (err != 0U)
 800437e:	e799      	b.n	80042b4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004380:	4621      	mov	r1, r4
 8004382:	f7ff ff4f 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 8004386:	e76c      	b.n	8004262 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004388:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	b123      	cbz	r3, 800439a <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004390:	f10d 0106 	add.w	r1, sp, #6
 8004394:	7c00      	ldrb	r0, [r0, #16]
 8004396:	4798      	blx	r3
  if (err != 0U)
 8004398:	e78c      	b.n	80042b4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800439a:	4621      	mov	r1, r4
 800439c:	f7ff ff42 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 80043a0:	e75f      	b.n	8004262 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80043a2:	4621      	mov	r1, r4
 80043a4:	f7ff ff3e 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 80043a8:	e75b      	b.n	8004262 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043aa:	7c03      	ldrb	r3, [r0, #16]
 80043ac:	b933      	cbnz	r3, 80043bc <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80043ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	f10d 0006 	add.w	r0, sp, #6
 80043b8:	4798      	blx	r3
  if (err != 0U)
 80043ba:	e77b      	b.n	80042b4 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 80043bc:	4621      	mov	r1, r4
 80043be:	f7ff ff31 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 80043c2:	e74e      	b.n	8004262 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043c4:	7c03      	ldrb	r3, [r0, #16]
 80043c6:	b943      	cbnz	r3, 80043da <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80043c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f10d 0006 	add.w	r0, sp, #6
 80043d2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80043d4:	2307      	movs	r3, #7
 80043d6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80043d8:	e76c      	b.n	80042b4 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 80043da:	4621      	mov	r1, r4
 80043dc:	f7ff ff22 	bl	8004224 <USBD_CtlError>
  if (err != 0U)
 80043e0:	e73f      	b.n	8004262 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80043e2:	4621      	mov	r1, r4
 80043e4:	f7ff ff1e 	bl	8004224 <USBD_CtlError>
    return;
 80043e8:	e73b      	b.n	8004262 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf28      	it	cs
 80043ee:	461a      	movcs	r2, r3
 80043f0:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80043f4:	4601      	mov	r1, r0
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 fa02 	bl	8004800 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80043fc:	88e3      	ldrh	r3, [r4, #6]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f47f af2f 	bne.w	8004262 <USBD_StdDevReq+0x2a>
 8004404:	e75f      	b.n	80042c6 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004406:	888b      	ldrh	r3, [r1, #4]
 8004408:	b9eb      	cbnz	r3, 8004446 <USBD_StdDevReq+0x20e>
 800440a:	88cb      	ldrh	r3, [r1, #6]
 800440c:	b9db      	cbnz	r3, 8004446 <USBD_StdDevReq+0x20e>
 800440e:	884b      	ldrh	r3, [r1, #2]
 8004410:	2b7f      	cmp	r3, #127	; 0x7f
 8004412:	d818      	bhi.n	8004446 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004414:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004418:	2a03      	cmp	r2, #3
 800441a:	d00d      	beq.n	8004438 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800441c:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 800441e:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004422:	4621      	mov	r1, r4
 8004424:	f000 fc7c 	bl	8004d20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004428:	4628      	mov	r0, r5
 800442a:	f000 fa15 	bl	8004858 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800442e:	b134      	cbz	r4, 800443e <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004430:	2302      	movs	r3, #2
 8004432:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004436:	e714      	b.n	8004262 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004438:	f7ff fef4 	bl	8004224 <USBD_CtlError>
 800443c:	e711      	b.n	8004262 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800443e:	2301      	movs	r3, #1
 8004440:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8004444:	e70d      	b.n	8004262 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f7ff feeb 	bl	8004224 <USBD_CtlError>
 800444e:	e708      	b.n	8004262 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8004450:	788b      	ldrb	r3, [r1, #2]
 8004452:	4a55      	ldr	r2, [pc, #340]	; (80045a8 <USBD_StdDevReq+0x370>)
 8004454:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004456:	2b01      	cmp	r3, #1
 8004458:	d80d      	bhi.n	8004476 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 800445a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800445e:	2a02      	cmp	r2, #2
 8004460:	d00c      	beq.n	800447c <USBD_StdDevReq+0x244>
 8004462:	2a03      	cmp	r2, #3
 8004464:	d020      	beq.n	80044a8 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8004466:	f7ff fedd 	bl	8004224 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800446a:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <USBD_StdDevReq+0x370>)
 800446c:	7819      	ldrb	r1, [r3, #0]
 800446e:	4628      	mov	r0, r5
 8004470:	f7ff fd99 	bl	8003fa6 <USBD_ClrClassConfig>
        break;
 8004474:	e6f5      	b.n	8004262 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004476:	f7ff fed5 	bl	8004224 <USBD_CtlError>
 800447a:	e6f2      	b.n	8004262 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 800447c:	b18b      	cbz	r3, 80044a2 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 800447e:	2101      	movs	r1, #1
 8004480:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004482:	2303      	movs	r3, #3
 8004484:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004488:	f7ff fd81 	bl	8003f8e <USBD_SetClassConfig>
 800448c:	2802      	cmp	r0, #2
 800448e:	d003      	beq.n	8004498 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f9e1 	bl	8004858 <USBD_CtlSendStatus>
 8004496:	e6e4      	b.n	8004262 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f7ff fec2 	bl	8004224 <USBD_CtlError>
            return;
 80044a0:	e6df      	b.n	8004262 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80044a2:	f000 f9d9 	bl	8004858 <USBD_CtlSendStatus>
 80044a6:	e6dc      	b.n	8004262 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 80044a8:	b18b      	cbz	r3, 80044ce <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 80044aa:	6841      	ldr	r1, [r0, #4]
 80044ac:	2901      	cmp	r1, #1
 80044ae:	d01e      	beq.n	80044ee <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80044b0:	b2c9      	uxtb	r1, r1
 80044b2:	f7ff fd78 	bl	8003fa6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80044b6:	4b3c      	ldr	r3, [pc, #240]	; (80045a8 <USBD_StdDevReq+0x370>)
 80044b8:	7819      	ldrb	r1, [r3, #0]
 80044ba:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80044bc:	4628      	mov	r0, r5
 80044be:	f7ff fd66 	bl	8003f8e <USBD_SetClassConfig>
 80044c2:	2802      	cmp	r0, #2
 80044c4:	d00e      	beq.n	80044e4 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f9c6 	bl	8004858 <USBD_CtlSendStatus>
 80044cc:	e6c9      	b.n	8004262 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80044ce:	2302      	movs	r3, #2
 80044d0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80044d4:	2100      	movs	r1, #0
 80044d6:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80044d8:	f7ff fd65 	bl	8003fa6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80044dc:	4628      	mov	r0, r5
 80044de:	f000 f9bb 	bl	8004858 <USBD_CtlSendStatus>
 80044e2:	e6be      	b.n	8004262 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7ff fe9c 	bl	8004224 <USBD_CtlError>
            return;
 80044ec:	e6b9      	b.n	8004262 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80044ee:	f000 f9b3 	bl	8004858 <USBD_CtlSendStatus>
 80044f2:	e6b6      	b.n	8004262 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 80044f4:	88cb      	ldrh	r3, [r1, #6]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10a      	bne.n	8004510 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 80044fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d909      	bls.n	8004516 <USBD_StdDevReq+0x2de>
 8004502:	2b03      	cmp	r3, #3
 8004504:	d108      	bne.n	8004518 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004506:	2201      	movs	r2, #1
 8004508:	1d01      	adds	r1, r0, #4
 800450a:	f000 f979 	bl	8004800 <USBD_CtlSendData>
        break;
 800450e:	e6a8      	b.n	8004262 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004510:	f7ff fe88 	bl	8004224 <USBD_CtlError>
 8004514:	e6a5      	b.n	8004262 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8004516:	b923      	cbnz	r3, 8004522 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8004518:	4621      	mov	r1, r4
 800451a:	4628      	mov	r0, r5
 800451c:	f7ff fe82 	bl	8004224 <USBD_CtlError>
        break;
 8004520:	e69f      	b.n	8004262 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8004522:	4601      	mov	r1, r0
 8004524:	2300      	movs	r3, #0
 8004526:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800452a:	2201      	movs	r2, #1
 800452c:	f000 f968 	bl	8004800 <USBD_CtlSendData>
        break;
 8004530:	e697      	b.n	8004262 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004532:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004536:	3b01      	subs	r3, #1
 8004538:	2b02      	cmp	r3, #2
 800453a:	d813      	bhi.n	8004564 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 800453c:	88cb      	ldrh	r3, [r1, #6]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d10d      	bne.n	800455e <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004542:	2301      	movs	r3, #1
 8004544:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004546:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800454a:	b10b      	cbz	r3, 8004550 <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800454c:	2303      	movs	r3, #3
 800454e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004550:	2202      	movs	r2, #2
 8004552:	f105 010c 	add.w	r1, r5, #12
 8004556:	4628      	mov	r0, r5
 8004558:	f000 f952 	bl	8004800 <USBD_CtlSendData>
      break;
 800455c:	e681      	b.n	8004262 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 800455e:	f7ff fe61 	bl	8004224 <USBD_CtlError>
        break;
 8004562:	e67e      	b.n	8004262 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004564:	f7ff fe5e 	bl	8004224 <USBD_CtlError>
      break;
 8004568:	e67b      	b.n	8004262 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800456a:	884b      	ldrh	r3, [r1, #2]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f47f ae78 	bne.w	8004262 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8004572:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004576:	f000 f96f 	bl	8004858 <USBD_CtlSendStatus>
 800457a:	e672      	b.n	8004262 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800457c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004580:	3b01      	subs	r3, #1
 8004582:	2b02      	cmp	r3, #2
 8004584:	d809      	bhi.n	800459a <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004586:	884b      	ldrh	r3, [r1, #2]
 8004588:	2b01      	cmp	r3, #1
 800458a:	f47f ae6a 	bne.w	8004262 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004594:	f000 f960 	bl	8004858 <USBD_CtlSendStatus>
 8004598:	e663      	b.n	8004262 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800459a:	f7ff fe43 	bl	8004224 <USBD_CtlError>
      break;
 800459e:	e660      	b.n	8004262 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80045a0:	f7ff fe40 	bl	8004224 <USBD_CtlError>
          break;
 80045a4:	e65d      	b.n	8004262 <USBD_StdDevReq+0x2a>
 80045a6:	bf00      	nop
 80045a8:	2000036c 	.word	0x2000036c

080045ac <USBD_StdItfReq>:
{
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4605      	mov	r5, r0
 80045b0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045b2:	780b      	ldrb	r3, [r1, #0]
 80045b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80045b8:	2a40      	cmp	r2, #64	; 0x40
 80045ba:	d006      	beq.n	80045ca <USBD_StdItfReq+0x1e>
 80045bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045c0:	d003      	beq.n	80045ca <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80045c2:	f7ff fe2f 	bl	8004224 <USBD_CtlError>
}
 80045c6:	2000      	movs	r0, #0
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80045ca:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80045ce:	3b01      	subs	r3, #1
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d816      	bhi.n	8004602 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80045d4:	7923      	ldrb	r3, [r4, #4]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d80e      	bhi.n	80045f8 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80045da:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80045e6:	88e3      	ldrh	r3, [r4, #6]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ec      	bne.n	80045c6 <USBD_StdItfReq+0x1a>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1ea      	bne.n	80045c6 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f931 	bl	8004858 <USBD_CtlSendStatus>
 80045f6:	e7e6      	b.n	80045c6 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f7ff fe12 	bl	8004224 <USBD_CtlError>
 8004600:	e7e1      	b.n	80045c6 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8004602:	4621      	mov	r1, r4
 8004604:	4628      	mov	r0, r5
 8004606:	f7ff fe0d 	bl	8004224 <USBD_CtlError>
          break;
 800460a:	e7dc      	b.n	80045c6 <USBD_StdItfReq+0x1a>

0800460c <USBD_StdEPReq>:
{
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004610:	780b      	ldrb	r3, [r1, #0]
 8004612:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004616:	2b20      	cmp	r3, #32
 8004618:	d005      	beq.n	8004626 <USBD_StdEPReq+0x1a>
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d003      	beq.n	8004626 <USBD_StdEPReq+0x1a>
 800461e:	b14b      	cbz	r3, 8004634 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8004620:	f7ff fe00 	bl	8004224 <USBD_CtlError>
      break;
 8004624:	e004      	b.n	8004630 <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 8004626:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4620      	mov	r0, r4
 800462e:	4798      	blx	r3
}
 8004630:	2000      	movs	r0, #0
 8004632:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8004634:	888a      	ldrh	r2, [r1, #4]
 8004636:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8004638:	784b      	ldrb	r3, [r1, #1]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d031      	beq.n	80046a2 <USBD_StdEPReq+0x96>
 800463e:	2b03      	cmp	r3, #3
 8004640:	d005      	beq.n	800464e <USBD_StdEPReq+0x42>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d056      	beq.n	80046f4 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff fdec 	bl	8004224 <USBD_CtlError>
          break;
 800464c:	e7f0      	b.n	8004630 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800464e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004652:	2b02      	cmp	r3, #2
 8004654:	d005      	beq.n	8004662 <USBD_StdEPReq+0x56>
 8004656:	2b03      	cmp	r3, #3
 8004658:	d013      	beq.n	8004682 <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 800465a:	4620      	mov	r0, r4
 800465c:	f7ff fde2 	bl	8004224 <USBD_CtlError>
              break;
 8004660:	e7e6      	b.n	8004630 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004662:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004666:	d008      	beq.n	800467a <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004668:	4601      	mov	r1, r0
 800466a:	4620      	mov	r0, r4
 800466c:	f000 fb31 	bl	8004cd2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	4620      	mov	r0, r4
 8004674:	f000 fb2d 	bl	8004cd2 <USBD_LL_StallEP>
 8004678:	e7da      	b.n	8004630 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff fdd2 	bl	8004224 <USBD_CtlError>
 8004680:	e7d6      	b.n	8004630 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004682:	884b      	ldrh	r3, [r1, #2]
 8004684:	b923      	cbnz	r3, 8004690 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8004686:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800468a:	d001      	beq.n	8004690 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800468c:	88cb      	ldrh	r3, [r1, #6]
 800468e:	b11b      	cbz	r3, 8004698 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8004690:	4620      	mov	r0, r4
 8004692:	f000 f8e1 	bl	8004858 <USBD_CtlSendStatus>
              break;
 8004696:	e7cb      	b.n	8004630 <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004698:	4601      	mov	r1, r0
 800469a:	4620      	mov	r0, r4
 800469c:	f000 fb19 	bl	8004cd2 <USBD_LL_StallEP>
 80046a0:	e7f6      	b.n	8004690 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 80046a2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d005      	beq.n	80046b6 <USBD_StdEPReq+0xaa>
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d013      	beq.n	80046d6 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 80046ae:	4620      	mov	r0, r4
 80046b0:	f7ff fdb8 	bl	8004224 <USBD_CtlError>
              break;
 80046b4:	e7bc      	b.n	8004630 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046b6:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80046ba:	d008      	beq.n	80046ce <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 80046bc:	4601      	mov	r1, r0
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 fb07 	bl	8004cd2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 fb03 	bl	8004cd2 <USBD_LL_StallEP>
 80046cc:	e7b0      	b.n	8004630 <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7ff fda8 	bl	8004224 <USBD_CtlError>
 80046d4:	e7ac      	b.n	8004630 <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80046d6:	884b      	ldrh	r3, [r1, #2]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1a9      	bne.n	8004630 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 80046dc:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80046e0:	d103      	bne.n	80046ea <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 f8b8 	bl	8004858 <USBD_CtlSendStatus>
 80046e8:	e7a2      	b.n	8004630 <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80046ea:	4601      	mov	r1, r0
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 faf8 	bl	8004ce2 <USBD_LL_ClearStallEP>
 80046f2:	e7f6      	b.n	80046e2 <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 80046f4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d005      	beq.n	8004708 <USBD_StdEPReq+0xfc>
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d018      	beq.n	8004732 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff fd8f 	bl	8004224 <USBD_CtlError>
              break;
 8004706:	e793      	b.n	8004630 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004708:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800470c:	d003      	beq.n	8004716 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 800470e:	4620      	mov	r0, r4
 8004710:	f7ff fd88 	bl	8004224 <USBD_CtlError>
                break;
 8004714:	e78c      	b.n	8004630 <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004716:	f012 0f80 	tst.w	r2, #128	; 0x80
 800471a:	bf14      	ite	ne
 800471c:	f104 0114 	addne.w	r1, r4, #20
 8004720:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8004724:	2300      	movs	r3, #0
 8004726:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004728:	2202      	movs	r2, #2
 800472a:	4620      	mov	r0, r4
 800472c:	f000 f868 	bl	8004800 <USBD_CtlSendData>
              break;
 8004730:	e77e      	b.n	8004630 <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 8004732:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004736:	d11b      	bne.n	8004770 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004738:	f000 030f 	and.w	r3, r0, #15
 800473c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004740:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004744:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004748:	b333      	cbz	r3, 8004798 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800474a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800474e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004752:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8004756:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800475a:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800475e:	d11f      	bne.n	80047a0 <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 8004760:	2300      	movs	r3, #0
 8004762:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004764:	2202      	movs	r2, #2
 8004766:	4629      	mov	r1, r5
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f849 	bl	8004800 <USBD_CtlSendData>
              break;
 800476e:	e75f      	b.n	8004630 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004770:	f000 030f 	and.w	r3, r0, #15
 8004774:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004778:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	b13b      	cbz	r3, 8004790 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004780:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8004784:	3501      	adds	r5, #1
 8004786:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800478a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800478e:	e7e4      	b.n	800475a <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 8004790:	4620      	mov	r0, r4
 8004792:	f7ff fd47 	bl	8004224 <USBD_CtlError>
                  break;
 8004796:	e74b      	b.n	8004630 <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8004798:	4620      	mov	r0, r4
 800479a:	f7ff fd43 	bl	8004224 <USBD_CtlError>
                  break;
 800479e:	e747      	b.n	8004630 <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80047a0:	4601      	mov	r1, r0
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 faa5 	bl	8004cf2 <USBD_LL_IsStallEP>
 80047a8:	b110      	cbz	r0, 80047b0 <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 80047aa:	2301      	movs	r3, #1
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d9      	b.n	8004764 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	e7d6      	b.n	8004764 <USBD_StdEPReq+0x158>

080047b6 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80047b6:	b310      	cbz	r0, 80047fe <USBD_GetString+0x48>
{
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80047bc:	7803      	ldrb	r3, [r0, #0]
 80047be:	b143      	cbz	r3, 80047d2 <USBD_GetString+0x1c>
 80047c0:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 80047c4:	eb00 030e 	add.w	r3, r0, lr
 80047c8:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 80047ca:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	d1f8      	bne.n	80047c4 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	3302      	adds	r3, #2
 80047d6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80047d8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80047da:	2303      	movs	r3, #3
 80047dc:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 80047de:	f89c 0000 	ldrb.w	r0, [ip]
 80047e2:	b158      	cbz	r0, 80047fc <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80047e4:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80047e6:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 80047ee:	3302      	adds	r3, #2
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 80047f4:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1f5      	bne.n	80047e8 <USBD_GetString+0x32>
}
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	4770      	bx	lr

08004800 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004800:	b508      	push	{r3, lr}
 8004802:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004804:	2202      	movs	r2, #2
 8004806:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800480a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800480c:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800480e:	460a      	mov	r2, r1
 8004810:	2100      	movs	r1, #0
 8004812:	f000 fa8d 	bl	8004d30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004816:	2000      	movs	r0, #0
 8004818:	bd08      	pop	{r3, pc}

0800481a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800481a:	b508      	push	{r3, lr}
 800481c:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800481e:	460a      	mov	r2, r1
 8004820:	2100      	movs	r1, #0
 8004822:	f000 fa85 	bl	8004d30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004826:	2000      	movs	r0, #0
 8004828:	bd08      	pop	{r3, pc}

0800482a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800482a:	b508      	push	{r3, lr}
 800482c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800482e:	2203      	movs	r2, #3
 8004830:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004834:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004838:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800483c:	460a      	mov	r2, r1
 800483e:	2100      	movs	r1, #0
 8004840:	f000 fa7e 	bl	8004d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004844:	2000      	movs	r0, #0
 8004846:	bd08      	pop	{r3, pc}

08004848 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004848:	b508      	push	{r3, lr}
 800484a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800484c:	460a      	mov	r2, r1
 800484e:	2100      	movs	r1, #0
 8004850:	f000 fa76 	bl	8004d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004854:	2000      	movs	r0, #0
 8004856:	bd08      	pop	{r3, pc}

08004858 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004858:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800485a:	2304      	movs	r3, #4
 800485c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004860:	2300      	movs	r3, #0
 8004862:	461a      	mov	r2, r3
 8004864:	4619      	mov	r1, r3
 8004866:	f000 fa63 	bl	8004d30 <USBD_LL_Transmit>

  return USBD_OK;
}
 800486a:	2000      	movs	r0, #0
 800486c:	bd08      	pop	{r3, pc}

0800486e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800486e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004870:	2305      	movs	r3, #5
 8004872:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004876:	2300      	movs	r3, #0
 8004878:	461a      	mov	r2, r3
 800487a:	4619      	mov	r1, r3
 800487c:	f000 fa60 	bl	8004d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004880:	2000      	movs	r0, #0
 8004882:	bd08      	pop	{r3, pc}

08004884 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004886:	2200      	movs	r2, #0
 8004888:	490f      	ldr	r1, [pc, #60]	; (80048c8 <MX_USB_DEVICE_Init+0x44>)
 800488a:	4810      	ldr	r0, [pc, #64]	; (80048cc <MX_USB_DEVICE_Init+0x48>)
 800488c:	f7ff fb5c 	bl	8003f48 <USBD_Init>
 8004890:	b970      	cbnz	r0, 80048b0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004892:	490f      	ldr	r1, [pc, #60]	; (80048d0 <MX_USB_DEVICE_Init+0x4c>)
 8004894:	480d      	ldr	r0, [pc, #52]	; (80048cc <MX_USB_DEVICE_Init+0x48>)
 8004896:	f7ff fb6e 	bl	8003f76 <USBD_RegisterClass>
 800489a:	b960      	cbnz	r0, 80048b6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800489c:	490d      	ldr	r1, [pc, #52]	; (80048d4 <MX_USB_DEVICE_Init+0x50>)
 800489e:	480b      	ldr	r0, [pc, #44]	; (80048cc <MX_USB_DEVICE_Init+0x48>)
 80048a0:	f7ff fb0a 	bl	8003eb8 <USBD_CDC_RegisterInterface>
 80048a4:	b950      	cbnz	r0, 80048bc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80048a6:	4809      	ldr	r0, [pc, #36]	; (80048cc <MX_USB_DEVICE_Init+0x48>)
 80048a8:	f7ff fb6c 	bl	8003f84 <USBD_Start>
 80048ac:	b948      	cbnz	r0, 80048c2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80048ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 80048b0:	f7fb fd6f 	bl	8000392 <Error_Handler>
 80048b4:	e7ed      	b.n	8004892 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80048b6:	f7fb fd6c 	bl	8000392 <Error_Handler>
 80048ba:	e7ef      	b.n	800489c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80048bc:	f7fb fd69 	bl	8000392 <Error_Handler>
 80048c0:	e7f1      	b.n	80048a6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80048c2:	f7fb fd66 	bl	8000392 <Error_Handler>
}
 80048c6:	e7f2      	b.n	80048ae <MX_USB_DEVICE_Init+0x2a>
 80048c8:	20000138 	.word	0x20000138
 80048cc:	20000370 	.word	0x20000370
 80048d0:	2000000c 	.word	0x2000000c
 80048d4:	2000011c 	.word	0x2000011c

080048d8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80048d8:	2000      	movs	r0, #0
 80048da:	4770      	bx	lr

080048dc <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80048dc:	2820      	cmp	r0, #32
 80048de:	d003      	beq.n	80048e8 <CDC_Control_FS+0xc>
 80048e0:	2821      	cmp	r0, #33	; 0x21
 80048e2:	d014      	beq.n	800490e <CDC_Control_FS+0x32>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80048e4:	2000      	movs	r0, #0
 80048e6:	4770      	bx	lr
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <CDC_Control_FS+0x54>)
 80048ea:	7848      	ldrb	r0, [r1, #1]
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80048ec:	788b      	ldrb	r3, [r1, #2]
 80048ee:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80048f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048f4:	7808      	ldrb	r0, [r1, #0]
 80048f6:	4303      	orrs	r3, r0
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80048f8:	78c8      	ldrb	r0, [r1, #3]
 80048fa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80048fe:	6013      	str	r3, [r2, #0]
      linecoding.format     = pbuf[4];
 8004900:	790b      	ldrb	r3, [r1, #4]
 8004902:	7113      	strb	r3, [r2, #4]
      linecoding.paritytype = pbuf[5];
 8004904:	794b      	ldrb	r3, [r1, #5]
 8004906:	7153      	strb	r3, [r2, #5]
      linecoding.datatype   = pbuf[6];
 8004908:	798b      	ldrb	r3, [r1, #6]
 800490a:	7193      	strb	r3, [r2, #6]
    break;
 800490c:	e7ea      	b.n	80048e4 <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <CDC_Control_FS+0x54>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	0a12      	lsrs	r2, r2, #8
 8004918:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800491a:	885a      	ldrh	r2, [r3, #2]
 800491c:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800491e:	78da      	ldrb	r2, [r3, #3]
 8004920:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = linecoding.format;
 8004922:	791a      	ldrb	r2, [r3, #4]
 8004924:	710a      	strb	r2, [r1, #4]
      pbuf[5] = linecoding.paritytype;
 8004926:	795a      	ldrb	r2, [r3, #5]
 8004928:	714a      	strb	r2, [r1, #5]
      pbuf[6] = linecoding.datatype;
 800492a:	799b      	ldrb	r3, [r3, #6]
 800492c:	718b      	strb	r3, [r1, #6]
    break;
 800492e:	e7d9      	b.n	80048e4 <CDC_Control_FS+0x8>
 8004930:	2000012c 	.word	0x2000012c

08004934 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	4607      	mov	r7, r0
 800493a:	4688      	mov	r8, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800493c:	4c25      	ldr	r4, [pc, #148]	; (80049d4 <CDC_Receive_FS+0xa0>)
 800493e:	4601      	mov	r1, r0
 8004940:	4620      	mov	r0, r4
 8004942:	f7ff fac8 	bl	8003ed6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004946:	4620      	mov	r0, r4
 8004948:	f7ff fae5 	bl	8003f16 <USBD_CDC_ReceivePacket>

  //COBS decode
  for(uint32_t i=0;i<*Len;i++)
 800494c:	f8d8 3000 	ldr.w	r3, [r8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d03b      	beq.n	80049cc <CDC_Receive_FS+0x98>
 8004954:	1e7c      	subs	r4, r7, #1
  {
	zero_count--;
 8004956:	4d20      	ldr	r5, [pc, #128]	; (80049d8 <CDC_Receive_FS+0xa4>)
        //reset
        zero_count=0;
      }
      data_index=0;
    }else{
      if(is_first==1){
 8004958:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80049dc <CDC_Receive_FS+0xa8>
    	DecodedData[data_index]=0x00;
        zero_count=Buf[i];
      }else{
    	DecodedData[data_index]=Buf[i];
      }
      data_index++;
 800495c:	4e20      	ldr	r6, [pc, #128]	; (80049e0 <CDC_Receive_FS+0xac>)
 800495e:	e00d      	b.n	800497c <CDC_Receive_FS+0x48>
    	usb_receive(DecodedData,data_index);
 8004960:	7831      	ldrb	r1, [r6, #0]
 8004962:	4820      	ldr	r0, [pc, #128]	; (80049e4 <CDC_Receive_FS+0xb0>)
 8004964:	f7fb fbfa 	bl	800015c <usb_receive>
      data_index=0;
 8004968:	2300      	movs	r3, #0
 800496a:	7033      	strb	r3, [r6, #0]
  for(uint32_t i=0;i<*Len;i++)
 800496c:	f10a 0a02 	add.w	sl, sl, #2
 8004970:	ebaa 0a07 	sub.w	sl, sl, r7
 8004974:	f8d8 3000 	ldr.w	r3, [r8]
 8004978:	4553      	cmp	r3, sl
 800497a:	d927      	bls.n	80049cc <CDC_Receive_FS+0x98>
	zero_count--;
 800497c:	782b      	ldrb	r3, [r5, #0]
 800497e:	3b01      	subs	r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	702b      	strb	r3, [r5, #0]
    if(Buf[i]=='\0'){
 8004984:	46a2      	mov	sl, r4
 8004986:	3401      	adds	r4, #1
 8004988:	7822      	ldrb	r2, [r4, #0]
 800498a:	b93a      	cbnz	r2, 800499c <CDC_Receive_FS+0x68>
      is_first = 1;
 800498c:	2201      	movs	r2, #1
 800498e:	f889 2000 	strb.w	r2, [r9]
      if(zero_count==0){
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0e4      	beq.n	8004960 <CDC_Receive_FS+0x2c>
        zero_count=0;
 8004996:	2300      	movs	r3, #0
 8004998:	702b      	strb	r3, [r5, #0]
 800499a:	e7e5      	b.n	8004968 <CDC_Receive_FS+0x34>
      if(is_first==1){
 800499c:	f899 0000 	ldrb.w	r0, [r9]
 80049a0:	2801      	cmp	r0, #1
 80049a2:	d00a      	beq.n	80049ba <CDC_Receive_FS+0x86>
      if(zero_count==0){
 80049a4:	b973      	cbnz	r3, 80049c4 <CDC_Receive_FS+0x90>
    	DecodedData[data_index]=0x00;
 80049a6:	7833      	ldrb	r3, [r6, #0]
 80049a8:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <CDC_Receive_FS+0xb0>)
 80049aa:	2000      	movs	r0, #0
 80049ac:	54d0      	strb	r0, [r2, r3]
        zero_count=Buf[i];
 80049ae:	7823      	ldrb	r3, [r4, #0]
 80049b0:	702b      	strb	r3, [r5, #0]
      data_index++;
 80049b2:	7833      	ldrb	r3, [r6, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	7033      	strb	r3, [r6, #0]
 80049b8:	e7d8      	b.n	800496c <CDC_Receive_FS+0x38>
    	  zero_count = Buf[i];
 80049ba:	702a      	strb	r2, [r5, #0]
    	  is_first = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	f889 3000 	strb.w	r3, [r9]
    	  continue;
 80049c2:	e7d3      	b.n	800496c <CDC_Receive_FS+0x38>
    	DecodedData[data_index]=Buf[i];
 80049c4:	7833      	ldrb	r3, [r6, #0]
 80049c6:	4907      	ldr	r1, [pc, #28]	; (80049e4 <CDC_Receive_FS+0xb0>)
 80049c8:	54ca      	strb	r2, [r1, r3]
 80049ca:	e7f2      	b.n	80049b2 <CDC_Receive_FS+0x7e>
    }
  }
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80049cc:	2000      	movs	r0, #0
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d2:	bf00      	nop
 80049d4:	20000370 	.word	0x20000370
 80049d8:	20000134 	.word	0x20000134
 80049dc:	20000e75 	.word	0x20000e75
 80049e0:	20000e74 	.word	0x20000e74
 80049e4:	20000634 	.word	0x20000634

080049e8 <CDC_Init_FS>:
{
 80049e8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80049ea:	4c06      	ldr	r4, [pc, #24]	; (8004a04 <CDC_Init_FS+0x1c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	4906      	ldr	r1, [pc, #24]	; (8004a08 <CDC_Init_FS+0x20>)
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7ff fa68 	bl	8003ec6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80049f6:	4905      	ldr	r1, [pc, #20]	; (8004a0c <CDC_Init_FS+0x24>)
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff fa6c 	bl	8003ed6 <USBD_CDC_SetRxBuffer>
}
 80049fe:	2000      	movs	r0, #0
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	20000370 	.word	0x20000370
 8004a08:	20000a74 	.word	0x20000a74
 8004a0c:	20000674 	.word	0x20000674

08004a10 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <CDC_Transmit_FS+0x28>)
 8004a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8004a16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a1a:	b10b      	cbz	r3, 8004a20 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8004a1c:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8004a1e:	4770      	bx	lr
{
 8004a20:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004a22:	4c05      	ldr	r4, [pc, #20]	; (8004a38 <CDC_Transmit_FS+0x28>)
 8004a24:	460a      	mov	r2, r1
 8004a26:	4601      	mov	r1, r0
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fa4c 	bl	8003ec6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff fa57 	bl	8003ee2 <USBD_CDC_TransmitPacket>
}
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	bf00      	nop
 8004a38:	20000370 	.word	0x20000370

08004a3c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a3c:	2312      	movs	r3, #18
 8004a3e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004a40:	4800      	ldr	r0, [pc, #0]	; (8004a44 <USBD_FS_DeviceDescriptor+0x8>)
 8004a42:	4770      	bx	lr
 8004a44:	20000154 	.word	0x20000154

08004a48 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004a48:	2304      	movs	r3, #4
 8004a4a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004a4c:	4800      	ldr	r0, [pc, #0]	; (8004a50 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004a4e:	4770      	bx	lr
 8004a50:	20000168 	.word	0x20000168

08004a54 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004a54:	b1b2      	cbz	r2, 8004a84 <IntToUnicode+0x30>
 8004a56:	1c4b      	adds	r3, r1, #1
 8004a58:	f102 3cff 	add.w	ip, r2, #4294967295
 8004a5c:	fa5f fc8c 	uxtb.w	ip, ip
 8004a60:	3103      	adds	r1, #3
 8004a62:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004a66:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8004a6a:	0f02      	lsrs	r2, r0, #28
 8004a6c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8004a70:	bf34      	ite	cc
 8004a72:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004a74:	3237      	addcs	r2, #55	; 0x37
 8004a76:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 8004a7a:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004a7c:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8004a80:	428b      	cmp	r3, r1
 8004a82:	d1f2      	bne.n	8004a6a <IntToUnicode+0x16>
  }
}
 8004a84:	4770      	bx	lr
	...

08004a88 <USBD_FS_SerialStrDescriptor>:
{
 8004a88:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004a8a:	231a      	movs	r3, #26
 8004a8c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <USBD_FS_SerialStrDescriptor+0x38>)
 8004a90:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8004a94:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8004a98:	18c0      	adds	r0, r0, r3
 8004a9a:	d101      	bne.n	8004aa0 <USBD_FS_SerialStrDescriptor+0x18>
}
 8004a9c:	4809      	ldr	r0, [pc, #36]	; (8004ac4 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <USBD_FS_SerialStrDescriptor+0x38>)
 8004aa2:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004aa6:	4c07      	ldr	r4, [pc, #28]	; (8004ac4 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	1ca1      	adds	r1, r4, #2
 8004aac:	f7ff ffd2 	bl	8004a54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	f104 0112 	add.w	r1, r4, #18
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7ff ffcc 	bl	8004a54 <IntToUnicode>
 8004abc:	e7ee      	b.n	8004a9c <USBD_FS_SerialStrDescriptor+0x14>
 8004abe:	bf00      	nop
 8004ac0:	1ffff000 	.word	0x1ffff000
 8004ac4:	2000016c 	.word	0x2000016c

08004ac8 <USBD_FS_ProductStrDescriptor>:
{
 8004ac8:	b508      	push	{r3, lr}
 8004aca:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004acc:	4902      	ldr	r1, [pc, #8]	; (8004ad8 <USBD_FS_ProductStrDescriptor+0x10>)
 8004ace:	4803      	ldr	r0, [pc, #12]	; (8004adc <USBD_FS_ProductStrDescriptor+0x14>)
 8004ad0:	f7ff fe71 	bl	80047b6 <USBD_GetString>
}
 8004ad4:	4800      	ldr	r0, [pc, #0]	; (8004ad8 <USBD_FS_ProductStrDescriptor+0x10>)
 8004ad6:	bd08      	pop	{r3, pc}
 8004ad8:	20000e78 	.word	0x20000e78
 8004adc:	08005468 	.word	0x08005468

08004ae0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004ae4:	4c03      	ldr	r4, [pc, #12]	; (8004af4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4803      	ldr	r0, [pc, #12]	; (8004af8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004aea:	f7ff fe64 	bl	80047b6 <USBD_GetString>
}
 8004aee:	4620      	mov	r0, r4
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	bf00      	nop
 8004af4:	20000e78 	.word	0x20000e78
 8004af8:	08005474 	.word	0x08005474

08004afc <USBD_FS_ConfigStrDescriptor>:
{
 8004afc:	b508      	push	{r3, lr}
 8004afe:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b00:	4902      	ldr	r1, [pc, #8]	; (8004b0c <USBD_FS_ConfigStrDescriptor+0x10>)
 8004b02:	4803      	ldr	r0, [pc, #12]	; (8004b10 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004b04:	f7ff fe57 	bl	80047b6 <USBD_GetString>
}
 8004b08:	4800      	ldr	r0, [pc, #0]	; (8004b0c <USBD_FS_ConfigStrDescriptor+0x10>)
 8004b0a:	bd08      	pop	{r3, pc}
 8004b0c:	20000e78 	.word	0x20000e78
 8004b10:	08005480 	.word	0x08005480

08004b14 <USBD_FS_InterfaceStrDescriptor>:
{
 8004b14:	b508      	push	{r3, lr}
 8004b16:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b18:	4902      	ldr	r1, [pc, #8]	; (8004b24 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8004b1a:	4803      	ldr	r0, [pc, #12]	; (8004b28 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004b1c:	f7ff fe4b 	bl	80047b6 <USBD_GetString>
}
 8004b20:	4800      	ldr	r0, [pc, #0]	; (8004b24 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8004b22:	bd08      	pop	{r3, pc}
 8004b24:	20000e78 	.word	0x20000e78
 8004b28:	0800548c 	.word	0x0800548c

08004b2c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004b2c:	b120      	cbz	r0, 8004b38 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004b2e:	2802      	cmp	r0, #2
 8004b30:	bf14      	ite	ne
 8004b32:	2002      	movne	r0, #2
 8004b34:	2001      	moveq	r0, #1
 8004b36:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8004b3c:	6802      	ldr	r2, [r0, #0]
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_PCD_MspInit+0x3c>)
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d000      	beq.n	8004b46 <HAL_PCD_MspInit+0xa>
 8004b44:	4770      	bx	lr
{
 8004b46:	b500      	push	{lr}
 8004b48:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8004b4a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004b60:	2200      	movs	r2, #0
 8004b62:	4611      	mov	r1, r2
 8004b64:	2014      	movs	r0, #20
 8004b66:	f7fc f873 	bl	8000c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004b6a:	2014      	movs	r0, #20
 8004b6c:	f7fc f8a6 	bl	8000cbc <HAL_NVIC_EnableIRQ>
}
 8004b70:	b003      	add	sp, #12
 8004b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b76:	bf00      	nop
 8004b78:	40005c00 	.word	0x40005c00

08004b7c <HAL_PCD_SetupStageCallback>:
{
 8004b7c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004b7e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004b82:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004b86:	f7ff fa15 	bl	8003fb4 <USBD_LL_SetupStage>
}
 8004b8a:	bd08      	pop	{r3, pc}

08004b8c <HAL_PCD_DataOutStageCallback>:
{
 8004b8c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004b8e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004b92:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004b96:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004b9a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004b9e:	f7ff fa36 	bl	800400e <USBD_LL_DataOutStage>
}
 8004ba2:	bd08      	pop	{r3, pc}

08004ba4 <HAL_PCD_DataInStageCallback>:
{
 8004ba4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004ba6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004baa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb0:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004bb4:	f7ff fa6f 	bl	8004096 <USBD_LL_DataInStage>
}
 8004bb8:	bd08      	pop	{r3, pc}

08004bba <HAL_PCD_SOFCallback>:
{
 8004bba:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004bbc:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004bc0:	f7ff fb0e 	bl	80041e0 <USBD_LL_SOF>
}
 8004bc4:	bd08      	pop	{r3, pc}

08004bc6 <HAL_PCD_ResetCallback>:
{
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004bca:	6883      	ldr	r3, [r0, #8]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d109      	bne.n	8004be4 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8004bd6:	f7ff faed 	bl	80041b4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004bda:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8004bde:	f7ff fac1 	bl	8004164 <USBD_LL_Reset>
}
 8004be2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004be4:	f7fb fbd5 	bl	8000392 <Error_Handler>
 8004be8:	e7f2      	b.n	8004bd0 <HAL_PCD_ResetCallback+0xa>
	...

08004bec <HAL_PCD_SuspendCallback>:
{
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004bf0:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004bf4:	f7ff fae1 	bl	80041ba <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004bf8:	69a3      	ldr	r3, [r4, #24]
 8004bfa:	b123      	cbz	r3, 8004c06 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004bfc:	4a02      	ldr	r2, [pc, #8]	; (8004c08 <HAL_PCD_SuspendCallback+0x1c>)
 8004bfe:	6913      	ldr	r3, [r2, #16]
 8004c00:	f043 0306 	orr.w	r3, r3, #6
 8004c04:	6113      	str	r3, [r2, #16]
}
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <HAL_PCD_ResumeCallback>:
{
 8004c0c:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004c0e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004c12:	f7ff fadb 	bl	80041cc <USBD_LL_Resume>
}
 8004c16:	bd08      	pop	{r3, pc}

08004c18 <USBD_LL_Init>:
{
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004c1c:	481d      	ldr	r0, [pc, #116]	; (8004c94 <USBD_LL_Init+0x7c>)
 8004c1e:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8004c22:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <USBD_LL_Init+0x80>)
 8004c28:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004c36:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004c38:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004c3a:	f7fc f9a1 	bl	8000f80 <HAL_PCD_Init>
 8004c3e:	bb30      	cbnz	r0, 8004c8e <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004c40:	2318      	movs	r3, #24
 8004c42:	2200      	movs	r2, #0
 8004c44:	4611      	mov	r1, r2
 8004c46:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c4a:	f7fd f9b9 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004c4e:	2358      	movs	r3, #88	; 0x58
 8004c50:	2200      	movs	r2, #0
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c58:	f7fd f9b2 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004c5c:	23c0      	movs	r3, #192	; 0xc0
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2181      	movs	r1, #129	; 0x81
 8004c62:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c66:	f7fd f9ab 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004c6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2101      	movs	r1, #1
 8004c72:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c76:	f7fd f9a3 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2182      	movs	r1, #130	; 0x82
 8004c82:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004c86:	f7fd f99b 	bl	8001fc0 <HAL_PCDEx_PMAConfig>
}
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004c8e:	f7fb fb80 	bl	8000392 <Error_Handler>
 8004c92:	e7d5      	b.n	8004c40 <USBD_LL_Init+0x28>
 8004c94:	20001078 	.word	0x20001078
 8004c98:	40005c00 	.word	0x40005c00

08004c9c <USBD_LL_Start>:
{
 8004c9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004c9e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ca2:	f7fc f9f2 	bl	800108a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ca6:	f7ff ff41 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004caa:	bd08      	pop	{r3, pc}

08004cac <USBD_LL_OpenEP>:
{
 8004cac:	b508      	push	{r3, lr}
 8004cae:	4694      	mov	ip, r2
 8004cb0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004cb2:	4663      	mov	r3, ip
 8004cb4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cb8:	f7fd f85d 	bl	8001d76 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004cbc:	f7ff ff36 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004cc0:	bd08      	pop	{r3, pc}

08004cc2 <USBD_LL_CloseEP>:
{
 8004cc2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004cc4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cc8:	f7fd f891 	bl	8001dee <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ccc:	f7ff ff2e 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004cd0:	bd08      	pop	{r3, pc}

08004cd2 <USBD_LL_StallEP>:
{
 8004cd2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004cd4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cd8:	f7fd f8fb 	bl	8001ed2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004cdc:	f7ff ff26 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004ce0:	bd08      	pop	{r3, pc}

08004ce2 <USBD_LL_ClearStallEP>:
{
 8004ce2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004ce4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ce8:	f7fd f92f 	bl	8001f4a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004cec:	f7ff ff1e 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004cf0:	bd08      	pop	{r3, pc}

08004cf2 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004cf2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004cf6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004cfa:	d108      	bne.n	8004d0e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004cfc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004d00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004d04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004d08:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8004d0c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004d0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004d12:	3101      	adds	r1, #1
 8004d14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004d18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004d1c:	7888      	ldrb	r0, [r1, #2]
 8004d1e:	4770      	bx	lr

08004d20 <USBD_LL_SetUSBAddress>:
{
 8004d20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004d22:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d26:	f7fc f9c9 	bl	80010bc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d2a:	f7ff feff 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004d2e:	bd08      	pop	{r3, pc}

08004d30 <USBD_LL_Transmit>:
{
 8004d30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004d32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d36:	f7fd f8ab 	bl	8001e90 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d3a:	f7ff fef7 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004d3e:	bd08      	pop	{r3, pc}

08004d40 <USBD_LL_PrepareReceive>:
{
 8004d40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004d42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d46:	f7fd f881 	bl	8001e4c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d4a:	f7ff feef 	bl	8004b2c <USBD_Get_USB_Status>
}
 8004d4e:	bd08      	pop	{r3, pc}

08004d50 <USBD_LL_GetRxDataSize>:
{
 8004d50:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004d52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d56:	f7fd f892 	bl	8001e7e <HAL_PCD_EP_GetRxCount>
}
 8004d5a:	bd08      	pop	{r3, pc}

08004d5c <USBD_static_malloc>:
}
 8004d5c:	4800      	ldr	r0, [pc, #0]	; (8004d60 <USBD_static_malloc+0x4>)
 8004d5e:	4770      	bx	lr
 8004d60:	20001368 	.word	0x20001368

08004d64 <USBD_static_free>:
}
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_PCDEx_SetConnectionState>:
{
 8004d68:	b508      	push	{r3, lr}
  if (state == 1)
 8004d6a:	2901      	cmp	r1, #1
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_SET);
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2201      	moveq	r2, #1
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8004d70:	2200      	movne	r2, #0
 8004d72:	2102      	movs	r1, #2
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <HAL_PCDEx_SetConnectionState+0x14>)
 8004d76:	f7fc f8fd 	bl	8000f74 <HAL_GPIO_WritePin>
}
 8004d7a:	bd08      	pop	{r3, pc}
 8004d7c:	40010c00 	.word	0x40010c00

08004d80 <_ZdlPvj>:
 8004d80:	f000 b8d7 	b.w	8004f32 <_ZdlPv>

08004d84 <__cxa_guard_acquire>:
 8004d84:	6802      	ldr	r2, [r0, #0]
 8004d86:	4603      	mov	r3, r0
 8004d88:	07d2      	lsls	r2, r2, #31
 8004d8a:	d405      	bmi.n	8004d98 <__cxa_guard_acquire+0x14>
 8004d8c:	7842      	ldrb	r2, [r0, #1]
 8004d8e:	b102      	cbz	r2, 8004d92 <__cxa_guard_acquire+0xe>
 8004d90:	deff      	udf	#255	; 0xff
 8004d92:	2001      	movs	r0, #1
 8004d94:	7058      	strb	r0, [r3, #1]
 8004d96:	4770      	bx	lr
 8004d98:	2000      	movs	r0, #0
 8004d9a:	4770      	bx	lr

08004d9c <__cxa_guard_release>:
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	6003      	str	r3, [r0, #0]
 8004da0:	4770      	bx	lr

08004da2 <_Znwj>:
 8004da2:	2801      	cmp	r0, #1
 8004da4:	bf38      	it	cc
 8004da6:	2001      	movcc	r0, #1
 8004da8:	b510      	push	{r4, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 f903 	bl	8004fb8 <malloc>
 8004db2:	b930      	cbnz	r0, 8004dc2 <_Znwj+0x20>
 8004db4:	f000 f8c0 	bl	8004f38 <_ZSt15get_new_handlerv>
 8004db8:	b908      	cbnz	r0, 8004dbe <_Znwj+0x1c>
 8004dba:	f000 f8c5 	bl	8004f48 <abort>
 8004dbe:	4780      	blx	r0
 8004dc0:	e7f4      	b.n	8004dac <_Znwj+0xa>
 8004dc2:	bd10      	pop	{r4, pc}

08004dc4 <_ZSt17__throw_bad_allocv>:
 8004dc4:	b508      	push	{r3, lr}
 8004dc6:	f000 f8bf 	bl	8004f48 <abort>

08004dca <_ZSt19__throw_logic_errorPKc>:
 8004dca:	b508      	push	{r3, lr}
 8004dcc:	f000 f8bc 	bl	8004f48 <abort>

08004dd0 <_ZSt20__throw_length_errorPKc>:
 8004dd0:	b508      	push	{r3, lr}
 8004dd2:	f000 f8b9 	bl	8004f48 <abort>

08004dd6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8004dd6:	b40f      	push	{r0, r1, r2, r3}
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	f107 0410 	add.w	r4, r7, #16
 8004de2:	f854 5b04 	ldr.w	r5, [r4], #4
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7fb f9b0 	bl	800014c <strlen>
 8004dec:	f200 2307 	addw	r3, r0, #519	; 0x207
 8004df0:	f023 0307 	bic.w	r3, r3, #7
 8004df4:	ebad 0d03 	sub.w	sp, sp, r3
 8004df8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	462a      	mov	r2, r5
 8004e00:	4668      	mov	r0, sp
 8004e02:	607c      	str	r4, [r7, #4]
 8004e04:	f000 f854 	bl	8004eb0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8004e08:	f000 f89e 	bl	8004f48 <abort>

08004e0c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b09c      	sub	sp, #112	; 0x70
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	1ba4      	subs	r4, r4, r6
 8004e18:	2269      	movs	r2, #105	; 0x69
 8004e1a:	490e      	ldr	r1, [pc, #56]	; (8004e54 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8004e1c:	1d38      	adds	r0, r7, #4
 8004e1e:	f000 f8eb 	bl	8004ff8 <memcpy>
 8004e22:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	ebad 0d03 	sub.w	sp, sp, r3
 8004e2e:	466d      	mov	r5, sp
 8004e30:	2268      	movs	r2, #104	; 0x68
 8004e32:	1d39      	adds	r1, r7, #4
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 f8df 	bl	8004ff8 <memcpy>
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004e42:	f000 f8d9 	bl	8004ff8 <memcpy>
 8004e46:	2300      	movs	r3, #0
 8004e48:	442c      	add	r4, r5
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004e50:	f7ff ffbb 	bl	8004dca <_ZSt19__throw_logic_errorPKc>
 8004e54:	0800549a 	.word	0x0800549a

08004e58 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8004e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	b084      	sub	sp, #16
 8004e60:	466d      	mov	r5, sp
 8004e62:	f105 040c 	add.w	r4, r5, #12
 8004e66:	4623      	mov	r3, r4
 8004e68:	f04f 0c0a 	mov.w	ip, #10
 8004e6c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8004eac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8004e70:	fbb2 f6fc 	udiv	r6, r2, ip
 8004e74:	fb0c 2e16 	mls	lr, ip, r6, r2
 8004e78:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8004e7c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8004e80:	4696      	mov	lr, r2
 8004e82:	f1be 0f09 	cmp.w	lr, #9
 8004e86:	4632      	mov	r2, r6
 8004e88:	d8f2      	bhi.n	8004e70 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8004e8a:	1ae4      	subs	r4, r4, r3
 8004e8c:	428c      	cmp	r4, r1
 8004e8e:	d809      	bhi.n	8004ea4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8004e90:	f1c4 030c 	rsb	r3, r4, #12
 8004e94:	4622      	mov	r2, r4
 8004e96:	18e9      	adds	r1, r5, r3
 8004e98:	f000 f8ae 	bl	8004ff8 <memcpy>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea8:	e7f8      	b.n	8004e9c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8004eaa:	bf00      	nop
 8004eac:	08005503 	.word	0x08005503

08004eb0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	4615      	mov	r5, r2
 8004eb8:	4604      	mov	r4, r0
 8004eba:	3901      	subs	r1, #1
 8004ebc:	eb00 0801 	add.w	r8, r0, r1
 8004ec0:	782a      	ldrb	r2, [r5, #0]
 8004ec2:	b392      	cbz	r2, 8004f2a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8004ec4:	4544      	cmp	r4, r8
 8004ec6:	d22a      	bcs.n	8004f1e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8004ec8:	2a25      	cmp	r2, #37	; 0x25
 8004eca:	d107      	bne.n	8004edc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8004ecc:	786a      	ldrb	r2, [r5, #1]
 8004ece:	2a73      	cmp	r2, #115	; 0x73
 8004ed0:	d009      	beq.n	8004ee6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8004ed2:	2a7a      	cmp	r2, #122	; 0x7a
 8004ed4:	d012      	beq.n	8004efc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8004ed6:	2a25      	cmp	r2, #37	; 0x25
 8004ed8:	d100      	bne.n	8004edc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8004eda:	3501      	adds	r5, #1
 8004edc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004ee0:	f804 2b01 	strb.w	r2, [r4], #1
 8004ee4:	e7ec      	b.n	8004ec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8004ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eea:	3a01      	subs	r2, #1
 8004eec:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004ef0:	b1c9      	cbz	r1, 8004f26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8004ef2:	4544      	cmp	r4, r8
 8004ef4:	d013      	beq.n	8004f1e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8004ef6:	f804 1b01 	strb.w	r1, [r4], #1
 8004efa:	e7f7      	b.n	8004eec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8004efc:	78aa      	ldrb	r2, [r5, #2]
 8004efe:	2a75      	cmp	r2, #117	; 0x75
 8004f00:	d1ec      	bne.n	8004edc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8004f02:	461e      	mov	r6, r3
 8004f04:	4620      	mov	r0, r4
 8004f06:	f856 2b04 	ldr.w	r2, [r6], #4
 8004f0a:	eba8 0104 	sub.w	r1, r8, r4
 8004f0e:	f7ff ffa3 	bl	8004e58 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	dd03      	ble.n	8004f1e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8004f16:	4633      	mov	r3, r6
 8004f18:	4404      	add	r4, r0
 8004f1a:	3503      	adds	r5, #3
 8004f1c:	e7d0      	b.n	8004ec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4638      	mov	r0, r7
 8004f22:	f7ff ff73 	bl	8004e0c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8004f26:	3502      	adds	r5, #2
 8004f28:	e7ca      	b.n	8004ec0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8004f2a:	7022      	strb	r2, [r4, #0]
 8004f2c:	1be0      	subs	r0, r4, r7
 8004f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f32 <_ZdlPv>:
 8004f32:	f000 b849 	b.w	8004fc8 <free>
	...

08004f38 <_ZSt15get_new_handlerv>:
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <_ZSt15get_new_handlerv+0xc>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	f3bf 8f5b 	dmb	ish
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20001588 	.word	0x20001588

08004f48 <abort>:
 8004f48:	2006      	movs	r0, #6
 8004f4a:	b508      	push	{r3, lr}
 8004f4c:	f000 f998 	bl	8005280 <raise>
 8004f50:	2001      	movs	r0, #1
 8004f52:	f7fb fa61 	bl	8000418 <_exit>

08004f56 <atexit>:
 8004f56:	2300      	movs	r3, #0
 8004f58:	4601      	mov	r1, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 b9ab 	b.w	80052b8 <__register_exitproc>
	...

08004f64 <__errno>:
 8004f64:	4b01      	ldr	r3, [pc, #4]	; (8004f6c <__errno+0x8>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000188 	.word	0x20000188

08004f70 <__libc_init_array>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	2600      	movs	r6, #0
 8004f74:	4d0c      	ldr	r5, [pc, #48]	; (8004fa8 <__libc_init_array+0x38>)
 8004f76:	4c0d      	ldr	r4, [pc, #52]	; (8004fac <__libc_init_array+0x3c>)
 8004f78:	1b64      	subs	r4, r4, r5
 8004f7a:	10a4      	asrs	r4, r4, #2
 8004f7c:	42a6      	cmp	r6, r4
 8004f7e:	d109      	bne.n	8004f94 <__libc_init_array+0x24>
 8004f80:	f000 fa0e 	bl	80053a0 <_init>
 8004f84:	2600      	movs	r6, #0
 8004f86:	4d0a      	ldr	r5, [pc, #40]	; (8004fb0 <__libc_init_array+0x40>)
 8004f88:	4c0a      	ldr	r4, [pc, #40]	; (8004fb4 <__libc_init_array+0x44>)
 8004f8a:	1b64      	subs	r4, r4, r5
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	d105      	bne.n	8004f9e <__libc_init_array+0x2e>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f98:	4798      	blx	r3
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7ee      	b.n	8004f7c <__libc_init_array+0xc>
 8004f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa2:	4798      	blx	r3
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7f2      	b.n	8004f8e <__libc_init_array+0x1e>
 8004fa8:	08005510 	.word	0x08005510
 8004fac:	08005510 	.word	0x08005510
 8004fb0:	08005510 	.word	0x08005510
 8004fb4:	08005518 	.word	0x08005518

08004fb8 <malloc>:
 8004fb8:	4b02      	ldr	r3, [pc, #8]	; (8004fc4 <malloc+0xc>)
 8004fba:	4601      	mov	r1, r0
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	f000 b8b3 	b.w	8005128 <_malloc_r>
 8004fc2:	bf00      	nop
 8004fc4:	20000188 	.word	0x20000188

08004fc8 <free>:
 8004fc8:	4b02      	ldr	r3, [pc, #8]	; (8004fd4 <free+0xc>)
 8004fca:	4601      	mov	r1, r0
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	f000 b843 	b.w	8005058 <_free_r>
 8004fd2:	bf00      	nop
 8004fd4:	20000188 	.word	0x20000188

08004fd8 <memcmp>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	3901      	subs	r1, #1
 8004fdc:	4402      	add	r2, r0
 8004fde:	4290      	cmp	r0, r2
 8004fe0:	d101      	bne.n	8004fe6 <memcmp+0xe>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e005      	b.n	8004ff2 <memcmp+0x1a>
 8004fe6:	7803      	ldrb	r3, [r0, #0]
 8004fe8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d001      	beq.n	8004ff4 <memcmp+0x1c>
 8004ff0:	1b18      	subs	r0, r3, r4
 8004ff2:	bd10      	pop	{r4, pc}
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	e7f2      	b.n	8004fde <memcmp+0x6>

08004ff8 <memcpy>:
 8004ff8:	440a      	add	r2, r1
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005000:	d100      	bne.n	8005004 <memcpy+0xc>
 8005002:	4770      	bx	lr
 8005004:	b510      	push	{r4, lr}
 8005006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500a:	4291      	cmp	r1, r2
 800500c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005010:	d1f9      	bne.n	8005006 <memcpy+0xe>
 8005012:	bd10      	pop	{r4, pc}

08005014 <memmove>:
 8005014:	4288      	cmp	r0, r1
 8005016:	b510      	push	{r4, lr}
 8005018:	eb01 0402 	add.w	r4, r1, r2
 800501c:	d902      	bls.n	8005024 <memmove+0x10>
 800501e:	4284      	cmp	r4, r0
 8005020:	4623      	mov	r3, r4
 8005022:	d807      	bhi.n	8005034 <memmove+0x20>
 8005024:	1e43      	subs	r3, r0, #1
 8005026:	42a1      	cmp	r1, r4
 8005028:	d008      	beq.n	800503c <memmove+0x28>
 800502a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800502e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005032:	e7f8      	b.n	8005026 <memmove+0x12>
 8005034:	4601      	mov	r1, r0
 8005036:	4402      	add	r2, r0
 8005038:	428a      	cmp	r2, r1
 800503a:	d100      	bne.n	800503e <memmove+0x2a>
 800503c:	bd10      	pop	{r4, pc}
 800503e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005046:	e7f7      	b.n	8005038 <memmove+0x24>

08005048 <memset>:
 8005048:	4603      	mov	r3, r0
 800504a:	4402      	add	r2, r0
 800504c:	4293      	cmp	r3, r2
 800504e:	d100      	bne.n	8005052 <memset+0xa>
 8005050:	4770      	bx	lr
 8005052:	f803 1b01 	strb.w	r1, [r3], #1
 8005056:	e7f9      	b.n	800504c <memset+0x4>

08005058 <_free_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4605      	mov	r5, r0
 800505c:	2900      	cmp	r1, #0
 800505e:	d040      	beq.n	80050e2 <_free_r+0x8a>
 8005060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005064:	1f0c      	subs	r4, r1, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	bfb8      	it	lt
 800506a:	18e4      	addlt	r4, r4, r3
 800506c:	f000 f98c 	bl	8005388 <__malloc_lock>
 8005070:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <_free_r+0x8c>)
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	b933      	cbnz	r3, 8005084 <_free_r+0x2c>
 8005076:	6063      	str	r3, [r4, #4]
 8005078:	6014      	str	r4, [r2, #0]
 800507a:	4628      	mov	r0, r5
 800507c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005080:	f000 b988 	b.w	8005394 <__malloc_unlock>
 8005084:	42a3      	cmp	r3, r4
 8005086:	d908      	bls.n	800509a <_free_r+0x42>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	1821      	adds	r1, r4, r0
 800508c:	428b      	cmp	r3, r1
 800508e:	bf01      	itttt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	1809      	addeq	r1, r1, r0
 8005096:	6021      	streq	r1, [r4, #0]
 8005098:	e7ed      	b.n	8005076 <_free_r+0x1e>
 800509a:	461a      	mov	r2, r3
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b10b      	cbz	r3, 80050a4 <_free_r+0x4c>
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	d9fa      	bls.n	800509a <_free_r+0x42>
 80050a4:	6811      	ldr	r1, [r2, #0]
 80050a6:	1850      	adds	r0, r2, r1
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d10b      	bne.n	80050c4 <_free_r+0x6c>
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	4401      	add	r1, r0
 80050b0:	1850      	adds	r0, r2, r1
 80050b2:	4283      	cmp	r3, r0
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	d1e0      	bne.n	800507a <_free_r+0x22>
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4401      	add	r1, r0
 80050be:	6011      	str	r1, [r2, #0]
 80050c0:	6053      	str	r3, [r2, #4]
 80050c2:	e7da      	b.n	800507a <_free_r+0x22>
 80050c4:	d902      	bls.n	80050cc <_free_r+0x74>
 80050c6:	230c      	movs	r3, #12
 80050c8:	602b      	str	r3, [r5, #0]
 80050ca:	e7d6      	b.n	800507a <_free_r+0x22>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	1821      	adds	r1, r4, r0
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf01      	itttt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	1809      	addeq	r1, r1, r0
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	6063      	str	r3, [r4, #4]
 80050de:	6054      	str	r4, [r2, #4]
 80050e0:	e7cb      	b.n	800507a <_free_r+0x22>
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	2000158c 	.word	0x2000158c

080050e8 <sbrk_aligned>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4e0e      	ldr	r6, [pc, #56]	; (8005124 <sbrk_aligned+0x3c>)
 80050ec:	460c      	mov	r4, r1
 80050ee:	6831      	ldr	r1, [r6, #0]
 80050f0:	4605      	mov	r5, r0
 80050f2:	b911      	cbnz	r1, 80050fa <sbrk_aligned+0x12>
 80050f4:	f000 f88c 	bl	8005210 <_sbrk_r>
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	4621      	mov	r1, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 f887 	bl	8005210 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d00a      	beq.n	800511c <sbrk_aligned+0x34>
 8005106:	1cc4      	adds	r4, r0, #3
 8005108:	f024 0403 	bic.w	r4, r4, #3
 800510c:	42a0      	cmp	r0, r4
 800510e:	d007      	beq.n	8005120 <sbrk_aligned+0x38>
 8005110:	1a21      	subs	r1, r4, r0
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f87c 	bl	8005210 <_sbrk_r>
 8005118:	3001      	adds	r0, #1
 800511a:	d101      	bne.n	8005120 <sbrk_aligned+0x38>
 800511c:	f04f 34ff 	mov.w	r4, #4294967295
 8005120:	4620      	mov	r0, r4
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	20001590 	.word	0x20001590

08005128 <_malloc_r>:
 8005128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	1ccd      	adds	r5, r1, #3
 800512e:	f025 0503 	bic.w	r5, r5, #3
 8005132:	3508      	adds	r5, #8
 8005134:	2d0c      	cmp	r5, #12
 8005136:	bf38      	it	cc
 8005138:	250c      	movcc	r5, #12
 800513a:	2d00      	cmp	r5, #0
 800513c:	4607      	mov	r7, r0
 800513e:	db01      	blt.n	8005144 <_malloc_r+0x1c>
 8005140:	42a9      	cmp	r1, r5
 8005142:	d905      	bls.n	8005150 <_malloc_r+0x28>
 8005144:	230c      	movs	r3, #12
 8005146:	2600      	movs	r6, #0
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4630      	mov	r0, r6
 800514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005150:	4e2e      	ldr	r6, [pc, #184]	; (800520c <_malloc_r+0xe4>)
 8005152:	f000 f919 	bl	8005388 <__malloc_lock>
 8005156:	6833      	ldr	r3, [r6, #0]
 8005158:	461c      	mov	r4, r3
 800515a:	bb34      	cbnz	r4, 80051aa <_malloc_r+0x82>
 800515c:	4629      	mov	r1, r5
 800515e:	4638      	mov	r0, r7
 8005160:	f7ff ffc2 	bl	80050e8 <sbrk_aligned>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	4604      	mov	r4, r0
 8005168:	d14d      	bne.n	8005206 <_malloc_r+0xde>
 800516a:	6834      	ldr	r4, [r6, #0]
 800516c:	4626      	mov	r6, r4
 800516e:	2e00      	cmp	r6, #0
 8005170:	d140      	bne.n	80051f4 <_malloc_r+0xcc>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	4631      	mov	r1, r6
 8005176:	4638      	mov	r0, r7
 8005178:	eb04 0803 	add.w	r8, r4, r3
 800517c:	f000 f848 	bl	8005210 <_sbrk_r>
 8005180:	4580      	cmp	r8, r0
 8005182:	d13a      	bne.n	80051fa <_malloc_r+0xd2>
 8005184:	6821      	ldr	r1, [r4, #0]
 8005186:	3503      	adds	r5, #3
 8005188:	1a6d      	subs	r5, r5, r1
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	4638      	mov	r0, r7
 8005198:	4629      	mov	r1, r5
 800519a:	f7ff ffa5 	bl	80050e8 <sbrk_aligned>
 800519e:	3001      	adds	r0, #1
 80051a0:	d02b      	beq.n	80051fa <_malloc_r+0xd2>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	442b      	add	r3, r5
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	e00e      	b.n	80051c8 <_malloc_r+0xa0>
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	1b52      	subs	r2, r2, r5
 80051ae:	d41e      	bmi.n	80051ee <_malloc_r+0xc6>
 80051b0:	2a0b      	cmp	r2, #11
 80051b2:	d916      	bls.n	80051e2 <_malloc_r+0xba>
 80051b4:	1961      	adds	r1, r4, r5
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	6025      	str	r5, [r4, #0]
 80051ba:	bf18      	it	ne
 80051bc:	6059      	strne	r1, [r3, #4]
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	bf08      	it	eq
 80051c2:	6031      	streq	r1, [r6, #0]
 80051c4:	5162      	str	r2, [r4, r5]
 80051c6:	604b      	str	r3, [r1, #4]
 80051c8:	4638      	mov	r0, r7
 80051ca:	f104 060b 	add.w	r6, r4, #11
 80051ce:	f000 f8e1 	bl	8005394 <__malloc_unlock>
 80051d2:	f026 0607 	bic.w	r6, r6, #7
 80051d6:	1d23      	adds	r3, r4, #4
 80051d8:	1af2      	subs	r2, r6, r3
 80051da:	d0b6      	beq.n	800514a <_malloc_r+0x22>
 80051dc:	1b9b      	subs	r3, r3, r6
 80051de:	50a3      	str	r3, [r4, r2]
 80051e0:	e7b3      	b.n	800514a <_malloc_r+0x22>
 80051e2:	6862      	ldr	r2, [r4, #4]
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	bf0c      	ite	eq
 80051e8:	6032      	streq	r2, [r6, #0]
 80051ea:	605a      	strne	r2, [r3, #4]
 80051ec:	e7ec      	b.n	80051c8 <_malloc_r+0xa0>
 80051ee:	4623      	mov	r3, r4
 80051f0:	6864      	ldr	r4, [r4, #4]
 80051f2:	e7b2      	b.n	800515a <_malloc_r+0x32>
 80051f4:	4634      	mov	r4, r6
 80051f6:	6876      	ldr	r6, [r6, #4]
 80051f8:	e7b9      	b.n	800516e <_malloc_r+0x46>
 80051fa:	230c      	movs	r3, #12
 80051fc:	4638      	mov	r0, r7
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	f000 f8c8 	bl	8005394 <__malloc_unlock>
 8005204:	e7a1      	b.n	800514a <_malloc_r+0x22>
 8005206:	6025      	str	r5, [r4, #0]
 8005208:	e7de      	b.n	80051c8 <_malloc_r+0xa0>
 800520a:	bf00      	nop
 800520c:	2000158c 	.word	0x2000158c

08005210 <_sbrk_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	2300      	movs	r3, #0
 8005214:	4d05      	ldr	r5, [pc, #20]	; (800522c <_sbrk_r+0x1c>)
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fb f902 	bl	8000424 <_sbrk>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_sbrk_r+0x1a>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_sbrk_r+0x1a>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	20001628 	.word	0x20001628

08005230 <_raise_r>:
 8005230:	291f      	cmp	r1, #31
 8005232:	b538      	push	{r3, r4, r5, lr}
 8005234:	4604      	mov	r4, r0
 8005236:	460d      	mov	r5, r1
 8005238:	d904      	bls.n	8005244 <_raise_r+0x14>
 800523a:	2316      	movs	r3, #22
 800523c:	6003      	str	r3, [r0, #0]
 800523e:	f04f 30ff 	mov.w	r0, #4294967295
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005246:	b112      	cbz	r2, 800524e <_raise_r+0x1e>
 8005248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800524c:	b94b      	cbnz	r3, 8005262 <_raise_r+0x32>
 800524e:	4620      	mov	r0, r4
 8005250:	f000 f830 	bl	80052b4 <_getpid_r>
 8005254:	462a      	mov	r2, r5
 8005256:	4601      	mov	r1, r0
 8005258:	4620      	mov	r0, r4
 800525a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525e:	f000 b817 	b.w	8005290 <_kill_r>
 8005262:	2b01      	cmp	r3, #1
 8005264:	d00a      	beq.n	800527c <_raise_r+0x4c>
 8005266:	1c59      	adds	r1, r3, #1
 8005268:	d103      	bne.n	8005272 <_raise_r+0x42>
 800526a:	2316      	movs	r3, #22
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	2001      	movs	r0, #1
 8005270:	e7e7      	b.n	8005242 <_raise_r+0x12>
 8005272:	2400      	movs	r4, #0
 8005274:	4628      	mov	r0, r5
 8005276:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800527a:	4798      	blx	r3
 800527c:	2000      	movs	r0, #0
 800527e:	e7e0      	b.n	8005242 <_raise_r+0x12>

08005280 <raise>:
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <raise+0xc>)
 8005282:	4601      	mov	r1, r0
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	f7ff bfd3 	b.w	8005230 <_raise_r>
 800528a:	bf00      	nop
 800528c:	20000188 	.word	0x20000188

08005290 <_kill_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	2300      	movs	r3, #0
 8005294:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_kill_r+0x20>)
 8005296:	4604      	mov	r4, r0
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	f7fb f8b3 	bl	8000408 <_kill>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	d102      	bne.n	80052ac <_kill_r+0x1c>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	b103      	cbz	r3, 80052ac <_kill_r+0x1c>
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	bd38      	pop	{r3, r4, r5, pc}
 80052ae:	bf00      	nop
 80052b0:	20001628 	.word	0x20001628

080052b4 <_getpid_r>:
 80052b4:	f7fb b8a6 	b.w	8000404 <_getpid>

080052b8 <__register_exitproc>:
 80052b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800536c <__register_exitproc+0xb4>
 80052c0:	4606      	mov	r6, r0
 80052c2:	f8d8 0000 	ldr.w	r0, [r8]
 80052c6:	461f      	mov	r7, r3
 80052c8:	460d      	mov	r5, r1
 80052ca:	4691      	mov	r9, r2
 80052cc:	f000 f858 	bl	8005380 <__retarget_lock_acquire_recursive>
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <__register_exitproc+0xb8>)
 80052d2:	681c      	ldr	r4, [r3, #0]
 80052d4:	b934      	cbnz	r4, 80052e4 <__register_exitproc+0x2c>
 80052d6:	4c27      	ldr	r4, [pc, #156]	; (8005374 <__register_exitproc+0xbc>)
 80052d8:	601c      	str	r4, [r3, #0]
 80052da:	4b27      	ldr	r3, [pc, #156]	; (8005378 <__register_exitproc+0xc0>)
 80052dc:	b113      	cbz	r3, 80052e4 <__register_exitproc+0x2c>
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	2b1f      	cmp	r3, #31
 80052e8:	dd07      	ble.n	80052fa <__register_exitproc+0x42>
 80052ea:	f8d8 0000 	ldr.w	r0, [r8]
 80052ee:	f000 f849 	bl	8005384 <__retarget_lock_release_recursive>
 80052f2:	f04f 30ff 	mov.w	r0, #4294967295
 80052f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fa:	b35e      	cbz	r6, 8005354 <__register_exitproc+0x9c>
 80052fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005300:	b988      	cbnz	r0, 8005326 <__register_exitproc+0x6e>
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <__register_exitproc+0xc4>)
 8005304:	b923      	cbnz	r3, 8005310 <__register_exitproc+0x58>
 8005306:	f8d8 0000 	ldr.w	r0, [r8]
 800530a:	f000 f83a 	bl	8005382 <__retarget_lock_release>
 800530e:	e7f0      	b.n	80052f2 <__register_exitproc+0x3a>
 8005310:	f44f 7084 	mov.w	r0, #264	; 0x108
 8005314:	f7ff fe50 	bl	8004fb8 <malloc>
 8005318:	2800      	cmp	r0, #0
 800531a:	d0f4      	beq.n	8005306 <__register_exitproc+0x4e>
 800531c:	2300      	movs	r3, #0
 800531e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8005322:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8005326:	2201      	movs	r2, #1
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	2e02      	cmp	r6, #2
 800532c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8005330:	fa02 f203 	lsl.w	r2, r2, r3
 8005334:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8005338:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800533c:	ea43 0302 	orr.w	r3, r3, r2
 8005340:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8005344:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8005348:	bf02      	ittt	eq
 800534a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800534e:	4313      	orreq	r3, r2
 8005350:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	f8d8 0000 	ldr.w	r0, [r8]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	3302      	adds	r3, #2
 800535e:	6062      	str	r2, [r4, #4]
 8005360:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8005364:	f000 f80e 	bl	8005384 <__retarget_lock_release_recursive>
 8005368:	2000      	movs	r0, #0
 800536a:	e7c4      	b.n	80052f6 <__register_exitproc+0x3e>
 800536c:	200001ec 	.word	0x200001ec
 8005370:	20001620 	.word	0x20001620
 8005374:	20001594 	.word	0x20001594
 8005378:	00000000 	.word	0x00000000
 800537c:	08004fb9 	.word	0x08004fb9

08005380 <__retarget_lock_acquire_recursive>:
 8005380:	4770      	bx	lr

08005382 <__retarget_lock_release>:
 8005382:	4770      	bx	lr

08005384 <__retarget_lock_release_recursive>:
 8005384:	4770      	bx	lr
	...

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__malloc_lock+0x8>)
 800538a:	f7ff bff9 	b.w	8005380 <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	20001625 	.word	0x20001625

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	; (800539c <__malloc_unlock+0x8>)
 8005396:	f7ff bff5 	b.w	8005384 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	20001625 	.word	0x20001625

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
